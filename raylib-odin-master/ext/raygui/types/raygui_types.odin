//
// generated by bindgen (https://github.com/Breush/odin-binding-generator)
//

package raygui_types

import _c "core:c"

import "../../raylib/types"
import "core:math/linalg"
RAYGUI_H :: 1;
RAYGUI_VERSION :: "2.0-dev";
RAYGUI_RICONS_SUPPORT :: 1;
TEXTEDIT_CURSOR_BLINK_FRAMES :: 20;
NUM_CONTROLS :: 13;
NUM_PROPS_DEFAULT :: 16;
NUM_PROPS_EXTENDED :: 8;


raygui_Funcs :: struct {
    gui_list_element : proc "c" (
        bounds : Rectangle,
        text : cstring,
        active : bool,
        edit_mode : bool
    ) -> bool,
    convert_hs_vto_rgb : proc "c" (hsv : Vector3) -> Vector3,
    convert_rg_bto_hsv : proc "c" (rgb : Vector3) -> Vector3,
    get_text_width : proc "c" (text : cstring) -> _c.int,
    get_text_bounds : proc "c" (
        control : _c.int,
        bounds : Rectangle
    ) -> Rectangle,
    get_text_icon : proc "c" (
        text : cstring,
        icon_id : ^_c.int
    ) -> cstring,
    gui_draw_text : proc "c" (
        text : cstring,
        bounds : Rectangle,
        alignment : _c.int,
        tint : Color
    ),
    gui_text_split : proc "c" (
        text : cstring,
        count : ^_c.int,
        text_row : ^_c.int
    ) -> ^cstring,
    gui_enable : proc "c" (),
    gui_disable : proc "c" (),
    gui_lock : proc "c" (),
    gui_unlock : proc "c" (),
    gui_state : proc "c" (state : _c.int),
    gui_font : proc "c" (font : Font),
    gui_fade : proc "c" (alpha : _c.float),
    gui_set_style : proc "c" (
        control : _c.int,
        property : _c.int,
        value : _c.int
    ),
    gui_get_style : proc "c" (
        control : _c.int,
        property : _c.int
    ) -> _c.int,
    gui_window_box : proc "c" (
        bounds : Rectangle,
        text : cstring
    ) -> bool,
    gui_group_box : proc "c" (
        bounds : Rectangle,
        text : cstring
    ),
    gui_line : proc "c" (
        bounds : Rectangle,
        text : cstring
    ),
    gui_panel : proc "c" (bounds : Rectangle),
    gui_scroll_panel : proc "c" (
        bounds : Rectangle,
        content : Rectangle,
        scroll : ^Vector2
    ) -> Rectangle,
    gui_label : proc "c" (
        bounds : Rectangle,
        text : cstring
    ),
    gui_button : proc "c" (
        bounds : Rectangle,
        text : cstring
    ) -> bool,
    gui_label_button : proc "c" (
        bounds : Rectangle,
        text : cstring
    ) -> bool,
    gui_image_button : proc "c" (
        bounds : Rectangle,
        texture : Texture2D
    ) -> bool,
    gui_image_button_ex : proc "c" (
        bounds : Rectangle,
        texture : Texture2D,
        tex_source : Rectangle,
        text : cstring
    ) -> bool,
    gui_toggle : proc "c" (
        bounds : Rectangle,
        text : cstring,
        active : bool
    ) -> bool,
    gui_toggle_group : proc "c" (
        bounds : Rectangle,
        text : cstring,
        active : _c.int
    ) -> _c.int,
    gui_check_box : proc "c" (
        bounds : Rectangle,
        text : cstring,
        checked : bool
    ) -> bool,
    gui_combo_box : proc "c" (
        bounds : Rectangle,
        text : cstring,
        active : _c.int
    ) -> _c.int,
    gui_dropdown_box : proc "c" (
        bounds : Rectangle,
        text : cstring,
        active : ^_c.int,
        edit_mode : bool
    ) -> bool,
    gui_spinner : proc "c" (
        bounds : Rectangle,
        value : ^_c.int,
        min_value : _c.int,
        max_value : _c.int,
        edit_mode : bool
    ) -> bool,
    gui_value_box : proc "c" (
        bounds : Rectangle,
        value : ^_c.int,
        min_value : _c.int,
        max_value : _c.int,
        edit_mode : bool
    ) -> bool,
    gui_text_box : proc "c" (
        bounds : Rectangle,
        text : cstring,
        text_size : _c.int,
        edit_mode : bool
    ) -> bool,
    gui_text_box_multi : proc "c" (
        bounds : Rectangle,
        text : cstring,
        text_size : _c.int,
        edit_mode : bool
    ) -> bool,
    gui_slider_pro : proc "c" (
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        slider_width : _c.int,
        show_value : bool
    ) -> _c.float,
    gui_slider : proc "c" (
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        show_value : bool
    ) -> _c.float,
    gui_slider_bar : proc "c" (
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        show_value : bool
    ) -> _c.float,
    gui_progress_bar : proc "c" (
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        show_value : bool
    ) -> _c.float,
    gui_status_bar : proc "c" (
        bounds : Rectangle,
        text : cstring
    ),
    gui_dummy_rec : proc "c" (
        bounds : Rectangle,
        text : cstring
    ),
    gui_scroll_bar : proc "c" (
        bounds : Rectangle,
        value : _c.int,
        min_value : _c.int,
        max_value : _c.int
    ) -> _c.int,
    gui_list_view : proc "c" (
        bounds : Rectangle,
        text : cstring,
        active : ^_c.int,
        scroll_index : ^_c.int,
        edit_mode : bool
    ) -> bool,
    gui_list_view_ex : proc "c" (
        bounds : Rectangle,
        text : ^cstring,
        count : _c.int,
        enabled : ^_c.int,
        active : ^_c.int,
        focus : ^_c.int,
        scroll_index : ^_c.int,
        edit_mode : bool
    ) -> bool,
    gui_color_panel : proc "c" (
        bounds : Rectangle,
        color : Color
    ) -> Color,
    gui_color_bar_alpha : proc "c" (
        bounds : Rectangle,
        alpha : _c.float
    ) -> _c.float,
    gui_color_bar_hue : proc "c" (
        bounds : Rectangle,
        hue : _c.float
    ) -> _c.float,
    gui_color_picker : proc "c" (
        bounds : Rectangle,
        color : Color
    ) -> Color,
    gui_message_box : proc "c" (
        bounds : Rectangle,
        window_title : cstring,
        message : cstring,
        buttons : cstring
    ) -> _c.int,
    gui_grid : proc "c" (
        bounds : Rectangle,
        spacing : _c.float,
        subdivs : _c.int
    ) -> Vector2,
    gui_load_style : proc "c" (file_name : cstring),
    gui_load_style_props : proc "c" (
        props : ^_c.int,
        count : _c.int
    ),
    gui_load_style_default : proc "c" (),
    gui_update_style_complete : proc "c" (),
    gui_icon_text : proc "c" (
        icon_id : _c.int,
        text : cstring
    ) -> cstring,
}

