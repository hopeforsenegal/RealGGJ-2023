//
// generated by bindgen (https://github.com/Breush/odin-binding-generator)
//

package raymath_types

import _c "core:c"

import "../../../raylib/types"
RAYMATH_H :: 1;


Float3 :: struct {
    v : [3]_c.float,
};

Float16 :: struct {
    v : [16]_c.float,
};

raymath_Funcs :: struct {
    clamp : proc "c" (
        value : _c.float,
        min : _c.float,
        max : _c.float
    ) -> _c.float,
    lerp : proc "c" (
        start : _c.float,
        end : _c.float,
        amount : _c.float
    ) -> _c.float,
    vector2_zero : proc "c" () -> Vector2,
    vector2_one : proc "c" () -> Vector2,
    vector2_add : proc "c" (
        v1 : Vector2,
        v2 : Vector2
    ) -> Vector2,
    vector2_subtract : proc "c" (
        v1 : Vector2,
        v2 : Vector2
    ) -> Vector2,
    vector2_length : proc "c" (v : Vector2) -> _c.float,
    vector2_dot_product : proc "c" (
        v1 : Vector2,
        v2 : Vector2
    ) -> _c.float,
    vector2_distance : proc "c" (
        v1 : Vector2,
        v2 : Vector2
    ) -> _c.float,
    vector2_angle : proc "c" (
        v1 : Vector2,
        v2 : Vector2
    ) -> _c.float,
    vector2_scale : proc "c" (
        v : Vector2,
        scale : _c.float
    ) -> Vector2,
    vector2_multiply_v : proc "c" (
        v1 : Vector2,
        v2 : Vector2
    ) -> Vector2,
    vector2_negate : proc "c" (v : Vector2) -> Vector2,
    vector2_divide : proc "c" (
        v : Vector2,
        div : _c.float
    ) -> Vector2,
    vector2_divide_v : proc "c" (
        v1 : Vector2,
        v2 : Vector2
    ) -> Vector2,
    vector2_normalize : proc "c" (v : Vector2) -> Vector2,
    vector2_lerp : proc "c" (
        v1 : Vector2,
        v2 : Vector2,
        amount : _c.float
    ) -> Vector2,
    vector3_zero : proc "c" () -> Vector3,
    vector3_one : proc "c" () -> Vector3,
    vector3_add : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> Vector3,
    vector3_subtract : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> Vector3,
    vector3_multiply : proc "c" (
        v : Vector3,
        scalar : _c.float
    ) -> Vector3,
    vector3_multiply_v : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> Vector3,
    vector3_cross_product : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> Vector3,
    vector3_perpendicular : proc "c" (v : Vector3) -> Vector3,
    vector3_length : proc "c" (v : Vector3) -> _c.float,
    vector3_dot_product : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> _c.float,
    vector3_distance : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> _c.float,
    vector3_scale : proc "c" (
        v : Vector3,
        scale : _c.float
    ) -> Vector3,
    vector3_negate : proc "c" (v : Vector3) -> Vector3,
    vector3_divide : proc "c" (
        v : Vector3,
        div : _c.float
    ) -> Vector3,
    vector3_divide_v : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> Vector3,
    vector3_normalize : proc "c" (v : Vector3) -> Vector3,
    vector3_ortho_normalize : proc "c" (
        v1 : ^Vector3,
        v2 : ^Vector3
    ),
    vector3_transform : proc "c" (
        v : Vector3,
        mat : Matrix
    ) -> Vector3,
    vector3_rotate_by_quaternion : proc "c" (
        v : Vector3,
        q : Quaternion
    ) -> Vector3,
    vector3_lerp : proc "c" (
        v1 : Vector3,
        v2 : Vector3,
        amount : _c.float
    ) -> Vector3,
    vector3_reflect : proc "c" (
        v : Vector3,
        normal : Vector3
    ) -> Vector3,
    vector3_min : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> Vector3,
    vector3_max : proc "c" (
        v1 : Vector3,
        v2 : Vector3
    ) -> Vector3,
    vector3_barycenter : proc "c" (
        p : Vector3,
        a : Vector3,
        b : Vector3,
        c : Vector3
    ) -> Vector3,
    vector3_to_float_v : proc "c" (v : Vector3) -> Float3,
    matrix_determinant : proc "c" (mat : Matrix) -> _c.float,
    matrix_trace : proc "c" (mat : Matrix) -> _c.float,
    matrix_transpose : proc "c" (mat : Matrix) -> Matrix,
    matrix_invert : proc "c" (mat : Matrix) -> Matrix,
    matrix_normalize : proc "c" (mat : Matrix) -> Matrix,
    matrix_identity : proc "c" () -> Matrix,
    matrix_add : proc "c" (
        left : Matrix,
        right : Matrix
    ) -> Matrix,
    matrix_subtract : proc "c" (
        left : Matrix,
        right : Matrix
    ) -> Matrix,
    matrix_translate : proc "c" (
        x : _c.float,
        y : _c.float,
        z : _c.float
    ) -> Matrix,
    matrix_rotate : proc "c" (
        axis : Vector3,
        angle : _c.float
    ) -> Matrix,
    matrix_rotate_x : proc "c" (angle : _c.float) -> Matrix,
    matrix_rotate_y : proc "c" (angle : _c.float) -> Matrix,
    matrix_rotate_z : proc "c" (angle : _c.float) -> Matrix,
    matrix_scale : proc "c" (
        x : _c.float,
        y : _c.float,
        z : _c.float
    ) -> Matrix,
    matrix_multiply : proc "c" (
        left : Matrix,
        right : Matrix
    ) -> Matrix,
    matrix_frustum : proc "c" (
        left : _c.double,
        right : _c.double,
        bottom : _c.double,
        top : _c.double,
        near : _c.double,
        far : _c.double
    ) -> Matrix,
    matrix_perspective : proc "c" (
        fovy : _c.double,
        aspect : _c.double,
        near : _c.double,
        far : _c.double
    ) -> Matrix,
    matrix_ortho : proc "c" (
        left : _c.double,
        right : _c.double,
        bottom : _c.double,
        top : _c.double,
        near : _c.double,
        far : _c.double
    ) -> Matrix,
    matrix_look_at : proc "c" (
        eye : Vector3,
        target : Vector3,
        up : Vector3
    ) -> Matrix,
    matrix_to_float_v : proc "c" (mat : Matrix) -> Float16,
    quaternion_identity : proc "c" () -> Quaternion,
    quaternion_length : proc "c" (q : Quaternion) -> _c.float,
    quaternion_normalize : proc "c" (q : Quaternion) -> Quaternion,
    quaternion_invert : proc "c" (q : Quaternion) -> Quaternion,
    quaternion_multiply : proc "c" (
        q1 : Quaternion,
        q2 : Quaternion
    ) -> Quaternion,
    quaternion_lerp : proc "c" (
        q1 : Quaternion,
        q2 : Quaternion,
        amount : _c.float
    ) -> Quaternion,
    quaternion_nlerp : proc "c" (
        q1 : Quaternion,
        q2 : Quaternion,
        amount : _c.float
    ) -> Quaternion,
    quaternion_slerp : proc "c" (
        q1 : Quaternion,
        q2 : Quaternion,
        amount : _c.float
    ) -> Quaternion,
    quaternion_from_vector3_to_vector3 : proc "c" (
        from : Vector3,
        to : Vector3
    ) -> Quaternion,
    quaternion_from_matrix : proc "c" (mat : Matrix) -> Quaternion,
    quaternion_to_matrix : proc "c" (q : Quaternion) -> Matrix,
    quaternion_from_axis_angle : proc "c" (
        axis : Vector3,
        angle : _c.float
    ) -> Quaternion,
    quaternion_to_axis_angle : proc "c" (
        q : Quaternion,
        out_axis : ^Vector3,
        out_angle : ^_c.float
    ),
    quaternion_from_euler : proc "c" (
        roll : _c.float,
        pitch : _c.float,
        yaw : _c.float
    ) -> Quaternion,
    quaternion_to_euler : proc "c" (q : Quaternion) -> Vector3,
    quaternion_transform : proc "c" (
        q : Quaternion,
        mat : Matrix
    ) -> Quaternion,
}

