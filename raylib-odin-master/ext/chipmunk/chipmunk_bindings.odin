
//
// THIS FILE WAS AUTOGENERATED
//

package chipmunk_bindings

foreign import "../lib/chipmunk.lib"

import _c "core:c"


import chipmunk_types "./types"

chipmunk_Funcs :: chipmunk_types.chipmunk_Funcs;

// re-export everything from ./types for convienience

Float :: chipmunk_types.Float;
HashValue :: chipmunk_types.HashValue;
CollisionId :: chipmunk_types.CollisionId;
Bool :: chipmunk_types.Bool;
DataPointer :: chipmunk_types.DataPointer;
CollisionType :: chipmunk_types.CollisionType;
Group :: chipmunk_types.Group;
Bitmask :: chipmunk_types.Bitmask;
Timestamp :: chipmunk_types.Timestamp;
SpatialIndexBbFunc :: chipmunk_types.SpatialIndexBbFunc;
SpatialIndexIteratorFunc :: chipmunk_types.SpatialIndexIteratorFunc;
SpatialIndexQueryFunc :: chipmunk_types.SpatialIndexQueryFunc;
SpatialIndexSegmentQueryFunc :: chipmunk_types.SpatialIndexSegmentQueryFunc;
BbTreeVelocityFunc :: chipmunk_types.BbTreeVelocityFunc;
SpatialIndexDestroyImpl :: chipmunk_types.SpatialIndexDestroyImpl;
SpatialIndexCountImpl :: chipmunk_types.SpatialIndexCountImpl;
SpatialIndexEachImpl :: chipmunk_types.SpatialIndexEachImpl;
SpatialIndexContainsImpl :: chipmunk_types.SpatialIndexContainsImpl;
SpatialIndexInsertImpl :: chipmunk_types.SpatialIndexInsertImpl;
SpatialIndexRemoveImpl :: chipmunk_types.SpatialIndexRemoveImpl;
SpatialIndexReindexImpl :: chipmunk_types.SpatialIndexReindexImpl;
SpatialIndexReindexObjectImpl :: chipmunk_types.SpatialIndexReindexObjectImpl;
SpatialIndexReindexQueryImpl :: chipmunk_types.SpatialIndexReindexQueryImpl;
SpatialIndexQueryImpl :: chipmunk_types.SpatialIndexQueryImpl;
SpatialIndexSegmentQueryImpl :: chipmunk_types.SpatialIndexSegmentQueryImpl;
BodyVelocityFunc :: chipmunk_types.BodyVelocityFunc;
BodyPositionFunc :: chipmunk_types.BodyPositionFunc;
BodyShapeIteratorFunc :: chipmunk_types.BodyShapeIteratorFunc;
BodyConstraintIteratorFunc :: chipmunk_types.BodyConstraintIteratorFunc;
BodyArbiterIteratorFunc :: chipmunk_types.BodyArbiterIteratorFunc;
ConstraintPreSolveFunc :: chipmunk_types.ConstraintPreSolveFunc;
ConstraintPostSolveFunc :: chipmunk_types.ConstraintPostSolveFunc;
DampedSpringForceFunc :: chipmunk_types.DampedSpringForceFunc;
DampedRotarySpringTorqueFunc :: chipmunk_types.DampedRotarySpringTorqueFunc;
CollisionBeginFunc :: chipmunk_types.CollisionBeginFunc;
CollisionPreSolveFunc :: chipmunk_types.CollisionPreSolveFunc;
CollisionPostSolveFunc :: chipmunk_types.CollisionPostSolveFunc;
CollisionSeparateFunc :: chipmunk_types.CollisionSeparateFunc;
PostStepFunc :: chipmunk_types.PostStepFunc;
SpacePointQueryFunc :: chipmunk_types.SpacePointQueryFunc;
SpaceSegmentQueryFunc :: chipmunk_types.SpaceSegmentQueryFunc;
SpaceBbQueryFunc :: chipmunk_types.SpaceBbQueryFunc;
SpaceShapeQueryFunc :: chipmunk_types.SpaceShapeQueryFunc;
SpaceBodyIteratorFunc :: chipmunk_types.SpaceBodyIteratorFunc;
SpaceShapeIteratorFunc :: chipmunk_types.SpaceShapeIteratorFunc;
SpaceConstraintIteratorFunc :: chipmunk_types.SpaceConstraintIteratorFunc;
SpaceDebugDrawCircleImpl :: chipmunk_types.SpaceDebugDrawCircleImpl;
SpaceDebugDrawSegmentImpl :: chipmunk_types.SpaceDebugDrawSegmentImpl;
SpaceDebugDrawFatSegmentImpl :: chipmunk_types.SpaceDebugDrawFatSegmentImpl;
SpaceDebugDrawPolygonImpl :: chipmunk_types.SpaceDebugDrawPolygonImpl;
SpaceDebugDrawDotImpl :: chipmunk_types.SpaceDebugDrawDotImpl;
SpaceDebugDrawColorForShapeImpl :: chipmunk_types.SpaceDebugDrawColorForShapeImpl;
ShapeCacheDataImpl :: chipmunk_types.ShapeCacheDataImpl;
ShapeDestroyImpl :: chipmunk_types.ShapeDestroyImpl;
ShapePointQueryImpl :: chipmunk_types.ShapePointQueryImpl;
ShapeSegmentQueryImpl :: chipmunk_types.ShapeSegmentQueryImpl;
ConstraintPreStepImpl :: chipmunk_types.ConstraintPreStepImpl;
ConstraintApplyCachedImpulseImpl :: chipmunk_types.ConstraintApplyCachedImpulseImpl;
ConstraintApplyImpulseImpl :: chipmunk_types.ConstraintApplyImpulseImpl;
ConstraintGetImpulseImpl :: chipmunk_types.ConstraintGetImpulseImpl;
SpaceArbiterApplyImpulseFunc :: chipmunk_types.SpaceArbiterApplyImpulseFunc;

Vect :: chipmunk_types.Vect;
Transform :: chipmunk_types.Transform;
Mat2X2 :: chipmunk_types.Mat2X2;
Array :: chipmunk_types.Array;
HashSet :: chipmunk_types.HashSet;
Body :: chipmunk_types.Body;
Shape :: chipmunk_types.Shape;
CircleShape :: chipmunk_types.CircleShape;
SegmentShape :: chipmunk_types.SegmentShape;
PolyShape :: chipmunk_types.PolyShape;
Constraint :: chipmunk_types.Constraint;
PinJoint :: chipmunk_types.PinJoint;
SlideJoint :: chipmunk_types.SlideJoint;
PivotJoint :: chipmunk_types.PivotJoint;
GrooveJoint :: chipmunk_types.GrooveJoint;
DampedSpring :: chipmunk_types.DampedSpring;
DampedRotarySpring :: chipmunk_types.DampedRotarySpring;
RotaryLimitJoint :: chipmunk_types.RotaryLimitJoint;
RatchetJoint :: chipmunk_types.RatchetJoint;
GearJoint :: chipmunk_types.GearJoint;
SimpleMotorJoint :: chipmunk_types.SimpleMotorJoint;
CollisionHandler :: chipmunk_types.CollisionHandler;
ContactPointSet :: chipmunk_types.ContactPointSet;
Arbiter :: chipmunk_types.Arbiter;
Space :: chipmunk_types.Space;
Bb :: chipmunk_types.Bb;
SpatialIndexClass :: chipmunk_types.SpatialIndexClass;
SpatialIndex :: chipmunk_types.SpatialIndex;
SpaceHash :: chipmunk_types.SpaceHash;
BbTree :: chipmunk_types.BbTree;
Sweep1D :: chipmunk_types.Sweep1D;
AnonymousStruct0 :: chipmunk_types.AnonymousStruct0;
PointQueryInfo :: chipmunk_types.PointQueryInfo;
SegmentQueryInfo :: chipmunk_types.SegmentQueryInfo;
ShapeFilter :: chipmunk_types.ShapeFilter;
SimpleMotor :: chipmunk_types.SimpleMotor;
SpaceDebugColor :: chipmunk_types.SpaceDebugColor;
SpaceDebugDrawOptions :: chipmunk_types.SpaceDebugDrawOptions;
AnonymousStruct1 :: chipmunk_types.AnonymousStruct1;
ArbiterThread :: chipmunk_types.ArbiterThread;
Contact :: chipmunk_types.Contact;
CollisionInfo :: chipmunk_types.CollisionInfo;
ShapeMassInfo :: chipmunk_types.ShapeMassInfo;
ShapeClass :: chipmunk_types.ShapeClass;
SplittingPlane :: chipmunk_types.SplittingPlane;
ConstraintClass :: chipmunk_types.ConstraintClass;
ContactBufferHeader :: chipmunk_types.ContactBufferHeader;
PostStepCallback :: chipmunk_types.PostStepCallback;
BodyType :: chipmunk_types.BodyType;
SpaceDebugDrawFlags :: chipmunk_types.SpaceDebugDrawFlags;
ArbiterState :: chipmunk_types.ArbiterState;
ShapeType :: chipmunk_types.ShapeType;

get_function_pointers :: proc(funcs: ^chipmunk_types.chipmunk_Funcs) {
    funcs.message = message;
    funcs.fmax = fmax;
    funcs.fmin = fmin;
    funcs.fabs = fabs;
    funcs.fclamp = fclamp;
    funcs.fclamp01 = fclamp01;
    funcs.flerp = flerp;
    funcs.flerpconst = flerpconst;
    funcs.v = v;
    funcs.veql = veql;
    funcs.vadd = vadd;
    funcs.vsub = vsub;
    funcs.vneg = vneg;
    funcs.vmult = vmult;
    funcs.vdot = vdot;
    funcs.vcross = vcross;
    funcs.vperp = vperp;
    funcs.vrperp = vrperp;
    funcs.vproject = vproject;
    funcs.vforangle = vforangle;
    funcs.vtoangle = vtoangle;
    funcs.vrotate = vrotate;
    funcs.vunrotate = vunrotate;
    funcs.vlengthsq = vlengthsq;
    funcs.vlength = vlength;
    funcs.vlerp = vlerp;
    funcs.vnormalize = vnormalize;
    funcs.vslerp = vslerp;
    funcs.vslerpconst = vslerpconst;
    funcs.vclamp = vclamp;
    funcs.vlerpconst = vlerpconst;
    funcs.vdist = vdist;
    funcs.vdistsq = vdistsq;
    funcs.vnear = vnear;
    funcs.mat_2x_2_new = mat_2x_2_new;
    funcs.mat_2x_2_transform = mat_2x_2_transform;
    funcs.bb_new = bb_new;
    funcs.bb_new_for_extents = bb_new_for_extents;
    funcs.bb_new_for_circle = bb_new_for_circle;
    funcs.bb_intersects = bb_intersects;
    funcs.bb_contains_bb = bb_contains_bb;
    funcs.bb_contains_vect = bb_contains_vect;
    funcs.bb_merge = bb_merge;
    funcs.bb_expand = bb_expand;
    funcs.bb_center = bb_center;
    funcs.bb_area = bb_area;
    funcs.bb_merged_area = bb_merged_area;
    funcs.bb_segment_query = bb_segment_query;
    funcs.bb_intersects_segment = bb_intersects_segment;
    funcs.bb_clamp_vect = bb_clamp_vect;
    funcs.bb_wrap_vect = bb_wrap_vect;
    funcs.bb_offset = bb_offset;
    funcs.transform_new = transform_new;
    funcs.transform_new_transpose = transform_new_transpose;
    funcs.transform_inverse = transform_inverse;
    funcs.transform_mult = transform_mult;
    funcs.transform_point = transform_point;
    funcs.transform_vect = transform_vect;
    funcs.transformb_bb = transformb_bb;
    funcs.transform_translate = transform_translate;
    funcs.transform_scale = transform_scale;
    funcs.transform_rotate = transform_rotate;
    funcs.transform_rigid = transform_rigid;
    funcs.transform_rigid_inverse = transform_rigid_inverse;
    funcs.transform_wrap = transform_wrap;
    funcs.transform_wrap_inverse = transform_wrap_inverse;
    funcs.transform_ortho = transform_ortho;
    funcs.transform_bone_scale = transform_bone_scale;
    funcs.transform_axial_scale = transform_axial_scale;
    funcs.space_hash_alloc = space_hash_alloc;
    funcs.space_hash_init = space_hash_init;
    funcs.space_hash_new = space_hash_new;
    funcs.space_hash_resize = space_hash_resize;
    funcs.bb_tree_alloc = bb_tree_alloc;
    funcs.bb_tree_init = bb_tree_init;
    funcs.bb_tree_new = bb_tree_new;
    funcs.bb_tree_optimize = bb_tree_optimize;
    funcs.bb_tree_set_velocity_func = bb_tree_set_velocity_func;
    funcs.sweep_1d_alloc = sweep_1d_alloc;
    funcs.sweep_1d_init = sweep_1d_init;
    funcs.sweep_1d_new = sweep_1d_new;
    funcs.spatial_index_free = spatial_index_free;
    funcs.spatial_index_collide_static = spatial_index_collide_static;
    funcs.spatial_index_destroy = spatial_index_destroy;
    funcs.spatial_index_count = spatial_index_count;
    funcs.spatial_index_each = spatial_index_each;
    funcs.spatial_index_contains = spatial_index_contains;
    funcs.spatial_index_insert = spatial_index_insert;
    funcs.spatial_index_remove = spatial_index_remove;
    funcs.spatial_index_reindex = spatial_index_reindex;
    funcs.spatial_index_reindex_object = spatial_index_reindex_object;
    funcs.spatial_index_query = spatial_index_query;
    funcs.spatial_index_segment_query = spatial_index_segment_query;
    funcs.spatial_index_reindex_query = spatial_index_reindex_query;
    funcs.arbiter_get_restitution = arbiter_get_restitution;
    funcs.arbiter_set_restitution = arbiter_set_restitution;
    funcs.arbiter_get_friction = arbiter_get_friction;
    funcs.arbiter_set_friction = arbiter_set_friction;
    funcs.arbiter_get_surface_velocity = arbiter_get_surface_velocity;
    funcs.arbiter_set_surface_velocity = arbiter_set_surface_velocity;
    funcs.arbiter_get_user_data = arbiter_get_user_data;
    funcs.arbiter_set_user_data = arbiter_set_user_data;
    funcs.arbiter_total_impulse = arbiter_total_impulse;
    funcs.arbiter_total_ke = arbiter_total_ke;
    funcs.arbiter_ignore = arbiter_ignore;
    funcs.arbiter_get_shapes = arbiter_get_shapes;
    funcs.arbiter_get_bodies = arbiter_get_bodies;
    funcs.arbiter_get_contact_point_set = arbiter_get_contact_point_set;
    funcs.arbiter_set_contact_point_set = arbiter_set_contact_point_set;
    funcs.arbiter_is_first_contact = arbiter_is_first_contact;
    funcs.arbiter_is_removal = arbiter_is_removal;
    funcs.arbiter_get_count = arbiter_get_count;
    funcs.arbiter_get_normal = arbiter_get_normal;
    funcs.arbiter_get_point_a = arbiter_get_point_a;
    funcs.arbiter_get_point_b = arbiter_get_point_b;
    funcs.arbiter_get_depth = arbiter_get_depth;
    funcs.arbiter_call_wildcard_begin_a = arbiter_call_wildcard_begin_a;
    funcs.arbiter_call_wildcard_begin_b = arbiter_call_wildcard_begin_b;
    funcs.arbiter_call_wildcard_pre_solve_a = arbiter_call_wildcard_pre_solve_a;
    funcs.arbiter_call_wildcard_pre_solve_b = arbiter_call_wildcard_pre_solve_b;
    funcs.arbiter_call_wildcard_post_solve_a = arbiter_call_wildcard_post_solve_a;
    funcs.arbiter_call_wildcard_post_solve_b = arbiter_call_wildcard_post_solve_b;
    funcs.arbiter_call_wildcard_separate_a = arbiter_call_wildcard_separate_a;
    funcs.arbiter_call_wildcard_separate_b = arbiter_call_wildcard_separate_b;
    funcs.body_alloc = body_alloc;
    funcs.body_init = body_init;
    funcs.body_new = body_new;
    funcs.body_new_kinematic = body_new_kinematic;
    funcs.body_new_static = body_new_static;
    funcs.body_destroy = body_destroy;
    funcs.body_free = body_free;
    funcs.body_activate = body_activate;
    funcs.body_activate_static = body_activate_static;
    funcs.body_sleep = body_sleep;
    funcs.body_sleep_with_group = body_sleep_with_group;
    funcs.body_is_sleeping = body_is_sleeping;
    funcs.body_get_type = body_get_type;
    funcs.body_set_type = body_set_type;
    funcs.body_get_space = body_get_space;
    funcs.body_get_mass = body_get_mass;
    funcs.body_set_mass = body_set_mass;
    funcs.body_get_moment = body_get_moment;
    funcs.body_set_moment = body_set_moment;
    funcs.body_get_position = body_get_position;
    funcs.body_set_position = body_set_position;
    funcs.body_get_center_of_gravity = body_get_center_of_gravity;
    funcs.body_set_center_of_gravity = body_set_center_of_gravity;
    funcs.body_get_velocity = body_get_velocity;
    funcs.body_set_velocity = body_set_velocity;
    funcs.body_get_force = body_get_force;
    funcs.body_set_force = body_set_force;
    funcs.body_get_angle = body_get_angle;
    funcs.body_set_angle = body_set_angle;
    funcs.body_get_angular_velocity = body_get_angular_velocity;
    funcs.body_set_angular_velocity = body_set_angular_velocity;
    funcs.body_get_torque = body_get_torque;
    funcs.body_set_torque = body_set_torque;
    funcs.body_get_rotation = body_get_rotation;
    funcs.body_get_user_data = body_get_user_data;
    funcs.body_set_user_data = body_set_user_data;
    funcs.body_set_velocity_update_func = body_set_velocity_update_func;
    funcs.body_set_position_update_func = body_set_position_update_func;
    funcs.body_update_velocity = body_update_velocity;
    funcs.body_update_position = body_update_position;
    funcs.body_local_to_world = body_local_to_world;
    funcs.body_world_to_local = body_world_to_local;
    funcs.body_apply_force_at_world_point = body_apply_force_at_world_point;
    funcs.body_apply_force_at_local_point = body_apply_force_at_local_point;
    funcs.body_apply_impulse_at_world_point = body_apply_impulse_at_world_point;
    funcs.body_apply_impulse_at_local_point = body_apply_impulse_at_local_point;
    funcs.body_get_velocity_at_world_point = body_get_velocity_at_world_point;
    funcs.body_get_velocity_at_local_point = body_get_velocity_at_local_point;
    funcs.body_kinetic_energy = body_kinetic_energy;
    funcs.body_each_shape = body_each_shape;
    funcs.body_each_constraint = body_each_constraint;
    funcs.body_each_arbiter = body_each_arbiter;
    funcs.shape_filter_new = shape_filter_new;
    funcs.shape_destroy = shape_destroy;
    funcs.shape_free = shape_free;
    funcs.shape_cache_bb = shape_cache_bb;
    funcs.shape_update = shape_update;
    funcs.shape_point_query = shape_point_query;
    funcs.shape_segment_query = shape_segment_query;
    funcs.shapes_collide = shapes_collide;
    funcs.shape_get_space = shape_get_space;
    funcs.shape_get_body = shape_get_body;
    funcs.shape_set_body = shape_set_body;
    funcs.shape_get_mass = shape_get_mass;
    funcs.shape_set_mass = shape_set_mass;
    funcs.shape_get_density = shape_get_density;
    funcs.shape_set_density = shape_set_density;
    funcs.shape_get_moment = shape_get_moment;
    funcs.shape_get_area = shape_get_area;
    funcs.shape_get_center_of_gravity = shape_get_center_of_gravity;
    funcs.shape_get_bb = shape_get_bb;
    funcs.shape_get_sensor = shape_get_sensor;
    funcs.shape_set_sensor = shape_set_sensor;
    funcs.shape_get_elasticity = shape_get_elasticity;
    funcs.shape_set_elasticity = shape_set_elasticity;
    funcs.shape_get_friction = shape_get_friction;
    funcs.shape_set_friction = shape_set_friction;
    funcs.shape_get_surface_velocity = shape_get_surface_velocity;
    funcs.shape_set_surface_velocity = shape_set_surface_velocity;
    funcs.shape_get_user_data = shape_get_user_data;
    funcs.shape_set_user_data = shape_set_user_data;
    funcs.shape_get_collision_type = shape_get_collision_type;
    funcs.shape_set_collision_type = shape_set_collision_type;
    funcs.shape_get_filter = shape_get_filter;
    funcs.shape_set_filter = shape_set_filter;
    funcs.circle_shape_alloc = circle_shape_alloc;
    funcs.circle_shape_init = circle_shape_init;
    funcs.circle_shape_new = circle_shape_new;
    funcs.circle_shape_get_offset = circle_shape_get_offset;
    funcs.circle_shape_get_radius = circle_shape_get_radius;
    funcs.segment_shape_alloc = segment_shape_alloc;
    funcs.segment_shape_init = segment_shape_init;
    funcs.segment_shape_new = segment_shape_new;
    funcs.segment_shape_set_neighbors = segment_shape_set_neighbors;
    funcs.segment_shape_get_a = segment_shape_get_a;
    funcs.segment_shape_get_b = segment_shape_get_b;
    funcs.segment_shape_get_normal = segment_shape_get_normal;
    funcs.segment_shape_get_radius = segment_shape_get_radius;
    funcs.poly_shape_alloc = poly_shape_alloc;
    funcs.poly_shape_init = poly_shape_init;
    funcs.poly_shape_init_raw = poly_shape_init_raw;
    funcs.poly_shape_new = poly_shape_new;
    funcs.poly_shape_new_raw = poly_shape_new_raw;
    funcs.box_shape_init = box_shape_init;
    funcs.box_shape_init_2 = box_shape_init_2;
    funcs.box_shape_new = box_shape_new;
    funcs.box_shape_new_2 = box_shape_new_2;
    funcs.poly_shape_get_count = poly_shape_get_count;
    funcs.poly_shape_get_vert = poly_shape_get_vert;
    funcs.poly_shape_get_radius = poly_shape_get_radius;
    funcs.constraint_destroy = constraint_destroy;
    funcs.constraint_free = constraint_free;
    funcs.constraint_get_space = constraint_get_space;
    funcs.constraint_get_body_a = constraint_get_body_a;
    funcs.constraint_get_body_b = constraint_get_body_b;
    funcs.constraint_get_max_force = constraint_get_max_force;
    funcs.constraint_set_max_force = constraint_set_max_force;
    funcs.constraint_get_error_bias = constraint_get_error_bias;
    funcs.constraint_set_error_bias = constraint_set_error_bias;
    funcs.constraint_get_max_bias = constraint_get_max_bias;
    funcs.constraint_set_max_bias = constraint_set_max_bias;
    funcs.constraint_get_collide_bodies = constraint_get_collide_bodies;
    funcs.constraint_set_collide_bodies = constraint_set_collide_bodies;
    funcs.constraint_get_pre_solve_func = constraint_get_pre_solve_func;
    funcs.constraint_set_pre_solve_func = constraint_set_pre_solve_func;
    funcs.constraint_get_post_solve_func = constraint_get_post_solve_func;
    funcs.constraint_set_post_solve_func = constraint_set_post_solve_func;
    funcs.constraint_get_user_data = constraint_get_user_data;
    funcs.constraint_set_user_data = constraint_set_user_data;
    funcs.constraint_get_impulse = constraint_get_impulse;
    funcs.constraint_is_pin_joint = constraint_is_pin_joint;
    funcs.pin_joint_alloc = pin_joint_alloc;
    funcs.pin_joint_init = pin_joint_init;
    funcs.pin_joint_new = pin_joint_new;
    funcs.pin_joint_get_anchor_a = pin_joint_get_anchor_a;
    funcs.pin_joint_set_anchor_a = pin_joint_set_anchor_a;
    funcs.pin_joint_get_anchor_b = pin_joint_get_anchor_b;
    funcs.pin_joint_set_anchor_b = pin_joint_set_anchor_b;
    funcs.pin_joint_get_dist = pin_joint_get_dist;
    funcs.pin_joint_set_dist = pin_joint_set_dist;
    funcs.constraint_is_slide_joint = constraint_is_slide_joint;
    funcs.slide_joint_alloc = slide_joint_alloc;
    funcs.slide_joint_init = slide_joint_init;
    funcs.slide_joint_new = slide_joint_new;
    funcs.slide_joint_get_anchor_a = slide_joint_get_anchor_a;
    funcs.slide_joint_set_anchor_a = slide_joint_set_anchor_a;
    funcs.slide_joint_get_anchor_b = slide_joint_get_anchor_b;
    funcs.slide_joint_set_anchor_b = slide_joint_set_anchor_b;
    funcs.slide_joint_get_min = slide_joint_get_min;
    funcs.slide_joint_set_min = slide_joint_set_min;
    funcs.slide_joint_get_max = slide_joint_get_max;
    funcs.slide_joint_set_max = slide_joint_set_max;
    funcs.constraint_is_pivot_joint = constraint_is_pivot_joint;
    funcs.pivot_joint_alloc = pivot_joint_alloc;
    funcs.pivot_joint_init = pivot_joint_init;
    funcs.pivot_joint_new = pivot_joint_new;
    funcs.pivot_joint_new_2 = pivot_joint_new_2;
    funcs.pivot_joint_get_anchor_a = pivot_joint_get_anchor_a;
    funcs.pivot_joint_set_anchor_a = pivot_joint_set_anchor_a;
    funcs.pivot_joint_get_anchor_b = pivot_joint_get_anchor_b;
    funcs.pivot_joint_set_anchor_b = pivot_joint_set_anchor_b;
    funcs.constraint_is_groove_joint = constraint_is_groove_joint;
    funcs.groove_joint_alloc = groove_joint_alloc;
    funcs.groove_joint_init = groove_joint_init;
    funcs.groove_joint_new = groove_joint_new;
    funcs.groove_joint_get_groove_a = groove_joint_get_groove_a;
    funcs.groove_joint_set_groove_a = groove_joint_set_groove_a;
    funcs.groove_joint_get_groove_b = groove_joint_get_groove_b;
    funcs.groove_joint_set_groove_b = groove_joint_set_groove_b;
    funcs.groove_joint_get_anchor_b = groove_joint_get_anchor_b;
    funcs.groove_joint_set_anchor_b = groove_joint_set_anchor_b;
    funcs.constraint_is_damped_spring = constraint_is_damped_spring;
    funcs.damped_spring_alloc = damped_spring_alloc;
    funcs.damped_spring_init = damped_spring_init;
    funcs.damped_spring_new = damped_spring_new;
    funcs.damped_spring_get_anchor_a = damped_spring_get_anchor_a;
    funcs.damped_spring_set_anchor_a = damped_spring_set_anchor_a;
    funcs.damped_spring_get_anchor_b = damped_spring_get_anchor_b;
    funcs.damped_spring_set_anchor_b = damped_spring_set_anchor_b;
    funcs.damped_spring_get_rest_length = damped_spring_get_rest_length;
    funcs.damped_spring_set_rest_length = damped_spring_set_rest_length;
    funcs.damped_spring_get_stiffness = damped_spring_get_stiffness;
    funcs.damped_spring_set_stiffness = damped_spring_set_stiffness;
    funcs.damped_spring_get_damping = damped_spring_get_damping;
    funcs.damped_spring_set_damping = damped_spring_set_damping;
    funcs.damped_spring_get_spring_force_func = damped_spring_get_spring_force_func;
    funcs.damped_spring_set_spring_force_func = damped_spring_set_spring_force_func;
    funcs.constraint_is_damped_rotary_spring = constraint_is_damped_rotary_spring;
    funcs.damped_rotary_spring_alloc = damped_rotary_spring_alloc;
    funcs.damped_rotary_spring_init = damped_rotary_spring_init;
    funcs.damped_rotary_spring_new = damped_rotary_spring_new;
    funcs.damped_rotary_spring_get_rest_angle = damped_rotary_spring_get_rest_angle;
    funcs.damped_rotary_spring_set_rest_angle = damped_rotary_spring_set_rest_angle;
    funcs.damped_rotary_spring_get_stiffness = damped_rotary_spring_get_stiffness;
    funcs.damped_rotary_spring_set_stiffness = damped_rotary_spring_set_stiffness;
    funcs.damped_rotary_spring_get_damping = damped_rotary_spring_get_damping;
    funcs.damped_rotary_spring_set_damping = damped_rotary_spring_set_damping;
    funcs.damped_rotary_spring_get_spring_torque_func = damped_rotary_spring_get_spring_torque_func;
    funcs.damped_rotary_spring_set_spring_torque_func = damped_rotary_spring_set_spring_torque_func;
    funcs.constraint_is_rotary_limit_joint = constraint_is_rotary_limit_joint;
    funcs.rotary_limit_joint_alloc = rotary_limit_joint_alloc;
    funcs.rotary_limit_joint_init = rotary_limit_joint_init;
    funcs.rotary_limit_joint_new = rotary_limit_joint_new;
    funcs.rotary_limit_joint_get_min = rotary_limit_joint_get_min;
    funcs.rotary_limit_joint_set_min = rotary_limit_joint_set_min;
    funcs.rotary_limit_joint_get_max = rotary_limit_joint_get_max;
    funcs.rotary_limit_joint_set_max = rotary_limit_joint_set_max;
    funcs.constraint_is_ratchet_joint = constraint_is_ratchet_joint;
    funcs.ratchet_joint_alloc = ratchet_joint_alloc;
    funcs.ratchet_joint_init = ratchet_joint_init;
    funcs.ratchet_joint_new = ratchet_joint_new;
    funcs.ratchet_joint_get_angle = ratchet_joint_get_angle;
    funcs.ratchet_joint_set_angle = ratchet_joint_set_angle;
    funcs.ratchet_joint_get_phase = ratchet_joint_get_phase;
    funcs.ratchet_joint_set_phase = ratchet_joint_set_phase;
    funcs.ratchet_joint_get_ratchet = ratchet_joint_get_ratchet;
    funcs.ratchet_joint_set_ratchet = ratchet_joint_set_ratchet;
    funcs.constraint_is_gear_joint = constraint_is_gear_joint;
    funcs.gear_joint_alloc = gear_joint_alloc;
    funcs.gear_joint_init = gear_joint_init;
    funcs.gear_joint_new = gear_joint_new;
    funcs.gear_joint_get_phase = gear_joint_get_phase;
    funcs.gear_joint_set_phase = gear_joint_set_phase;
    funcs.gear_joint_get_ratio = gear_joint_get_ratio;
    funcs.gear_joint_set_ratio = gear_joint_set_ratio;
    funcs.constraint_is_simple_motor = constraint_is_simple_motor;
    funcs.simple_motor_alloc = simple_motor_alloc;
    funcs.simple_motor_init = simple_motor_init;
    funcs.simple_motor_new = simple_motor_new;
    funcs.simple_motor_get_rate = simple_motor_get_rate;
    funcs.simple_motor_set_rate = simple_motor_set_rate;
    funcs.space_alloc = space_alloc;
    funcs.space_init = space_init;
    funcs.space_new = space_new;
    funcs.space_destroy = space_destroy;
    funcs.space_free = space_free;
    funcs.space_get_iterations = space_get_iterations;
    funcs.space_set_iterations = space_set_iterations;
    funcs.space_get_gravity = space_get_gravity;
    funcs.space_set_gravity = space_set_gravity;
    funcs.space_get_damping = space_get_damping;
    funcs.space_set_damping = space_set_damping;
    funcs.space_get_idle_speed_threshold = space_get_idle_speed_threshold;
    funcs.space_set_idle_speed_threshold = space_set_idle_speed_threshold;
    funcs.space_get_sleep_time_threshold = space_get_sleep_time_threshold;
    funcs.space_set_sleep_time_threshold = space_set_sleep_time_threshold;
    funcs.space_get_collision_slop = space_get_collision_slop;
    funcs.space_set_collision_slop = space_set_collision_slop;
    funcs.space_get_collision_bias = space_get_collision_bias;
    funcs.space_set_collision_bias = space_set_collision_bias;
    funcs.space_get_collision_persistence = space_get_collision_persistence;
    funcs.space_set_collision_persistence = space_set_collision_persistence;
    funcs.space_get_user_data = space_get_user_data;
    funcs.space_set_user_data = space_set_user_data;
    funcs.space_get_static_body = space_get_static_body;
    funcs.space_get_current_time_step = space_get_current_time_step;
    funcs.space_is_locked = space_is_locked;
    funcs.space_add_default_collision_handler = space_add_default_collision_handler;
    funcs.space_add_collision_handler = space_add_collision_handler;
    funcs.space_add_wildcard_handler = space_add_wildcard_handler;
    funcs.space_add_shape = space_add_shape;
    funcs.space_add_body = space_add_body;
    funcs.space_add_constraint = space_add_constraint;
    funcs.space_remove_shape = space_remove_shape;
    funcs.space_remove_body = space_remove_body;
    funcs.space_remove_constraint = space_remove_constraint;
    funcs.space_contains_shape = space_contains_shape;
    funcs.space_contains_body = space_contains_body;
    funcs.space_contains_constraint = space_contains_constraint;
    funcs.space_add_post_step_callback = space_add_post_step_callback;
    funcs.space_point_query = space_point_query;
    funcs.space_point_query_nearest = space_point_query_nearest;
    funcs.space_segment_query = space_segment_query;
    funcs.space_segment_query_first = space_segment_query_first;
    funcs.space_bb_query = space_bb_query;
    funcs.space_shape_query = space_shape_query;
    funcs.space_each_body = space_each_body;
    funcs.space_each_shape = space_each_shape;
    funcs.space_each_constraint = space_each_constraint;
    funcs.space_reindex_static = space_reindex_static;
    funcs.space_reindex_shape = space_reindex_shape;
    funcs.space_reindex_shapes_for_body = space_reindex_shapes_for_body;
    funcs.space_use_spatial_hash = space_use_spatial_hash;
    funcs.space_step = space_step;
    funcs.space_debug_draw = space_debug_draw;
    funcs.moment_for_circle = moment_for_circle;
    funcs.area_for_circle = area_for_circle;
    funcs.moment_for_segment = moment_for_segment;
    funcs.area_for_segment = area_for_segment;
    funcs.moment_for_poly = moment_for_poly;
    funcs.area_for_poly = area_for_poly;
    funcs.centroid_for_poly = centroid_for_poly;
    funcs.moment_for_box = moment_for_box;
    funcs.moment_for_box_2 = moment_for_box_2;
    funcs.convex_hull = convex_hull;
    funcs.closet_point_on_segment = closet_point_on_segment;
}

@(default_calling_convention="c")
foreign chipmunk {

    @(link_name="cpMessage")
    message :: proc(
        condition : cstring,
        file : cstring,
        line : _c.int,
        is_error : _c.int,
        is_hard_error : _c.int,
        message : cstring
    ) ---;

    @(link_name="cpfmax")
    fmax :: proc(
        a : Float,
        b : Float
    ) -> Float ---;

    @(link_name="cpfmin")
    fmin :: proc(
        a : Float,
        b : Float
    ) -> Float ---;

    @(link_name="cpfabs")
    fabs :: proc(f : Float) -> Float ---;

    @(link_name="cpfclamp")
    fclamp :: proc(
        f : Float,
        min : Float,
        max : Float
    ) -> Float ---;

    @(link_name="cpfclamp01")
    fclamp01 :: proc(f : Float) -> Float ---;

    @(link_name="cpflerp")
    flerp :: proc(
        f1 : Float,
        f2 : Float,
        t : Float
    ) -> Float ---;

    @(link_name="cpflerpconst")
    flerpconst :: proc(
        f1 : Float,
        f2 : Float,
        d : Float
    ) -> Float ---;

    @(link_name="cpv")
    v :: proc(
        x : Float,
        y : Float
    ) -> Vect ---;

    @(link_name="cpveql")
    veql :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Bool ---;

    @(link_name="cpvadd")
    vadd :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Vect ---;

    @(link_name="cpvsub")
    vsub :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Vect ---;

    @(link_name="cpvneg")
    vneg :: proc(v : Vect) -> Vect ---;

    @(link_name="cpvmult")
    vmult :: proc(
        v : Vect,
        s : Float
    ) -> Vect ---;

    @(link_name="cpvdot")
    vdot :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Float ---;

    @(link_name="cpvcross")
    vcross :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Float ---;

    @(link_name="cpvperp")
    vperp :: proc(v : Vect) -> Vect ---;

    @(link_name="cpvrperp")
    vrperp :: proc(v : Vect) -> Vect ---;

    @(link_name="cpvproject")
    vproject :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Vect ---;

    @(link_name="cpvforangle")
    vforangle :: proc(a : Float) -> Vect ---;

    @(link_name="cpvtoangle")
    vtoangle :: proc(v : Vect) -> Float ---;

    @(link_name="cpvrotate")
    vrotate :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Vect ---;

    @(link_name="cpvunrotate")
    vunrotate :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Vect ---;

    @(link_name="cpvlengthsq")
    vlengthsq :: proc(v : Vect) -> Float ---;

    @(link_name="cpvlength")
    vlength :: proc(v : Vect) -> Float ---;

    @(link_name="cpvlerp")
    vlerp :: proc(
        v1 : Vect,
        v2 : Vect,
        t : Float
    ) -> Vect ---;

    @(link_name="cpvnormalize")
    vnormalize :: proc(v : Vect) -> Vect ---;

    @(link_name="cpvslerp")
    vslerp :: proc(
        v1 : Vect,
        v2 : Vect,
        t : Float
    ) -> Vect ---;

    @(link_name="cpvslerpconst")
    vslerpconst :: proc(
        v1 : Vect,
        v2 : Vect,
        a : Float
    ) -> Vect ---;

    @(link_name="cpvclamp")
    vclamp :: proc(
        v : Vect,
        len : Float
    ) -> Vect ---;

    @(link_name="cpvlerpconst")
    vlerpconst :: proc(
        v1 : Vect,
        v2 : Vect,
        d : Float
    ) -> Vect ---;

    @(link_name="cpvdist")
    vdist :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Float ---;

    @(link_name="cpvdistsq")
    vdistsq :: proc(
        v1 : Vect,
        v2 : Vect
    ) -> Float ---;

    @(link_name="cpvnear")
    vnear :: proc(
        v1 : Vect,
        v2 : Vect,
        dist : Float
    ) -> Bool ---;

    @(link_name="cpMat2x2New")
    mat_2x_2_new :: proc(
        a : Float,
        b : Float,
        c : Float,
        d : Float
    ) -> Mat2X2 ---;

    @(link_name="cpMat2x2Transform")
    mat_2x_2_transform :: proc(
        m : Mat2X2,
        v : Vect
    ) -> Vect ---;

    @(link_name="cpBBNew")
    bb_new :: proc(
        l : Float,
        b : Float,
        r : Float,
        t : Float
    ) -> Bb ---;

    @(link_name="cpBBNewForExtents")
    bb_new_for_extents :: proc(
        c : Vect,
        hw : Float,
        hh : Float
    ) -> Bb ---;

    @(link_name="cpBBNewForCircle")
    bb_new_for_circle :: proc(
        p : Vect,
        r : Float
    ) -> Bb ---;

    @(link_name="cpBBIntersects")
    bb_intersects :: proc(
        a : Bb,
        b : Bb
    ) -> Bool ---;

    @(link_name="cpBBContainsBB")
    bb_contains_bb :: proc(
        bb : Bb,
        other : Bb
    ) -> Bool ---;

    @(link_name="cpBBContainsVect")
    bb_contains_vect :: proc(
        bb : Bb,
        v : Vect
    ) -> Bool ---;

    @(link_name="cpBBMerge")
    bb_merge :: proc(
        a : Bb,
        b : Bb
    ) -> Bb ---;

    @(link_name="cpBBExpand")
    bb_expand :: proc(
        bb : Bb,
        v : Vect
    ) -> Bb ---;

    @(link_name="cpBBCenter")
    bb_center :: proc(bb : Bb) -> Vect ---;

    @(link_name="cpBBArea")
    bb_area :: proc(bb : Bb) -> Float ---;

    @(link_name="cpBBMergedArea")
    bb_merged_area :: proc(
        a : Bb,
        b : Bb
    ) -> Float ---;

    @(link_name="cpBBSegmentQuery")
    bb_segment_query :: proc(
        bb : Bb,
        a : Vect,
        b : Vect
    ) -> Float ---;

    @(link_name="cpBBIntersectsSegment")
    bb_intersects_segment :: proc(
        bb : Bb,
        a : Vect,
        b : Vect
    ) -> Bool ---;

    @(link_name="cpBBClampVect")
    bb_clamp_vect :: proc(
        bb : Bb,
        v : Vect
    ) -> Vect ---;

    @(link_name="cpBBWrapVect")
    bb_wrap_vect :: proc(
        bb : Bb,
        v : Vect
    ) -> Vect ---;

    @(link_name="cpBBOffset")
    bb_offset :: proc(
        bb : Bb,
        v : Vect
    ) -> Bb ---;

    @(link_name="cpTransformNew")
    transform_new :: proc(
        a : Float,
        b : Float,
        c : Float,
        d : Float,
        tx : Float,
        ty : Float
    ) -> Transform ---;

    @(link_name="cpTransformNewTranspose")
    transform_new_transpose :: proc(
        a : Float,
        c : Float,
        tx : Float,
        b : Float,
        d : Float,
        ty : Float
    ) -> Transform ---;

    @(link_name="cpTransformInverse")
    transform_inverse :: proc(t : Transform) -> Transform ---;

    @(link_name="cpTransformMult")
    transform_mult :: proc(
        t1 : Transform,
        t2 : Transform
    ) -> Transform ---;

    @(link_name="cpTransformPoint")
    transform_point :: proc(
        t : Transform,
        p : Vect
    ) -> Vect ---;

    @(link_name="cpTransformVect")
    transform_vect :: proc(
        t : Transform,
        v : Vect
    ) -> Vect ---;

    @(link_name="cpTransformbBB")
    transformb_bb :: proc(
        t : Transform,
        bb : Bb
    ) -> Bb ---;

    @(link_name="cpTransformTranslate")
    transform_translate :: proc(translate : Vect) -> Transform ---;

    @(link_name="cpTransformScale")
    transform_scale :: proc(
        scale_x : Float,
        scale_y : Float
    ) -> Transform ---;

    @(link_name="cpTransformRotate")
    transform_rotate :: proc(radians : Float) -> Transform ---;

    @(link_name="cpTransformRigid")
    transform_rigid :: proc(
        translate : Vect,
        radians : Float
    ) -> Transform ---;

    @(link_name="cpTransformRigidInverse")
    transform_rigid_inverse :: proc(t : Transform) -> Transform ---;

    @(link_name="cpTransformWrap")
    transform_wrap :: proc(
        outer : Transform,
        inner : Transform
    ) -> Transform ---;

    @(link_name="cpTransformWrapInverse")
    transform_wrap_inverse :: proc(
        outer : Transform,
        inner : Transform
    ) -> Transform ---;

    @(link_name="cpTransformOrtho")
    transform_ortho :: proc(bb : Bb) -> Transform ---;

    @(link_name="cpTransformBoneScale")
    transform_bone_scale :: proc(
        v0 : Vect,
        v1 : Vect
    ) -> Transform ---;

    @(link_name="cpTransformAxialScale")
    transform_axial_scale :: proc(
        axis : Vect,
        pivot : Vect,
        scale : Float
    ) -> Transform ---;

    @(link_name="cpSpaceHashAlloc")
    space_hash_alloc :: proc() -> ^SpaceHash ---;

    @(link_name="cpSpaceHashInit")
    space_hash_init :: proc(
        hash : ^SpaceHash,
        celldim : Float,
        numcells : _c.int,
        bbfunc : SpatialIndexBbFunc,
        static_index : ^SpatialIndex
    ) -> ^SpatialIndex ---;

    @(link_name="cpSpaceHashNew")
    space_hash_new :: proc(
        celldim : Float,
        cells : _c.int,
        bbfunc : SpatialIndexBbFunc,
        static_index : ^SpatialIndex
    ) -> ^SpatialIndex ---;

    @(link_name="cpSpaceHashResize")
    space_hash_resize :: proc(
        hash : ^SpaceHash,
        celldim : Float,
        numcells : _c.int
    ) ---;

    @(link_name="cpBBTreeAlloc")
    bb_tree_alloc :: proc() -> ^BbTree ---;

    @(link_name="cpBBTreeInit")
    bb_tree_init :: proc(
        tree : ^BbTree,
        bbfunc : SpatialIndexBbFunc,
        static_index : ^SpatialIndex
    ) -> ^SpatialIndex ---;

    @(link_name="cpBBTreeNew")
    bb_tree_new :: proc(
        bbfunc : SpatialIndexBbFunc,
        static_index : ^SpatialIndex
    ) -> ^SpatialIndex ---;

    @(link_name="cpBBTreeOptimize")
    bb_tree_optimize :: proc(index : ^SpatialIndex) ---;

    @(link_name="cpBBTreeSetVelocityFunc")
    bb_tree_set_velocity_func :: proc(
        index : ^SpatialIndex,
        func : BbTreeVelocityFunc
    ) ---;

    @(link_name="cpSweep1DAlloc")
    sweep_1d_alloc :: proc() -> ^Sweep1D ---;

    @(link_name="cpSweep1DInit")
    sweep_1d_init :: proc(
        sweep : ^Sweep1D,
        bbfunc : SpatialIndexBbFunc,
        static_index : ^SpatialIndex
    ) -> ^SpatialIndex ---;

    @(link_name="cpSweep1DNew")
    sweep_1d_new :: proc(
        bbfunc : SpatialIndexBbFunc,
        static_index : ^SpatialIndex
    ) -> ^SpatialIndex ---;

    @(link_name="cpSpatialIndexFree")
    spatial_index_free :: proc(index : ^SpatialIndex) ---;

    @(link_name="cpSpatialIndexCollideStatic")
    spatial_index_collide_static :: proc(
        dynamic_index : ^SpatialIndex,
        static_index : ^SpatialIndex,
        func : SpatialIndexQueryFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpatialIndexDestroy")
    spatial_index_destroy :: proc(index : ^SpatialIndex) ---;

    @(link_name="cpSpatialIndexCount")
    spatial_index_count :: proc(index : ^SpatialIndex) -> _c.int ---;

    @(link_name="cpSpatialIndexEach")
    spatial_index_each :: proc(
        index : ^SpatialIndex,
        func : SpatialIndexIteratorFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpatialIndexContains")
    spatial_index_contains :: proc(
        index : ^SpatialIndex,
        obj : rawptr,
        hashid : HashValue
    ) -> Bool ---;

    @(link_name="cpSpatialIndexInsert")
    spatial_index_insert :: proc(
        index : ^SpatialIndex,
        obj : rawptr,
        hashid : HashValue
    ) ---;

    @(link_name="cpSpatialIndexRemove")
    spatial_index_remove :: proc(
        index : ^SpatialIndex,
        obj : rawptr,
        hashid : HashValue
    ) ---;

    @(link_name="cpSpatialIndexReindex")
    spatial_index_reindex :: proc(index : ^SpatialIndex) ---;

    @(link_name="cpSpatialIndexReindexObject")
    spatial_index_reindex_object :: proc(
        index : ^SpatialIndex,
        obj : rawptr,
        hashid : HashValue
    ) ---;

    @(link_name="cpSpatialIndexQuery")
    spatial_index_query :: proc(
        index : ^SpatialIndex,
        obj : rawptr,
        bb : Bb,
        func : SpatialIndexQueryFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpatialIndexSegmentQuery")
    spatial_index_segment_query :: proc(
        index : ^SpatialIndex,
        obj : rawptr,
        a : Vect,
        b : Vect,
        t_exit : Float,
        func : SpatialIndexSegmentQueryFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpatialIndexReindexQuery")
    spatial_index_reindex_query :: proc(
        index : ^SpatialIndex,
        func : SpatialIndexQueryFunc,
        data : rawptr
    ) ---;

    @(link_name="cpArbiterGetRestitution")
    arbiter_get_restitution :: proc(arb : ^Arbiter) -> Float ---;

    @(link_name="cpArbiterSetRestitution")
    arbiter_set_restitution :: proc(
        arb : ^Arbiter,
        restitution : Float
    ) ---;

    @(link_name="cpArbiterGetFriction")
    arbiter_get_friction :: proc(arb : ^Arbiter) -> Float ---;

    @(link_name="cpArbiterSetFriction")
    arbiter_set_friction :: proc(
        arb : ^Arbiter,
        friction : Float
    ) ---;

    @(link_name="cpArbiterGetSurfaceVelocity")
    arbiter_get_surface_velocity :: proc(arb : ^Arbiter) -> Vect ---;

    @(link_name="cpArbiterSetSurfaceVelocity")
    arbiter_set_surface_velocity :: proc(
        arb : ^Arbiter,
        vr : Vect
    ) ---;

    @(link_name="cpArbiterGetUserData")
    arbiter_get_user_data :: proc(arb : ^Arbiter) -> DataPointer ---;

    @(link_name="cpArbiterSetUserData")
    arbiter_set_user_data :: proc(
        arb : ^Arbiter,
        user_data : DataPointer
    ) ---;

    @(link_name="cpArbiterTotalImpulse")
    arbiter_total_impulse :: proc(arb : ^Arbiter) -> Vect ---;

    @(link_name="cpArbiterTotalKE")
    arbiter_total_ke :: proc(arb : ^Arbiter) -> Float ---;

    @(link_name="cpArbiterIgnore")
    arbiter_ignore :: proc(arb : ^Arbiter) -> Bool ---;

    @(link_name="cpArbiterGetShapes")
    arbiter_get_shapes :: proc(
        arb : ^Arbiter,
        a : ^^Shape,
        b : ^^Shape
    ) ---;

    @(link_name="cpArbiterGetBodies")
    arbiter_get_bodies :: proc(
        arb : ^Arbiter,
        a : ^^Body,
        b : ^^Body
    ) ---;

    @(link_name="cpArbiterGetContactPointSet")
    arbiter_get_contact_point_set :: proc(arb : ^Arbiter) -> ContactPointSet ---;

    @(link_name="cpArbiterSetContactPointSet")
    arbiter_set_contact_point_set :: proc(
        arb : ^Arbiter,
        set : ^ContactPointSet
    ) ---;

    @(link_name="cpArbiterIsFirstContact")
    arbiter_is_first_contact :: proc(arb : ^Arbiter) -> Bool ---;

    @(link_name="cpArbiterIsRemoval")
    arbiter_is_removal :: proc(arb : ^Arbiter) -> Bool ---;

    @(link_name="cpArbiterGetCount")
    arbiter_get_count :: proc(arb : ^Arbiter) -> _c.int ---;

    @(link_name="cpArbiterGetNormal")
    arbiter_get_normal :: proc(arb : ^Arbiter) -> Vect ---;

    @(link_name="cpArbiterGetPointA")
    arbiter_get_point_a :: proc(
        arb : ^Arbiter,
        i : _c.int
    ) -> Vect ---;

    @(link_name="cpArbiterGetPointB")
    arbiter_get_point_b :: proc(
        arb : ^Arbiter,
        i : _c.int
    ) -> Vect ---;

    @(link_name="cpArbiterGetDepth")
    arbiter_get_depth :: proc(
        arb : ^Arbiter,
        i : _c.int
    ) -> Float ---;

    @(link_name="cpArbiterCallWildcardBeginA")
    arbiter_call_wildcard_begin_a :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) -> Bool ---;

    @(link_name="cpArbiterCallWildcardBeginB")
    arbiter_call_wildcard_begin_b :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) -> Bool ---;

    @(link_name="cpArbiterCallWildcardPreSolveA")
    arbiter_call_wildcard_pre_solve_a :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) -> Bool ---;

    @(link_name="cpArbiterCallWildcardPreSolveB")
    arbiter_call_wildcard_pre_solve_b :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) -> Bool ---;

    @(link_name="cpArbiterCallWildcardPostSolveA")
    arbiter_call_wildcard_post_solve_a :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) ---;

    @(link_name="cpArbiterCallWildcardPostSolveB")
    arbiter_call_wildcard_post_solve_b :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) ---;

    @(link_name="cpArbiterCallWildcardSeparateA")
    arbiter_call_wildcard_separate_a :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) ---;

    @(link_name="cpArbiterCallWildcardSeparateB")
    arbiter_call_wildcard_separate_b :: proc(
        arb : ^Arbiter,
        space : ^Space
    ) ---;

    @(link_name="cpBodyAlloc")
    body_alloc :: proc() -> ^Body ---;

    @(link_name="cpBodyInit")
    body_init :: proc(
        body : ^Body,
        mass : Float,
        moment : Float
    ) -> ^Body ---;

    @(link_name="cpBodyNew")
    body_new :: proc(
        mass : Float,
        moment : Float
    ) -> ^Body ---;

    @(link_name="cpBodyNewKinematic")
    body_new_kinematic :: proc() -> ^Body ---;

    @(link_name="cpBodyNewStatic")
    body_new_static :: proc() -> ^Body ---;

    @(link_name="cpBodyDestroy")
    body_destroy :: proc(body : ^Body) ---;

    @(link_name="cpBodyFree")
    body_free :: proc(body : ^Body) ---;

    @(link_name="cpBodyActivate")
    body_activate :: proc(body : ^Body) ---;

    @(link_name="cpBodyActivateStatic")
    body_activate_static :: proc(
        body : ^Body,
        filter : ^Shape
    ) ---;

    @(link_name="cpBodySleep")
    body_sleep :: proc(body : ^Body) ---;

    @(link_name="cpBodySleepWithGroup")
    body_sleep_with_group :: proc(
        body : ^Body,
        group : ^Body
    ) ---;

    @(link_name="cpBodyIsSleeping")
    body_is_sleeping :: proc(body : ^Body) -> Bool ---;

    @(link_name="cpBodyGetType")
    body_get_type :: proc(body : ^Body) -> BodyType ---;

    @(link_name="cpBodySetType")
    body_set_type :: proc(
        body : ^Body,
        type : BodyType
    ) ---;

    @(link_name="cpBodyGetSpace")
    body_get_space :: proc(body : ^Body) -> ^Space ---;

    @(link_name="cpBodyGetMass")
    body_get_mass :: proc(body : ^Body) -> Float ---;

    @(link_name="cpBodySetMass")
    body_set_mass :: proc(
        body : ^Body,
        m : Float
    ) ---;

    @(link_name="cpBodyGetMoment")
    body_get_moment :: proc(body : ^Body) -> Float ---;

    @(link_name="cpBodySetMoment")
    body_set_moment :: proc(
        body : ^Body,
        i : Float
    ) ---;

    @(link_name="cpBodyGetPosition")
    body_get_position :: proc(body : ^Body) -> Vect ---;

    @(link_name="cpBodySetPosition")
    body_set_position :: proc(
        body : ^Body,
        pos : Vect
    ) ---;

    @(link_name="cpBodyGetCenterOfGravity")
    body_get_center_of_gravity :: proc(body : ^Body) -> Vect ---;

    @(link_name="cpBodySetCenterOfGravity")
    body_set_center_of_gravity :: proc(
        body : ^Body,
        cog : Vect
    ) ---;

    @(link_name="cpBodyGetVelocity")
    body_get_velocity :: proc(body : ^Body) -> Vect ---;

    @(link_name="cpBodySetVelocity")
    body_set_velocity :: proc(
        body : ^Body,
        velocity : Vect
    ) ---;

    @(link_name="cpBodyGetForce")
    body_get_force :: proc(body : ^Body) -> Vect ---;

    @(link_name="cpBodySetForce")
    body_set_force :: proc(
        body : ^Body,
        force : Vect
    ) ---;

    @(link_name="cpBodyGetAngle")
    body_get_angle :: proc(body : ^Body) -> Float ---;

    @(link_name="cpBodySetAngle")
    body_set_angle :: proc(
        body : ^Body,
        a : Float
    ) ---;

    @(link_name="cpBodyGetAngularVelocity")
    body_get_angular_velocity :: proc(body : ^Body) -> Float ---;

    @(link_name="cpBodySetAngularVelocity")
    body_set_angular_velocity :: proc(
        body : ^Body,
        angular_velocity : Float
    ) ---;

    @(link_name="cpBodyGetTorque")
    body_get_torque :: proc(body : ^Body) -> Float ---;

    @(link_name="cpBodySetTorque")
    body_set_torque :: proc(
        body : ^Body,
        torque : Float
    ) ---;

    @(link_name="cpBodyGetRotation")
    body_get_rotation :: proc(body : ^Body) -> Vect ---;

    @(link_name="cpBodyGetUserData")
    body_get_user_data :: proc(body : ^Body) -> DataPointer ---;

    @(link_name="cpBodySetUserData")
    body_set_user_data :: proc(
        body : ^Body,
        user_data : DataPointer
    ) ---;

    @(link_name="cpBodySetVelocityUpdateFunc")
    body_set_velocity_update_func :: proc(
        body : ^Body,
        velocity_func : BodyVelocityFunc
    ) ---;

    @(link_name="cpBodySetPositionUpdateFunc")
    body_set_position_update_func :: proc(
        body : ^Body,
        position_func : BodyPositionFunc
    ) ---;

    @(link_name="cpBodyUpdateVelocity")
    body_update_velocity :: proc(
        body : ^Body,
        gravity : Vect,
        damping : Float,
        dt : Float
    ) ---;

    @(link_name="cpBodyUpdatePosition")
    body_update_position :: proc(
        body : ^Body,
        dt : Float
    ) ---;

    @(link_name="cpBodyLocalToWorld")
    body_local_to_world :: proc(
        body : ^Body,
        point : Vect
    ) -> Vect ---;

    @(link_name="cpBodyWorldToLocal")
    body_world_to_local :: proc(
        body : ^Body,
        point : Vect
    ) -> Vect ---;

    @(link_name="cpBodyApplyForceAtWorldPoint")
    body_apply_force_at_world_point :: proc(
        body : ^Body,
        force : Vect,
        point : Vect
    ) ---;

    @(link_name="cpBodyApplyForceAtLocalPoint")
    body_apply_force_at_local_point :: proc(
        body : ^Body,
        force : Vect,
        point : Vect
    ) ---;

    @(link_name="cpBodyApplyImpulseAtWorldPoint")
    body_apply_impulse_at_world_point :: proc(
        body : ^Body,
        impulse : Vect,
        point : Vect
    ) ---;

    @(link_name="cpBodyApplyImpulseAtLocalPoint")
    body_apply_impulse_at_local_point :: proc(
        body : ^Body,
        impulse : Vect,
        point : Vect
    ) ---;

    @(link_name="cpBodyGetVelocityAtWorldPoint")
    body_get_velocity_at_world_point :: proc(
        body : ^Body,
        point : Vect
    ) -> Vect ---;

    @(link_name="cpBodyGetVelocityAtLocalPoint")
    body_get_velocity_at_local_point :: proc(
        body : ^Body,
        point : Vect
    ) -> Vect ---;

    @(link_name="cpBodyKineticEnergy")
    body_kinetic_energy :: proc(body : ^Body) -> Float ---;

    @(link_name="cpBodyEachShape")
    body_each_shape :: proc(
        body : ^Body,
        func : BodyShapeIteratorFunc,
        data : rawptr
    ) ---;

    @(link_name="cpBodyEachConstraint")
    body_each_constraint :: proc(
        body : ^Body,
        func : BodyConstraintIteratorFunc,
        data : rawptr
    ) ---;

    @(link_name="cpBodyEachArbiter")
    body_each_arbiter :: proc(
        body : ^Body,
        func : BodyArbiterIteratorFunc,
        data : rawptr
    ) ---;

    @(link_name="cpShapeFilterNew")
    shape_filter_new :: proc(
        group : Group,
        categories : Bitmask,
        mask : Bitmask
    ) -> ShapeFilter ---;

    @(link_name="cpShapeDestroy")
    shape_destroy :: proc(shape : ^Shape) ---;

    @(link_name="cpShapeFree")
    shape_free :: proc(shape : ^Shape) ---;

    @(link_name="cpShapeCacheBB")
    shape_cache_bb :: proc(shape : ^Shape) -> Bb ---;

    @(link_name="cpShapeUpdate")
    shape_update :: proc(
        shape : ^Shape,
        transform : Transform
    ) -> Bb ---;

    @(link_name="cpShapePointQuery")
    shape_point_query :: proc(
        shape : ^Shape,
        p : Vect,
        out : ^PointQueryInfo
    ) -> Float ---;

    @(link_name="cpShapeSegmentQuery")
    shape_segment_query :: proc(
        shape : ^Shape,
        a : Vect,
        b : Vect,
        radius : Float,
        info : ^SegmentQueryInfo
    ) -> Bool ---;

    @(link_name="cpShapesCollide")
    shapes_collide :: proc(
        a : ^Shape,
        b : ^Shape
    ) -> ContactPointSet ---;

    @(link_name="cpShapeGetSpace")
    shape_get_space :: proc(shape : ^Shape) -> ^Space ---;

    @(link_name="cpShapeGetBody")
    shape_get_body :: proc(shape : ^Shape) -> ^Body ---;

    @(link_name="cpShapeSetBody")
    shape_set_body :: proc(
        shape : ^Shape,
        body : ^Body
    ) ---;

    @(link_name="cpShapeGetMass")
    shape_get_mass :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpShapeSetMass")
    shape_set_mass :: proc(
        shape : ^Shape,
        mass : Float
    ) ---;

    @(link_name="cpShapeGetDensity")
    shape_get_density :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpShapeSetDensity")
    shape_set_density :: proc(
        shape : ^Shape,
        density : Float
    ) ---;

    @(link_name="cpShapeGetMoment")
    shape_get_moment :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpShapeGetArea")
    shape_get_area :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpShapeGetCenterOfGravity")
    shape_get_center_of_gravity :: proc(shape : ^Shape) -> Vect ---;

    @(link_name="cpShapeGetBB")
    shape_get_bb :: proc(shape : ^Shape) -> Bb ---;

    @(link_name="cpShapeGetSensor")
    shape_get_sensor :: proc(shape : ^Shape) -> Bool ---;

    @(link_name="cpShapeSetSensor")
    shape_set_sensor :: proc(
        shape : ^Shape,
        sensor : Bool
    ) ---;

    @(link_name="cpShapeGetElasticity")
    shape_get_elasticity :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpShapeSetElasticity")
    shape_set_elasticity :: proc(
        shape : ^Shape,
        elasticity : Float
    ) ---;

    @(link_name="cpShapeGetFriction")
    shape_get_friction :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpShapeSetFriction")
    shape_set_friction :: proc(
        shape : ^Shape,
        friction : Float
    ) ---;

    @(link_name="cpShapeGetSurfaceVelocity")
    shape_get_surface_velocity :: proc(shape : ^Shape) -> Vect ---;

    @(link_name="cpShapeSetSurfaceVelocity")
    shape_set_surface_velocity :: proc(
        shape : ^Shape,
        surface_velocity : Vect
    ) ---;

    @(link_name="cpShapeGetUserData")
    shape_get_user_data :: proc(shape : ^Shape) -> DataPointer ---;

    @(link_name="cpShapeSetUserData")
    shape_set_user_data :: proc(
        shape : ^Shape,
        user_data : DataPointer
    ) ---;

    @(link_name="cpShapeGetCollisionType")
    shape_get_collision_type :: proc(shape : ^Shape) -> CollisionType ---;

    @(link_name="cpShapeSetCollisionType")
    shape_set_collision_type :: proc(
        shape : ^Shape,
        collision_type : CollisionType
    ) ---;

    @(link_name="cpShapeGetFilter")
    shape_get_filter :: proc(shape : ^Shape) -> ShapeFilter ---;

    @(link_name="cpShapeSetFilter")
    shape_set_filter :: proc(
        shape : ^Shape,
        filter : ShapeFilter
    ) ---;

    @(link_name="cpCircleShapeAlloc")
    circle_shape_alloc :: proc() -> ^CircleShape ---;

    @(link_name="cpCircleShapeInit")
    circle_shape_init :: proc(
        circle : ^CircleShape,
        body : ^Body,
        radius : Float,
        offset : Vect
    ) -> ^CircleShape ---;

    @(link_name="cpCircleShapeNew")
    circle_shape_new :: proc(
        body : ^Body,
        radius : Float,
        offset : Vect
    ) -> ^Shape ---;

    @(link_name="cpCircleShapeGetOffset")
    circle_shape_get_offset :: proc(shape : ^Shape) -> Vect ---;

    @(link_name="cpCircleShapeGetRadius")
    circle_shape_get_radius :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpSegmentShapeAlloc")
    segment_shape_alloc :: proc() -> ^SegmentShape ---;

    @(link_name="cpSegmentShapeInit")
    segment_shape_init :: proc(
        seg : ^SegmentShape,
        body : ^Body,
        a : Vect,
        b : Vect,
        radius : Float
    ) -> ^SegmentShape ---;

    @(link_name="cpSegmentShapeNew")
    segment_shape_new :: proc(
        body : ^Body,
        a : Vect,
        b : Vect,
        radius : Float
    ) -> ^Shape ---;

    @(link_name="cpSegmentShapeSetNeighbors")
    segment_shape_set_neighbors :: proc(
        shape : ^Shape,
        prev : Vect,
        next : Vect
    ) ---;

    @(link_name="cpSegmentShapeGetA")
    segment_shape_get_a :: proc(shape : ^Shape) -> Vect ---;

    @(link_name="cpSegmentShapeGetB")
    segment_shape_get_b :: proc(shape : ^Shape) -> Vect ---;

    @(link_name="cpSegmentShapeGetNormal")
    segment_shape_get_normal :: proc(shape : ^Shape) -> Vect ---;

    @(link_name="cpSegmentShapeGetRadius")
    segment_shape_get_radius :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpPolyShapeAlloc")
    poly_shape_alloc :: proc() -> ^PolyShape ---;

    @(link_name="cpPolyShapeInit")
    poly_shape_init :: proc(
        poly : ^PolyShape,
        body : ^Body,
        count : _c.int,
        verts : ^Vect,
        transform : Transform,
        radius : Float
    ) -> ^PolyShape ---;

    @(link_name="cpPolyShapeInitRaw")
    poly_shape_init_raw :: proc(
        poly : ^PolyShape,
        body : ^Body,
        count : _c.int,
        verts : ^Vect,
        radius : Float
    ) -> ^PolyShape ---;

    @(link_name="cpPolyShapeNew")
    poly_shape_new :: proc(
        body : ^Body,
        count : _c.int,
        verts : ^Vect,
        transform : Transform,
        radius : Float
    ) -> ^Shape ---;

    @(link_name="cpPolyShapeNewRaw")
    poly_shape_new_raw :: proc(
        body : ^Body,
        count : _c.int,
        verts : ^Vect,
        radius : Float
    ) -> ^Shape ---;

    @(link_name="cpBoxShapeInit")
    box_shape_init :: proc(
        poly : ^PolyShape,
        body : ^Body,
        width : Float,
        height : Float,
        radius : Float
    ) -> ^PolyShape ---;

    @(link_name="cpBoxShapeInit2")
    box_shape_init_2 :: proc(
        poly : ^PolyShape,
        body : ^Body,
        box : Bb,
        radius : Float
    ) -> ^PolyShape ---;

    @(link_name="cpBoxShapeNew")
    box_shape_new :: proc(
        body : ^Body,
        width : Float,
        height : Float,
        radius : Float
    ) -> ^Shape ---;

    @(link_name="cpBoxShapeNew2")
    box_shape_new_2 :: proc(
        body : ^Body,
        box : Bb,
        radius : Float
    ) -> ^Shape ---;

    @(link_name="cpPolyShapeGetCount")
    poly_shape_get_count :: proc(shape : ^Shape) -> _c.int ---;

    @(link_name="cpPolyShapeGetVert")
    poly_shape_get_vert :: proc(
        shape : ^Shape,
        index : _c.int
    ) -> Vect ---;

    @(link_name="cpPolyShapeGetRadius")
    poly_shape_get_radius :: proc(shape : ^Shape) -> Float ---;

    @(link_name="cpConstraintDestroy")
    constraint_destroy :: proc(constraint : ^Constraint) ---;

    @(link_name="cpConstraintFree")
    constraint_free :: proc(constraint : ^Constraint) ---;

    @(link_name="cpConstraintGetSpace")
    constraint_get_space :: proc(constraint : ^Constraint) -> ^Space ---;

    @(link_name="cpConstraintGetBodyA")
    constraint_get_body_a :: proc(constraint : ^Constraint) -> ^Body ---;

    @(link_name="cpConstraintGetBodyB")
    constraint_get_body_b :: proc(constraint : ^Constraint) -> ^Body ---;

    @(link_name="cpConstraintGetMaxForce")
    constraint_get_max_force :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpConstraintSetMaxForce")
    constraint_set_max_force :: proc(
        constraint : ^Constraint,
        max_force : Float
    ) ---;

    @(link_name="cpConstraintGetErrorBias")
    constraint_get_error_bias :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpConstraintSetErrorBias")
    constraint_set_error_bias :: proc(
        constraint : ^Constraint,
        error_bias : Float
    ) ---;

    @(link_name="cpConstraintGetMaxBias")
    constraint_get_max_bias :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpConstraintSetMaxBias")
    constraint_set_max_bias :: proc(
        constraint : ^Constraint,
        max_bias : Float
    ) ---;

    @(link_name="cpConstraintGetCollideBodies")
    constraint_get_collide_bodies :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpConstraintSetCollideBodies")
    constraint_set_collide_bodies :: proc(
        constraint : ^Constraint,
        collide_bodies : Bool
    ) ---;

    @(link_name="cpConstraintGetPreSolveFunc")
    constraint_get_pre_solve_func :: proc(constraint : ^Constraint) -> ConstraintPreSolveFunc ---;

    @(link_name="cpConstraintSetPreSolveFunc")
    constraint_set_pre_solve_func :: proc(
        constraint : ^Constraint,
        pre_solve_func : ConstraintPreSolveFunc
    ) ---;

    @(link_name="cpConstraintGetPostSolveFunc")
    constraint_get_post_solve_func :: proc(constraint : ^Constraint) -> ConstraintPostSolveFunc ---;

    @(link_name="cpConstraintSetPostSolveFunc")
    constraint_set_post_solve_func :: proc(
        constraint : ^Constraint,
        post_solve_func : ConstraintPostSolveFunc
    ) ---;

    @(link_name="cpConstraintGetUserData")
    constraint_get_user_data :: proc(constraint : ^Constraint) -> DataPointer ---;

    @(link_name="cpConstraintSetUserData")
    constraint_set_user_data :: proc(
        constraint : ^Constraint,
        user_data : DataPointer
    ) ---;

    @(link_name="cpConstraintGetImpulse")
    constraint_get_impulse :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpConstraintIsPinJoint")
    constraint_is_pin_joint :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpPinJointAlloc")
    pin_joint_alloc :: proc() -> ^PinJoint ---;

    @(link_name="cpPinJointInit")
    pin_joint_init :: proc(
        joint : ^PinJoint,
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect
    ) -> ^PinJoint ---;

    @(link_name="cpPinJointNew")
    pin_joint_new :: proc(
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect
    ) -> ^Constraint ---;

    @(link_name="cpPinJointGetAnchorA")
    pin_joint_get_anchor_a :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpPinJointSetAnchorA")
    pin_joint_set_anchor_a :: proc(
        constraint : ^Constraint,
        anchor_a : Vect
    ) ---;

    @(link_name="cpPinJointGetAnchorB")
    pin_joint_get_anchor_b :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpPinJointSetAnchorB")
    pin_joint_set_anchor_b :: proc(
        constraint : ^Constraint,
        anchor_b : Vect
    ) ---;

    @(link_name="cpPinJointGetDist")
    pin_joint_get_dist :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpPinJointSetDist")
    pin_joint_set_dist :: proc(
        constraint : ^Constraint,
        dist : Float
    ) ---;

    @(link_name="cpConstraintIsSlideJoint")
    constraint_is_slide_joint :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpSlideJointAlloc")
    slide_joint_alloc :: proc() -> ^SlideJoint ---;

    @(link_name="cpSlideJointInit")
    slide_joint_init :: proc(
        joint : ^SlideJoint,
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect,
        min : Float,
        max : Float
    ) -> ^SlideJoint ---;

    @(link_name="cpSlideJointNew")
    slide_joint_new :: proc(
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect,
        min : Float,
        max : Float
    ) -> ^Constraint ---;

    @(link_name="cpSlideJointGetAnchorA")
    slide_joint_get_anchor_a :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpSlideJointSetAnchorA")
    slide_joint_set_anchor_a :: proc(
        constraint : ^Constraint,
        anchor_a : Vect
    ) ---;

    @(link_name="cpSlideJointGetAnchorB")
    slide_joint_get_anchor_b :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpSlideJointSetAnchorB")
    slide_joint_set_anchor_b :: proc(
        constraint : ^Constraint,
        anchor_b : Vect
    ) ---;

    @(link_name="cpSlideJointGetMin")
    slide_joint_get_min :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpSlideJointSetMin")
    slide_joint_set_min :: proc(
        constraint : ^Constraint,
        min : Float
    ) ---;

    @(link_name="cpSlideJointGetMax")
    slide_joint_get_max :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpSlideJointSetMax")
    slide_joint_set_max :: proc(
        constraint : ^Constraint,
        max : Float
    ) ---;

    @(link_name="cpConstraintIsPivotJoint")
    constraint_is_pivot_joint :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpPivotJointAlloc")
    pivot_joint_alloc :: proc() -> ^PivotJoint ---;

    @(link_name="cpPivotJointInit")
    pivot_joint_init :: proc(
        joint : ^PivotJoint,
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect
    ) -> ^PivotJoint ---;

    @(link_name="cpPivotJointNew")
    pivot_joint_new :: proc(
        a : ^Body,
        b : ^Body,
        pivot : Vect
    ) -> ^Constraint ---;

    @(link_name="cpPivotJointNew2")
    pivot_joint_new_2 :: proc(
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect
    ) -> ^Constraint ---;

    @(link_name="cpPivotJointGetAnchorA")
    pivot_joint_get_anchor_a :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpPivotJointSetAnchorA")
    pivot_joint_set_anchor_a :: proc(
        constraint : ^Constraint,
        anchor_a : Vect
    ) ---;

    @(link_name="cpPivotJointGetAnchorB")
    pivot_joint_get_anchor_b :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpPivotJointSetAnchorB")
    pivot_joint_set_anchor_b :: proc(
        constraint : ^Constraint,
        anchor_b : Vect
    ) ---;

    @(link_name="cpConstraintIsGrooveJoint")
    constraint_is_groove_joint :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpGrooveJointAlloc")
    groove_joint_alloc :: proc() -> ^GrooveJoint ---;

    @(link_name="cpGrooveJointInit")
    groove_joint_init :: proc(
        joint : ^GrooveJoint,
        a : ^Body,
        b : ^Body,
        groove_a : Vect,
        groove_b : Vect,
        anchor_b : Vect
    ) -> ^GrooveJoint ---;

    @(link_name="cpGrooveJointNew")
    groove_joint_new :: proc(
        a : ^Body,
        b : ^Body,
        groove_a : Vect,
        groove_b : Vect,
        anchor_b : Vect
    ) -> ^Constraint ---;

    @(link_name="cpGrooveJointGetGrooveA")
    groove_joint_get_groove_a :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpGrooveJointSetGrooveA")
    groove_joint_set_groove_a :: proc(
        constraint : ^Constraint,
        groove_a : Vect
    ) ---;

    @(link_name="cpGrooveJointGetGrooveB")
    groove_joint_get_groove_b :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpGrooveJointSetGrooveB")
    groove_joint_set_groove_b :: proc(
        constraint : ^Constraint,
        groove_b : Vect
    ) ---;

    @(link_name="cpGrooveJointGetAnchorB")
    groove_joint_get_anchor_b :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpGrooveJointSetAnchorB")
    groove_joint_set_anchor_b :: proc(
        constraint : ^Constraint,
        anchor_b : Vect
    ) ---;

    @(link_name="cpConstraintIsDampedSpring")
    constraint_is_damped_spring :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpDampedSpringAlloc")
    damped_spring_alloc :: proc() -> ^DampedSpring ---;

    @(link_name="cpDampedSpringInit")
    damped_spring_init :: proc(
        joint : ^DampedSpring,
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect,
        rest_length : Float,
        stiffness : Float,
        damping : Float
    ) -> ^DampedSpring ---;

    @(link_name="cpDampedSpringNew")
    damped_spring_new :: proc(
        a : ^Body,
        b : ^Body,
        anchor_a : Vect,
        anchor_b : Vect,
        rest_length : Float,
        stiffness : Float,
        damping : Float
    ) -> ^Constraint ---;

    @(link_name="cpDampedSpringGetAnchorA")
    damped_spring_get_anchor_a :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpDampedSpringSetAnchorA")
    damped_spring_set_anchor_a :: proc(
        constraint : ^Constraint,
        anchor_a : Vect
    ) ---;

    @(link_name="cpDampedSpringGetAnchorB")
    damped_spring_get_anchor_b :: proc(constraint : ^Constraint) -> Vect ---;

    @(link_name="cpDampedSpringSetAnchorB")
    damped_spring_set_anchor_b :: proc(
        constraint : ^Constraint,
        anchor_b : Vect
    ) ---;

    @(link_name="cpDampedSpringGetRestLength")
    damped_spring_get_rest_length :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpDampedSpringSetRestLength")
    damped_spring_set_rest_length :: proc(
        constraint : ^Constraint,
        rest_length : Float
    ) ---;

    @(link_name="cpDampedSpringGetStiffness")
    damped_spring_get_stiffness :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpDampedSpringSetStiffness")
    damped_spring_set_stiffness :: proc(
        constraint : ^Constraint,
        stiffness : Float
    ) ---;

    @(link_name="cpDampedSpringGetDamping")
    damped_spring_get_damping :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpDampedSpringSetDamping")
    damped_spring_set_damping :: proc(
        constraint : ^Constraint,
        damping : Float
    ) ---;

    @(link_name="cpDampedSpringGetSpringForceFunc")
    damped_spring_get_spring_force_func :: proc(constraint : ^Constraint) -> DampedSpringForceFunc ---;

    @(link_name="cpDampedSpringSetSpringForceFunc")
    damped_spring_set_spring_force_func :: proc(
        constraint : ^Constraint,
        spring_force_func : DampedSpringForceFunc
    ) ---;

    @(link_name="cpConstraintIsDampedRotarySpring")
    constraint_is_damped_rotary_spring :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpDampedRotarySpringAlloc")
    damped_rotary_spring_alloc :: proc() -> ^DampedRotarySpring ---;

    @(link_name="cpDampedRotarySpringInit")
    damped_rotary_spring_init :: proc(
        joint : ^DampedRotarySpring,
        a : ^Body,
        b : ^Body,
        rest_angle : Float,
        stiffness : Float,
        damping : Float
    ) -> ^DampedRotarySpring ---;

    @(link_name="cpDampedRotarySpringNew")
    damped_rotary_spring_new :: proc(
        a : ^Body,
        b : ^Body,
        rest_angle : Float,
        stiffness : Float,
        damping : Float
    ) -> ^Constraint ---;

    @(link_name="cpDampedRotarySpringGetRestAngle")
    damped_rotary_spring_get_rest_angle :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpDampedRotarySpringSetRestAngle")
    damped_rotary_spring_set_rest_angle :: proc(
        constraint : ^Constraint,
        rest_angle : Float
    ) ---;

    @(link_name="cpDampedRotarySpringGetStiffness")
    damped_rotary_spring_get_stiffness :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpDampedRotarySpringSetStiffness")
    damped_rotary_spring_set_stiffness :: proc(
        constraint : ^Constraint,
        stiffness : Float
    ) ---;

    @(link_name="cpDampedRotarySpringGetDamping")
    damped_rotary_spring_get_damping :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpDampedRotarySpringSetDamping")
    damped_rotary_spring_set_damping :: proc(
        constraint : ^Constraint,
        damping : Float
    ) ---;

    @(link_name="cpDampedRotarySpringGetSpringTorqueFunc")
    damped_rotary_spring_get_spring_torque_func :: proc(constraint : ^Constraint) -> DampedRotarySpringTorqueFunc ---;

    @(link_name="cpDampedRotarySpringSetSpringTorqueFunc")
    damped_rotary_spring_set_spring_torque_func :: proc(
        constraint : ^Constraint,
        spring_torque_func : DampedRotarySpringTorqueFunc
    ) ---;

    @(link_name="cpConstraintIsRotaryLimitJoint")
    constraint_is_rotary_limit_joint :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpRotaryLimitJointAlloc")
    rotary_limit_joint_alloc :: proc() -> ^RotaryLimitJoint ---;

    @(link_name="cpRotaryLimitJointInit")
    rotary_limit_joint_init :: proc(
        joint : ^RotaryLimitJoint,
        a : ^Body,
        b : ^Body,
        min : Float,
        max : Float
    ) -> ^RotaryLimitJoint ---;

    @(link_name="cpRotaryLimitJointNew")
    rotary_limit_joint_new :: proc(
        a : ^Body,
        b : ^Body,
        min : Float,
        max : Float
    ) -> ^Constraint ---;

    @(link_name="cpRotaryLimitJointGetMin")
    rotary_limit_joint_get_min :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpRotaryLimitJointSetMin")
    rotary_limit_joint_set_min :: proc(
        constraint : ^Constraint,
        min : Float
    ) ---;

    @(link_name="cpRotaryLimitJointGetMax")
    rotary_limit_joint_get_max :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpRotaryLimitJointSetMax")
    rotary_limit_joint_set_max :: proc(
        constraint : ^Constraint,
        max : Float
    ) ---;

    @(link_name="cpConstraintIsRatchetJoint")
    constraint_is_ratchet_joint :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpRatchetJointAlloc")
    ratchet_joint_alloc :: proc() -> ^RatchetJoint ---;

    @(link_name="cpRatchetJointInit")
    ratchet_joint_init :: proc(
        joint : ^RatchetJoint,
        a : ^Body,
        b : ^Body,
        phase : Float,
        ratchet : Float
    ) -> ^RatchetJoint ---;

    @(link_name="cpRatchetJointNew")
    ratchet_joint_new :: proc(
        a : ^Body,
        b : ^Body,
        phase : Float,
        ratchet : Float
    ) -> ^Constraint ---;

    @(link_name="cpRatchetJointGetAngle")
    ratchet_joint_get_angle :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpRatchetJointSetAngle")
    ratchet_joint_set_angle :: proc(
        constraint : ^Constraint,
        angle : Float
    ) ---;

    @(link_name="cpRatchetJointGetPhase")
    ratchet_joint_get_phase :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpRatchetJointSetPhase")
    ratchet_joint_set_phase :: proc(
        constraint : ^Constraint,
        phase : Float
    ) ---;

    @(link_name="cpRatchetJointGetRatchet")
    ratchet_joint_get_ratchet :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpRatchetJointSetRatchet")
    ratchet_joint_set_ratchet :: proc(
        constraint : ^Constraint,
        ratchet : Float
    ) ---;

    @(link_name="cpConstraintIsGearJoint")
    constraint_is_gear_joint :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpGearJointAlloc")
    gear_joint_alloc :: proc() -> ^GearJoint ---;

    @(link_name="cpGearJointInit")
    gear_joint_init :: proc(
        joint : ^GearJoint,
        a : ^Body,
        b : ^Body,
        phase : Float,
        ratio : Float
    ) -> ^GearJoint ---;

    @(link_name="cpGearJointNew")
    gear_joint_new :: proc(
        a : ^Body,
        b : ^Body,
        phase : Float,
        ratio : Float
    ) -> ^Constraint ---;

    @(link_name="cpGearJointGetPhase")
    gear_joint_get_phase :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpGearJointSetPhase")
    gear_joint_set_phase :: proc(
        constraint : ^Constraint,
        phase : Float
    ) ---;

    @(link_name="cpGearJointGetRatio")
    gear_joint_get_ratio :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpGearJointSetRatio")
    gear_joint_set_ratio :: proc(
        constraint : ^Constraint,
        ratio : Float
    ) ---;

    @(link_name="cpConstraintIsSimpleMotor")
    constraint_is_simple_motor :: proc(constraint : ^Constraint) -> Bool ---;

    @(link_name="cpSimpleMotorAlloc")
    simple_motor_alloc :: proc() -> ^SimpleMotor ---;

    @(link_name="cpSimpleMotorInit")
    simple_motor_init :: proc(
        joint : ^SimpleMotor,
        a : ^Body,
        b : ^Body,
        rate : Float
    ) -> ^SimpleMotor ---;

    @(link_name="cpSimpleMotorNew")
    simple_motor_new :: proc(
        a : ^Body,
        b : ^Body,
        rate : Float
    ) -> ^Constraint ---;

    @(link_name="cpSimpleMotorGetRate")
    simple_motor_get_rate :: proc(constraint : ^Constraint) -> Float ---;

    @(link_name="cpSimpleMotorSetRate")
    simple_motor_set_rate :: proc(
        constraint : ^Constraint,
        rate : Float
    ) ---;

    @(link_name="cpSpaceAlloc")
    space_alloc :: proc() -> ^Space ---;

    @(link_name="cpSpaceInit")
    space_init :: proc(space : ^Space) -> ^Space ---;

    @(link_name="cpSpaceNew")
    space_new :: proc() -> ^Space ---;

    @(link_name="cpSpaceDestroy")
    space_destroy :: proc(space : ^Space) ---;

    @(link_name="cpSpaceFree")
    space_free :: proc(space : ^Space) ---;

    @(link_name="cpSpaceGetIterations")
    space_get_iterations :: proc(space : ^Space) -> _c.int ---;

    @(link_name="cpSpaceSetIterations")
    space_set_iterations :: proc(
        space : ^Space,
        iterations : _c.int
    ) ---;

    @(link_name="cpSpaceGetGravity")
    space_get_gravity :: proc(space : ^Space) -> Vect ---;

    @(link_name="cpSpaceSetGravity")
    space_set_gravity :: proc(
        space : ^Space,
        gravity : Vect
    ) ---;

    @(link_name="cpSpaceGetDamping")
    space_get_damping :: proc(space : ^Space) -> Float ---;

    @(link_name="cpSpaceSetDamping")
    space_set_damping :: proc(
        space : ^Space,
        damping : Float
    ) ---;

    @(link_name="cpSpaceGetIdleSpeedThreshold")
    space_get_idle_speed_threshold :: proc(space : ^Space) -> Float ---;

    @(link_name="cpSpaceSetIdleSpeedThreshold")
    space_set_idle_speed_threshold :: proc(
        space : ^Space,
        idle_speed_threshold : Float
    ) ---;

    @(link_name="cpSpaceGetSleepTimeThreshold")
    space_get_sleep_time_threshold :: proc(space : ^Space) -> Float ---;

    @(link_name="cpSpaceSetSleepTimeThreshold")
    space_set_sleep_time_threshold :: proc(
        space : ^Space,
        sleep_time_threshold : Float
    ) ---;

    @(link_name="cpSpaceGetCollisionSlop")
    space_get_collision_slop :: proc(space : ^Space) -> Float ---;

    @(link_name="cpSpaceSetCollisionSlop")
    space_set_collision_slop :: proc(
        space : ^Space,
        collision_slop : Float
    ) ---;

    @(link_name="cpSpaceGetCollisionBias")
    space_get_collision_bias :: proc(space : ^Space) -> Float ---;

    @(link_name="cpSpaceSetCollisionBias")
    space_set_collision_bias :: proc(
        space : ^Space,
        collision_bias : Float
    ) ---;

    @(link_name="cpSpaceGetCollisionPersistence")
    space_get_collision_persistence :: proc(space : ^Space) -> Timestamp ---;

    @(link_name="cpSpaceSetCollisionPersistence")
    space_set_collision_persistence :: proc(
        space : ^Space,
        collision_persistence : Timestamp
    ) ---;

    @(link_name="cpSpaceGetUserData")
    space_get_user_data :: proc(space : ^Space) -> DataPointer ---;

    @(link_name="cpSpaceSetUserData")
    space_set_user_data :: proc(
        space : ^Space,
        user_data : DataPointer
    ) ---;

    @(link_name="cpSpaceGetStaticBody")
    space_get_static_body :: proc(space : ^Space) -> ^Body ---;

    @(link_name="cpSpaceGetCurrentTimeStep")
    space_get_current_time_step :: proc(space : ^Space) -> Float ---;

    @(link_name="cpSpaceIsLocked")
    space_is_locked :: proc(space : ^Space) -> Bool ---;

    @(link_name="cpSpaceAddDefaultCollisionHandler")
    space_add_default_collision_handler :: proc(space : ^Space) -> ^CollisionHandler ---;

    @(link_name="cpSpaceAddCollisionHandler")
    space_add_collision_handler :: proc(
        space : ^Space,
        a : CollisionType,
        b : CollisionType
    ) -> ^CollisionHandler ---;

    @(link_name="cpSpaceAddWildcardHandler")
    space_add_wildcard_handler :: proc(
        space : ^Space,
        type : CollisionType
    ) -> ^CollisionHandler ---;

    @(link_name="cpSpaceAddShape")
    space_add_shape :: proc(
        space : ^Space,
        shape : ^Shape
    ) -> ^Shape ---;

    @(link_name="cpSpaceAddBody")
    space_add_body :: proc(
        space : ^Space,
        body : ^Body
    ) -> ^Body ---;

    @(link_name="cpSpaceAddConstraint")
    space_add_constraint :: proc(
        space : ^Space,
        constraint : ^Constraint
    ) -> ^Constraint ---;

    @(link_name="cpSpaceRemoveShape")
    space_remove_shape :: proc(
        space : ^Space,
        shape : ^Shape
    ) ---;

    @(link_name="cpSpaceRemoveBody")
    space_remove_body :: proc(
        space : ^Space,
        body : ^Body
    ) ---;

    @(link_name="cpSpaceRemoveConstraint")
    space_remove_constraint :: proc(
        space : ^Space,
        constraint : ^Constraint
    ) ---;

    @(link_name="cpSpaceContainsShape")
    space_contains_shape :: proc(
        space : ^Space,
        shape : ^Shape
    ) -> Bool ---;

    @(link_name="cpSpaceContainsBody")
    space_contains_body :: proc(
        space : ^Space,
        body : ^Body
    ) -> Bool ---;

    @(link_name="cpSpaceContainsConstraint")
    space_contains_constraint :: proc(
        space : ^Space,
        constraint : ^Constraint
    ) -> Bool ---;

    @(link_name="cpSpaceAddPostStepCallback")
    space_add_post_step_callback :: proc(
        space : ^Space,
        func : PostStepFunc,
        key : rawptr,
        data : rawptr
    ) -> Bool ---;

    @(link_name="cpSpacePointQuery")
    space_point_query :: proc(
        space : ^Space,
        point : Vect,
        max_distance : Float,
        filter : ShapeFilter,
        func : SpacePointQueryFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpacePointQueryNearest")
    space_point_query_nearest :: proc(
        space : ^Space,
        point : Vect,
        max_distance : Float,
        filter : ShapeFilter,
        out : ^PointQueryInfo
    ) -> ^Shape ---;

    @(link_name="cpSpaceSegmentQuery")
    space_segment_query :: proc(
        space : ^Space,
        start : Vect,
        end : Vect,
        radius : Float,
        filter : ShapeFilter,
        func : SpaceSegmentQueryFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpaceSegmentQueryFirst")
    space_segment_query_first :: proc(
        space : ^Space,
        start : Vect,
        end : Vect,
        radius : Float,
        filter : ShapeFilter,
        out : ^SegmentQueryInfo
    ) -> ^Shape ---;

    @(link_name="cpSpaceBBQuery")
    space_bb_query :: proc(
        space : ^Space,
        bb : Bb,
        filter : ShapeFilter,
        func : SpaceBbQueryFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpaceShapeQuery")
    space_shape_query :: proc(
        space : ^Space,
        shape : ^Shape,
        func : SpaceShapeQueryFunc,
        data : rawptr
    ) -> Bool ---;

    @(link_name="cpSpaceEachBody")
    space_each_body :: proc(
        space : ^Space,
        func : SpaceBodyIteratorFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpaceEachShape")
    space_each_shape :: proc(
        space : ^Space,
        func : SpaceShapeIteratorFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpaceEachConstraint")
    space_each_constraint :: proc(
        space : ^Space,
        func : SpaceConstraintIteratorFunc,
        data : rawptr
    ) ---;

    @(link_name="cpSpaceReindexStatic")
    space_reindex_static :: proc(space : ^Space) ---;

    @(link_name="cpSpaceReindexShape")
    space_reindex_shape :: proc(
        space : ^Space,
        shape : ^Shape
    ) ---;

    @(link_name="cpSpaceReindexShapesForBody")
    space_reindex_shapes_for_body :: proc(
        space : ^Space,
        body : ^Body
    ) ---;

    @(link_name="cpSpaceUseSpatialHash")
    space_use_spatial_hash :: proc(
        space : ^Space,
        dim : Float,
        count : _c.int
    ) ---;

    @(link_name="cpSpaceStep")
    space_step :: proc(
        space : ^Space,
        dt : Float
    ) ---;

    @(link_name="cpSpaceDebugDraw")
    space_debug_draw :: proc(
        space : ^Space,
        options : ^SpaceDebugDrawOptions
    ) ---;

    @(link_name="cpMomentForCircle")
    moment_for_circle :: proc(
        m : Float,
        r1 : Float,
        r2 : Float,
        offset : Vect
    ) -> Float ---;

    @(link_name="cpAreaForCircle")
    area_for_circle :: proc(
        r1 : Float,
        r2 : Float
    ) -> Float ---;

    @(link_name="cpMomentForSegment")
    moment_for_segment :: proc(
        m : Float,
        a : Vect,
        b : Vect,
        radius : Float
    ) -> Float ---;

    @(link_name="cpAreaForSegment")
    area_for_segment :: proc(
        a : Vect,
        b : Vect,
        radius : Float
    ) -> Float ---;

    @(link_name="cpMomentForPoly")
    moment_for_poly :: proc(
        m : Float,
        count : _c.int,
        verts : ^Vect,
        offset : Vect,
        radius : Float
    ) -> Float ---;

    @(link_name="cpAreaForPoly")
    area_for_poly :: proc(
        count : _c.int,
        verts : ^Vect,
        radius : Float
    ) -> Float ---;

    @(link_name="cpCentroidForPoly")
    centroid_for_poly :: proc(
        count : _c.int,
        verts : ^Vect
    ) -> Vect ---;

    @(link_name="cpMomentForBox")
    moment_for_box :: proc(
        m : Float,
        width : Float,
        height : Float
    ) -> Float ---;

    @(link_name="cpMomentForBox2")
    moment_for_box_2 :: proc(
        m : Float,
        box : Bb
    ) -> Float ---;

    @(link_name="cpConvexHull")
    convex_hull :: proc(
        count : _c.int,
        verts : ^Vect,
        result : ^Vect,
        first : ^_c.int,
        tol : Float
    ) -> _c.int ---;

    @(link_name="cpClosetPointOnSegment")
    closet_point_on_segment :: proc(
        p : Vect,
        a : Vect,
        b : Vect
    ) -> Vect ---;

}
