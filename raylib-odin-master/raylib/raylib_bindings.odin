
//
// THIS FILE WAS AUTOGENERATED
//

package raylib_bindings

foreign import raylib_native "../ext/raylib/lib/raylib.lib"

import _c "core:c"


import raylib_types "./types"

raylib_Funcs :: raylib_types.raylib_Funcs;

// re-export everything from ./types for convienience
LIGHTGRAY :: Color {200, 200, 200, 255};
GRAY      :: Color{ 130, 130, 130, 255 };   // Gray
DARKGRAY  :: Color{ 80, 80, 80, 255 };      // Dark Gray
YELLOW    :: Color{ 253, 249, 0, 255 };     // Yellow
GOLD      :: Color{ 255, 203, 0, 255 };     // Gold
ORANGE    :: Color{ 255, 161, 0, 255 };     // Orange
PINK      :: Color{ 255, 109, 194, 255 };   // Pink
RED       :: Color{ 230, 41, 55, 255 };     // Red
MAROON    :: Color{ 190, 33, 55, 255 };     // Maroon
GREEN     :: Color{ 0, 228, 48, 255 };      // Green
LIME      :: Color{ 0, 158, 47, 255 };      // Lime
DARKGREEN :: Color{ 0, 117, 44, 255 };      // Dark Green
SKYBLUE   :: Color{ 102, 191, 255, 255 };   // Sky Blue
BLUE      :: Color{ 0, 121, 241, 255 };     // Blue
DARKBLUE  :: Color{ 0, 82, 172, 255 };      // Dark Blue
PURPLE    :: Color{ 200, 122, 255, 255 };   // Purple
VIOLET    :: Color{ 135, 60, 190, 255 };    // Violet
DARKPURPLE:: Color{ 112, 31, 126, 255 };    // Dark Purple
BEIGE     :: Color{ 211, 176, 131, 255 };   // Beige
BROWN     :: Color{ 127, 106, 79, 255 };    // Brown
DARKBROWN :: Color{ 76, 63, 47, 255 };      // Dark Brown
WHITE     :: Color{ 255, 255, 255, 255 };   // White
BLACK     :: Color{ 0, 0, 0, 255 };         // Black
BLANK     :: Color{ 0, 0, 0, 0 };           // Blank (Transparent)
MAGENTA   :: Color{ 255, 0, 255, 255 };     // Magenta
RAYWHITE  :: Color{ 245, 245, 245, 255 };   // My own White (raylib logo)

UintptrT :: raylib_types.UintptrT;
VaList :: raylib_types.VaList;
SizeT :: raylib_types.SizeT;
PtrdiffT :: raylib_types.PtrdiffT;
IntptrT :: raylib_types.IntptrT;
VcrtBool :: raylib_types.VcrtBool;
WcharT :: raylib_types.WcharT;
Bool :: raylib_types.Bool;
Quaternion :: raylib_types.Quaternion;
Texture :: raylib_types.Texture;
TextureCubemap :: raylib_types.TextureCubemap;
RenderTexture :: raylib_types.RenderTexture;
Camera :: raylib_types.Camera;
ConfigFlag :: raylib_types.ConfigFlag;
TraceLogType :: raylib_types.TraceLogType;
KeyboardKey :: raylib_types.KeyboardKey;
AndroidButton :: raylib_types.AndroidButton;
MouseButton :: raylib_types.MouseButton;
GamepadNumber :: raylib_types.GamepadNumber;
GamepadButton :: raylib_types.GamepadButton;
GamepadAxis :: raylib_types.GamepadAxis;
ShaderLocationIndex :: raylib_types.ShaderLocationIndex;
ShaderUniformDataType :: raylib_types.ShaderUniformDataType;
MaterialMapType :: raylib_types.MaterialMapType;
PixelFormat :: raylib_types.PixelFormat;
TextureFilterMode :: raylib_types.TextureFilterMode;
CubemapLayoutType :: raylib_types.CubemapLayoutType;
TextureWrapMode :: raylib_types.TextureWrapMode;
FontType :: raylib_types.FontType;
BlendMode :: raylib_types.BlendMode;
GestureType :: raylib_types.GestureType;
CameraMode :: raylib_types.CameraMode;
CameraType :: raylib_types.CameraType;
NPatchType :: raylib_types.NPatchType;
TraceLogCallback :: raylib_types.TraceLogCallback;

Vector2 :: raylib_types.Vector2;
Vector3 :: raylib_types.Vector3;
Vector4 :: raylib_types.Vector4;
Matrix :: raylib_types.Matrix;
Color :: raylib_types.Color;
Rectangle :: raylib_types.Rectangle;
Image :: raylib_types.Image;
Texture2D :: raylib_types.Texture2D;
RenderTexture2D :: raylib_types.RenderTexture2D;
NPatchInfo :: raylib_types.NPatchInfo;
CharInfo :: raylib_types.CharInfo;
Font :: raylib_types.Font;
Camera3D :: raylib_types.Camera3D;
Camera2D :: raylib_types.Camera2D;
Mesh :: raylib_types.Mesh;
Shader :: raylib_types.Shader;
MaterialMap :: raylib_types.MaterialMap;
Material :: raylib_types.Material;
Transform :: raylib_types.Transform;
BoneInfo :: raylib_types.BoneInfo;
Model :: raylib_types.Model;
ModelAnimation :: raylib_types.ModelAnimation;
Ray :: raylib_types.Ray;
RayHitInfo :: raylib_types.RayHitInfo;
BoundingBox :: raylib_types.BoundingBox;
Wave :: raylib_types.Wave;
RAudioBuffer :: raylib_types.RAudioBuffer;
AudioStream :: raylib_types.AudioStream;
Sound :: raylib_types.Sound;
Music :: raylib_types.Music;
VrDeviceInfo :: raylib_types.VrDeviceInfo;

get_function_pointers :: proc(funcs: ^raylib_types.raylib_Funcs) {
    funcs.init_window = init_window;
    funcs.window_should_close = window_should_close;
    funcs.close_window = close_window;
    funcs.is_window_ready = is_window_ready;
    funcs.is_window_minimized = is_window_minimized;
    funcs.is_window_resized = is_window_resized;
    funcs.is_window_hidden = is_window_hidden;
    funcs.is_window_fullscreen = is_window_fullscreen;
    funcs.toggle_fullscreen = toggle_fullscreen;
    funcs.unhide_window = unhide_window;
    funcs.hide_window = hide_window;
    funcs.set_window_icon = set_window_icon;
    funcs.set_window_title = set_window_title;
    funcs.set_window_position = set_window_position;
    funcs.set_window_monitor = set_window_monitor;
    funcs.set_window_min_size = set_window_min_size;
    funcs.set_window_size = set_window_size;
    funcs.get_window_handle = get_window_handle;
    funcs.get_screen_width = get_screen_width;
    funcs.get_screen_height = get_screen_height;
    funcs.get_monitor_count = get_monitor_count;
    funcs.get_monitor_width = get_monitor_width;
    funcs.get_monitor_height = get_monitor_height;
    funcs.get_monitor_physical_width = get_monitor_physical_width;
    funcs.get_monitor_physical_height = get_monitor_physical_height;
    funcs.get_window_position = get_window_position;
    funcs.get_monitor_name = get_monitor_name;
    funcs.get_clipboard_text = get_clipboard_text;
    funcs.set_clipboard_text = set_clipboard_text;
    funcs.hide_cursor = hide_cursor;
    funcs.is_cursor_hidden = is_cursor_hidden;
    funcs.enable_cursor = enable_cursor;
    funcs.disable_cursor = disable_cursor;
    funcs.clear_background = clear_background;
    funcs.begin_drawing = begin_drawing;
    funcs.end_drawing = end_drawing;
    funcs.begin_mode_2d = begin_mode_2d;
    funcs.end_mode_2d = end_mode_2d;
    funcs.begin_mode_3d = begin_mode_3d;
    funcs.end_mode_3d = end_mode_3d;
    funcs.begin_texture_mode = begin_texture_mode;
    funcs.end_texture_mode = end_texture_mode;
    funcs.begin_scissor_mode = begin_scissor_mode;
    funcs.end_scissor_mode = end_scissor_mode;
    funcs.get_mouse_ray = get_mouse_ray;
    funcs.get_camera_matrix = get_camera_matrix;
    funcs.get_camera_matrix_2d = get_camera_matrix_2d;
    funcs.get_world_to_screen = get_world_to_screen;
    funcs.get_world_to_screen_ex = get_world_to_screen_ex;
    funcs.get_world_to_screen_2d = get_world_to_screen_2d;
    funcs.get_screen_to_world_2d = get_screen_to_world_2d;
    funcs.set_target_fps = set_target_fps;
    funcs.get_fps = get_fps;
    funcs.get_frame_time = get_frame_time;
    funcs.get_time = get_time;
    funcs.color_to_int = color_to_int;
    funcs.color_normalize = color_normalize;
    funcs.color_from_normalized = color_from_normalized;
    funcs.color_to_hsv = color_to_hsv;
    funcs.color_from_hsv = color_from_hsv;
    funcs.get_color = get_color;
    funcs.fade = fade;
    funcs.set_config_flags = set_config_flags;
    funcs.set_trace_log_level = set_trace_log_level;
    funcs.set_trace_log_exit = set_trace_log_exit;
    funcs.set_trace_log_callback = set_trace_log_callback;
    funcs.trace_log = trace_log;
    funcs.take_screenshot = take_screenshot;
    funcs.get_random_value = get_random_value;
    funcs.load_file_data = load_file_data;
    funcs.save_file_data = save_file_data;
    funcs.load_file_text = load_file_text;
    funcs.save_file_text = save_file_text;
    funcs.file_exists = file_exists;
    funcs.is_file_extension = is_file_extension;
    funcs.directory_exists = directory_exists;
    funcs.get_extension = get_extension;
    funcs.get_file_name = get_file_name;
    funcs.get_file_name_without_ext = get_file_name_without_ext;
    funcs.get_directory_path = get_directory_path;
    funcs.get_prev_directory_path = get_prev_directory_path;
    funcs.get_working_directory = get_working_directory;
    funcs.get_directory_files = get_directory_files;
    funcs.clear_directory_files = clear_directory_files;
    funcs.change_directory = change_directory;
    funcs.is_file_dropped = is_file_dropped;
    funcs.get_dropped_files = get_dropped_files;
    funcs.clear_dropped_files = clear_dropped_files;
    funcs.get_file_mod_time = get_file_mod_time;
    funcs.compress_data = compress_data;
    funcs.decompress_data = decompress_data;
    funcs.save_storage_value = save_storage_value;
    funcs.load_storage_value = load_storage_value;
    funcs.open_url = open_url;
    funcs.is_key_pressed = is_key_pressed;
    funcs.is_key_down = is_key_down;
    funcs.is_key_released = is_key_released;
    funcs.is_key_up = is_key_up;
    funcs.set_exit_key = set_exit_key;
    funcs.get_key_pressed = get_key_pressed;
    funcs.is_gamepad_available = is_gamepad_available;
    funcs.is_gamepad_name = is_gamepad_name;
    funcs.get_gamepad_name = get_gamepad_name;
    funcs.is_gamepad_button_pressed = is_gamepad_button_pressed;
    funcs.is_gamepad_button_down = is_gamepad_button_down;
    funcs.is_gamepad_button_released = is_gamepad_button_released;
    funcs.is_gamepad_button_up = is_gamepad_button_up;
    funcs.get_gamepad_button_pressed = get_gamepad_button_pressed;
    funcs.get_gamepad_axis_count = get_gamepad_axis_count;
    funcs.get_gamepad_axis_movement = get_gamepad_axis_movement;
    funcs.is_mouse_button_pressed = is_mouse_button_pressed;
    funcs.is_mouse_button_down = is_mouse_button_down;
    funcs.is_mouse_button_released = is_mouse_button_released;
    funcs.is_mouse_button_up = is_mouse_button_up;
    funcs.get_mouse_x = get_mouse_x;
    funcs.get_mouse_y = get_mouse_y;
    funcs.get_mouse_position = get_mouse_position;
    funcs.set_mouse_position = set_mouse_position;
    funcs.set_mouse_offset = set_mouse_offset;
    funcs.set_mouse_scale = set_mouse_scale;
    funcs.get_mouse_wheel_move = get_mouse_wheel_move;
    funcs.get_touch_x = get_touch_x;
    funcs.get_touch_y = get_touch_y;
    funcs.get_touch_position = get_touch_position;
    funcs.set_gestures_enabled = set_gestures_enabled;
    funcs.is_gesture_detected = is_gesture_detected;
    funcs.get_gesture_detected = get_gesture_detected;
    funcs.get_touch_points_count = get_touch_points_count;
    funcs.get_gesture_hold_duration = get_gesture_hold_duration;
    funcs.get_gesture_drag_vector = get_gesture_drag_vector;
    funcs.get_gesture_drag_angle = get_gesture_drag_angle;
    funcs.get_gesture_pinch_vector = get_gesture_pinch_vector;
    funcs.get_gesture_pinch_angle = get_gesture_pinch_angle;
    funcs.set_camera_mode = set_camera_mode;
    funcs.update_camera = update_camera;
    funcs.set_camera_pan_control = set_camera_pan_control;
    funcs.set_camera_alt_control = set_camera_alt_control;
    funcs.set_camera_smooth_zoom_control = set_camera_smooth_zoom_control;
    funcs.set_camera_move_controls = set_camera_move_controls;
    funcs.draw_pixel = draw_pixel;
    funcs.draw_pixel_v = draw_pixel_v;
    funcs.draw_line = draw_line;
    funcs.draw_line_v = draw_line_v;
    funcs.draw_line_ex = draw_line_ex;
    funcs.draw_line_bezier = draw_line_bezier;
    funcs.draw_line_strip = draw_line_strip;
    funcs.draw_circle = draw_circle;
    funcs.draw_circle_sector = draw_circle_sector;
    funcs.draw_circle_sector_lines = draw_circle_sector_lines;
    funcs.draw_circle_gradient = draw_circle_gradient;
    funcs.draw_circle_v = draw_circle_v;
    funcs.draw_circle_lines = draw_circle_lines;
    funcs.draw_ellipse = draw_ellipse;
    funcs.draw_ellipse_lines = draw_ellipse_lines;
    funcs.draw_ring = draw_ring;
    funcs.draw_ring_lines = draw_ring_lines;
    funcs.draw_rectangle = draw_rectangle;
    funcs.draw_rectangle_v = draw_rectangle_v;
    funcs.draw_rectangle_rec = draw_rectangle_rec;
    funcs.draw_rectangle_pro = draw_rectangle_pro;
    funcs.draw_rectangle_gradient_v = draw_rectangle_gradient_v;
    funcs.draw_rectangle_gradient_h = draw_rectangle_gradient_h;
    funcs.draw_rectangle_gradient_ex = draw_rectangle_gradient_ex;
    funcs.draw_rectangle_lines = draw_rectangle_lines;
    funcs.draw_rectangle_lines_ex = draw_rectangle_lines_ex;
    funcs.draw_rectangle_rounded = draw_rectangle_rounded;
    funcs.draw_rectangle_rounded_lines = draw_rectangle_rounded_lines;
    funcs.draw_triangle = draw_triangle;
    funcs.draw_triangle_lines = draw_triangle_lines;
    funcs.draw_triangle_fan = draw_triangle_fan;
    funcs.draw_triangle_strip = draw_triangle_strip;
    funcs.draw_poly = draw_poly;
    funcs.draw_poly_lines = draw_poly_lines;
    funcs.check_collision_recs = check_collision_recs;
    funcs.check_collision_circles = check_collision_circles;
    funcs.check_collision_circle_rec = check_collision_circle_rec;
    funcs.get_collision_rec = get_collision_rec;
    funcs.check_collision_point_rec = check_collision_point_rec;
    funcs.check_collision_point_circle = check_collision_point_circle;
    funcs.check_collision_point_triangle = check_collision_point_triangle;
    funcs.load_image = load_image;
    funcs.load_image_ex = load_image_ex;
    funcs.load_image_pro = load_image_pro;
    funcs.load_image_raw = load_image_raw;
    funcs.unload_image = unload_image;
    funcs.export_image = export_image;
    funcs.export_image_as_code = export_image_as_code;
    funcs.get_image_data = get_image_data;
    funcs.get_image_data_normalized = get_image_data_normalized;
    funcs.gen_image_color = gen_image_color;
    funcs.gen_image_gradient_v = gen_image_gradient_v;
    funcs.gen_image_gradient_h = gen_image_gradient_h;
    funcs.gen_image_gradient_radial = gen_image_gradient_radial;
    funcs.gen_image_checked = gen_image_checked;
    funcs.gen_image_white_noise = gen_image_white_noise;
    funcs.gen_image_perlin_noise = gen_image_perlin_noise;
    funcs.gen_image_cellular = gen_image_cellular;
    funcs.image_copy = image_copy;
    funcs.image_from_image = image_from_image;
    funcs.image_text = image_text;
    funcs.image_text_ex = image_text_ex;
    funcs.image_to_pot = image_to_pot;
    funcs.image_format = image_format;
    funcs.image_alpha_mask = image_alpha_mask;
    funcs.image_alpha_clear = image_alpha_clear;
    funcs.image_alpha_crop = image_alpha_crop;
    funcs.image_alpha_premultiply = image_alpha_premultiply;
    funcs.image_crop = image_crop;
    funcs.image_resize = image_resize;
    funcs.image_resize_nn = image_resize_nn;
    funcs.image_resize_canvas = image_resize_canvas;
    funcs.image_mipmaps = image_mipmaps;
    funcs.image_dither = image_dither;
    funcs.image_flip_vertical = image_flip_vertical;
    funcs.image_flip_horizontal = image_flip_horizontal;
    funcs.image_rotate_cw = image_rotate_cw;
    funcs.image_rotate_ccw = image_rotate_ccw;
    funcs.image_color_tint = image_color_tint;
    funcs.image_color_invert = image_color_invert;
    funcs.image_color_grayscale = image_color_grayscale;
    funcs.image_color_contrast = image_color_contrast;
    funcs.image_color_brightness = image_color_brightness;
    funcs.image_color_replace = image_color_replace;
    funcs.image_extract_palette = image_extract_palette;
    funcs.get_image_alpha_border = get_image_alpha_border;
    funcs.image_clear_background = image_clear_background;
    funcs.image_draw_pixel = image_draw_pixel;
    funcs.image_draw_pixel_v = image_draw_pixel_v;
    funcs.image_draw_line = image_draw_line;
    funcs.image_draw_line_v = image_draw_line_v;
    funcs.image_draw_circle = image_draw_circle;
    funcs.image_draw_circle_v = image_draw_circle_v;
    funcs.image_draw_rectangle = image_draw_rectangle;
    funcs.image_draw_rectangle_v = image_draw_rectangle_v;
    funcs.image_draw_rectangle_rec = image_draw_rectangle_rec;
    funcs.image_draw_rectangle_lines = image_draw_rectangle_lines;
    funcs.image_draw = image_draw;
    funcs.image_draw_text = image_draw_text;
    funcs.image_draw_text_ex = image_draw_text_ex;
    funcs.load_texture = load_texture;
    funcs.load_texture_from_image = load_texture_from_image;
    funcs.load_texture_cubemap = load_texture_cubemap;
    funcs.load_render_texture = load_render_texture;
    funcs.unload_texture = unload_texture;
    funcs.unload_render_texture = unload_render_texture;
    funcs.update_texture = update_texture;
    funcs.get_texture_data = get_texture_data;
    funcs.get_screen_data = get_screen_data;
    funcs.gen_texture_mipmaps = gen_texture_mipmaps;
    funcs.set_texture_filter = set_texture_filter;
    funcs.set_texture_wrap = set_texture_wrap;
    funcs.draw_texture = draw_texture;
    funcs.draw_texture_v = draw_texture_v;
    funcs.draw_texture_ex = draw_texture_ex;
    funcs.draw_texture_rec = draw_texture_rec;
    funcs.draw_texture_quad = draw_texture_quad;
    funcs.draw_texture_pro = draw_texture_pro;
    funcs.draw_texture_n_patch = draw_texture_n_patch;
    funcs.get_pixel_data_size = get_pixel_data_size;
    funcs.get_font_default = get_font_default;
    funcs.load_font = load_font;
    funcs.load_font_ex = load_font_ex;
    funcs.load_font_from_image = load_font_from_image;
    funcs.load_font_data = load_font_data;
    funcs.gen_image_font_atlas = gen_image_font_atlas;
    funcs.unload_font = unload_font;
    funcs.draw_fps = draw_fps;
    funcs.draw_text = draw_text;
    funcs.draw_text_ex = draw_text_ex;
    funcs.draw_text_rec = draw_text_rec;
    funcs.draw_text_rec_ex = draw_text_rec_ex;
    funcs.draw_text_codepoint = draw_text_codepoint;
    funcs.measure_text = measure_text;
    funcs.measure_text_ex = measure_text_ex;
    funcs.get_glyph_index = get_glyph_index;
    funcs.text_copy = text_copy;
    funcs.text_is_equal = text_is_equal;
    funcs.text_length = text_length;
    funcs.text_format = text_format;
    funcs.text_subtext = text_subtext;
    funcs.text_replace = text_replace;
    funcs.text_insert = text_insert;
    funcs.text_join = text_join;
    funcs.text_split = text_split;
    funcs.text_append = text_append;
    funcs.text_find_index = text_find_index;
    funcs.text_to_upper = text_to_upper;
    funcs.text_to_lower = text_to_lower;
    funcs.text_to_pascal = text_to_pascal;
    funcs.text_to_integer = text_to_integer;
    funcs.text_to_utf_8 = text_to_utf_8;
    funcs.get_codepoints = get_codepoints;
    funcs.get_codepoints_count = get_codepoints_count;
    funcs.get_next_codepoint = get_next_codepoint;
    funcs.codepoint_to_utf_8 = codepoint_to_utf_8;
    funcs.draw_line_3d = draw_line_3d;
    funcs.draw_point_3d = draw_point_3d;
    funcs.draw_circle_3d = draw_circle_3d;
    funcs.draw_cube = draw_cube;
    funcs.draw_cube_v = draw_cube_v;
    funcs.draw_cube_wires = draw_cube_wires;
    funcs.draw_cube_wires_v = draw_cube_wires_v;
    funcs.draw_cube_texture = draw_cube_texture;
    funcs.draw_sphere = draw_sphere;
    funcs.draw_sphere_ex = draw_sphere_ex;
    funcs.draw_sphere_wires = draw_sphere_wires;
    funcs.draw_cylinder = draw_cylinder;
    funcs.draw_cylinder_wires = draw_cylinder_wires;
    funcs.draw_plane = draw_plane;
    funcs.draw_ray = draw_ray;
    funcs.draw_grid = draw_grid;
    funcs.draw_gizmo = draw_gizmo;
    funcs.load_model = load_model;
    funcs.load_model_from_mesh = load_model_from_mesh;
    funcs.unload_model = unload_model;
    funcs.load_meshes = load_meshes;
    funcs.export_mesh = export_mesh;
    funcs.unload_mesh = unload_mesh;
    funcs.load_materials = load_materials;
    funcs.load_material_default = load_material_default;
    funcs.unload_material = unload_material;
    funcs.set_material_texture = set_material_texture;
    funcs.set_model_mesh_material = set_model_mesh_material;
    funcs.load_model_animations = load_model_animations;
    funcs.update_model_animation = update_model_animation;
    funcs.unload_model_animation = unload_model_animation;
    funcs.is_model_animation_valid = is_model_animation_valid;
    funcs.gen_mesh_poly = gen_mesh_poly;
    funcs.gen_mesh_plane = gen_mesh_plane;
    funcs.gen_mesh_cube = gen_mesh_cube;
    funcs.gen_mesh_sphere = gen_mesh_sphere;
    funcs.gen_mesh_hemi_sphere = gen_mesh_hemi_sphere;
    funcs.gen_mesh_cylinder = gen_mesh_cylinder;
    funcs.gen_mesh_torus = gen_mesh_torus;
    funcs.gen_mesh_knot = gen_mesh_knot;
    funcs.gen_mesh_heightmap = gen_mesh_heightmap;
    funcs.gen_mesh_cubicmap = gen_mesh_cubicmap;
    funcs.mesh_bounding_box = mesh_bounding_box;
    funcs.mesh_tangents = mesh_tangents;
    funcs.mesh_binormals = mesh_binormals;
    funcs.draw_model = draw_model;
    funcs.draw_model_ex = draw_model_ex;
    funcs.draw_model_wires = draw_model_wires;
    funcs.draw_model_wires_ex = draw_model_wires_ex;
    funcs.draw_bounding_box = draw_bounding_box;
    funcs.draw_billboard = draw_billboard;
    funcs.draw_billboard_rec = draw_billboard_rec;
    funcs.check_collision_spheres = check_collision_spheres;
    funcs.check_collision_boxes = check_collision_boxes;
    funcs.check_collision_box_sphere = check_collision_box_sphere;
    funcs.check_collision_ray_sphere = check_collision_ray_sphere;
    funcs.check_collision_ray_sphere_ex = check_collision_ray_sphere_ex;
    funcs.check_collision_ray_box = check_collision_ray_box;
    funcs.get_collision_ray_model = get_collision_ray_model;
    funcs.get_collision_ray_triangle = get_collision_ray_triangle;
    funcs.get_collision_ray_ground = get_collision_ray_ground;
    funcs.load_shader = load_shader;
    funcs.load_shader_code = load_shader_code;
    funcs.unload_shader = unload_shader;
    funcs.get_shader_default = get_shader_default;
    funcs.get_texture_default = get_texture_default;
    funcs.get_shapes_texture = get_shapes_texture;
    funcs.get_shapes_texture_rec = get_shapes_texture_rec;
    funcs.set_shapes_texture = set_shapes_texture;
    funcs.get_shader_location = get_shader_location;
    funcs.set_shader_value = set_shader_value;
    funcs.set_shader_value_v = set_shader_value_v;
    funcs.set_shader_value_matrix = set_shader_value_matrix;
    funcs.set_shader_value_texture = set_shader_value_texture;
    funcs.set_matrix_projection = set_matrix_projection;
    funcs.set_matrix_modelview = set_matrix_modelview;
    funcs.get_matrix_modelview = get_matrix_modelview;
    funcs.get_matrix_projection = get_matrix_projection;
    funcs.gen_texture_cubemap = gen_texture_cubemap;
    funcs.gen_texture_irradiance = gen_texture_irradiance;
    funcs.gen_texture_prefilter = gen_texture_prefilter;
    funcs.gen_texture_brdf = gen_texture_brdf;
    funcs.begin_shader_mode = begin_shader_mode;
    funcs.end_shader_mode = end_shader_mode;
    funcs.begin_blend_mode = begin_blend_mode;
    funcs.end_blend_mode = end_blend_mode;
    funcs.init_vr_simulator = init_vr_simulator;
    funcs.close_vr_simulator = close_vr_simulator;
    funcs.update_vr_tracking = update_vr_tracking;
    funcs.set_vr_configuration = set_vr_configuration;
    funcs.is_vr_simulator_ready = is_vr_simulator_ready;
    funcs.toggle_vr_mode = toggle_vr_mode;
    funcs.begin_vr_drawing = begin_vr_drawing;
    funcs.end_vr_drawing = end_vr_drawing;
    funcs.init_audio_device = init_audio_device;
    funcs.close_audio_device = close_audio_device;
    funcs.is_audio_device_ready = is_audio_device_ready;
    funcs.set_master_volume = set_master_volume;
    funcs.load_wave = load_wave;
    funcs.load_sound = load_sound;
    funcs.load_sound_from_wave = load_sound_from_wave;
    funcs.update_sound = update_sound;
    funcs.unload_wave = unload_wave;
    funcs.unload_sound = unload_sound;
    funcs.export_wave = export_wave;
    funcs.export_wave_as_code = export_wave_as_code;
    funcs.play_sound = play_sound;
    funcs.stop_sound = stop_sound;
    funcs.pause_sound = pause_sound;
    funcs.resume_sound = resume_sound;
    funcs.play_sound_multi = play_sound_multi;
    funcs.stop_sound_multi = stop_sound_multi;
    funcs.get_sounds_playing = get_sounds_playing;
    funcs.is_sound_playing = is_sound_playing;
    funcs.set_sound_volume = set_sound_volume;
    funcs.set_sound_pitch = set_sound_pitch;
    funcs.wave_format = wave_format;
    funcs.wave_copy = wave_copy;
    funcs.wave_crop = wave_crop;
    funcs.get_wave_data = get_wave_data;
    funcs.load_music_stream = load_music_stream;
    funcs.unload_music_stream = unload_music_stream;
    funcs.play_music_stream = play_music_stream;
    funcs.update_music_stream = update_music_stream;
    funcs.stop_music_stream = stop_music_stream;
    funcs.pause_music_stream = pause_music_stream;
    funcs.resume_music_stream = resume_music_stream;
    funcs.is_music_playing = is_music_playing;
    funcs.set_music_volume = set_music_volume;
    funcs.set_music_pitch = set_music_pitch;
    funcs.set_music_loop_count = set_music_loop_count;
    funcs.get_music_time_length = get_music_time_length;
    funcs.get_music_time_played = get_music_time_played;
    funcs.init_audio_stream = init_audio_stream;
    funcs.update_audio_stream = update_audio_stream;
    funcs.close_audio_stream = close_audio_stream;
    funcs.is_audio_stream_processed = is_audio_stream_processed;
    funcs.play_audio_stream = play_audio_stream;
    funcs.pause_audio_stream = pause_audio_stream;
    funcs.resume_audio_stream = resume_audio_stream;
    funcs.is_audio_stream_playing = is_audio_stream_playing;
    funcs.stop_audio_stream = stop_audio_stream;
    funcs.set_audio_stream_volume = set_audio_stream_volume;
    funcs.set_audio_stream_pitch = set_audio_stream_pitch;
    funcs.set_audio_stream_buffer_size_default = set_audio_stream_buffer_size_default;
}

@(default_calling_convention="c")
foreign raylib_native {

    @(link_name="InitWindow")
    init_window :: proc(
        width : _c.int,
        height : _c.int,
        title : cstring
    ) ---;

    @(link_name="WindowShouldClose")
    window_should_close :: proc() -> bool ---;

    @(link_name="CloseWindow")
    close_window :: proc() ---;

    @(link_name="IsWindowReady")
    is_window_ready :: proc() -> bool ---;

    @(link_name="IsWindowMinimized")
    is_window_minimized :: proc() -> bool ---;

    @(link_name="IsWindowResized")
    is_window_resized :: proc() -> bool ---;

    @(link_name="IsWindowHidden")
    is_window_hidden :: proc() -> bool ---;

    @(link_name="IsWindowFullscreen")
    is_window_fullscreen :: proc() -> bool ---;

    @(link_name="ToggleFullscreen")
    toggle_fullscreen :: proc() ---;

    @(link_name="UnhideWindow")
    unhide_window :: proc() ---;

    @(link_name="HideWindow")
    hide_window :: proc() ---;

    @(link_name="SetWindowIcon")
    set_window_icon :: proc(image : Image) ---;

    @(link_name="SetWindowTitle")
    set_window_title :: proc(title : cstring) ---;

    @(link_name="SetWindowPosition")
    set_window_position :: proc(
        x : _c.int,
        y : _c.int
    ) ---;

    @(link_name="SetWindowMonitor")
    set_window_monitor :: proc(monitor : _c.int) ---;

    @(link_name="SetWindowMinSize")
    set_window_min_size :: proc(
        width : _c.int,
        height : _c.int
    ) ---;

    @(link_name="SetWindowSize")
    set_window_size :: proc(
        width : _c.int,
        height : _c.int
    ) ---;

    @(link_name="GetWindowHandle")
    get_window_handle :: proc() -> rawptr ---;

    @(link_name="GetScreenWidth")
    get_screen_width :: proc() -> _c.int ---;

    @(link_name="GetScreenHeight")
    get_screen_height :: proc() -> _c.int ---;

    @(link_name="GetMonitorCount")
    get_monitor_count :: proc() -> _c.int ---;

    @(link_name="GetMonitorWidth")
    get_monitor_width :: proc(monitor : _c.int) -> _c.int ---;

    @(link_name="GetMonitorHeight")
    get_monitor_height :: proc(monitor : _c.int) -> _c.int ---;

    @(link_name="GetMonitorPhysicalWidth")
    get_monitor_physical_width :: proc(monitor : _c.int) -> _c.int ---;

    @(link_name="GetMonitorPhysicalHeight")
    get_monitor_physical_height :: proc(monitor : _c.int) -> _c.int ---;

    @(link_name="GetWindowPosition")
    get_window_position :: proc() -> Vector2 ---;

    @(link_name="GetMonitorName")
    get_monitor_name :: proc(monitor : _c.int) -> cstring ---;

    @(link_name="GetClipboardText")
    get_clipboard_text :: proc() -> cstring ---;

    @(link_name="SetClipboardText")
    set_clipboard_text :: proc(text : cstring) ---;

    @(link_name="HideCursor")
    hide_cursor :: proc() ---;

    @(link_name="IsCursorHidden")
    is_cursor_hidden :: proc() -> bool ---;

    @(link_name="EnableCursor")
    enable_cursor :: proc() ---;

    @(link_name="DisableCursor")
    disable_cursor :: proc() ---;

    @(link_name="ClearBackground")
    clear_background :: proc(color : Color) ---;

    @(link_name="BeginDrawing")
    begin_drawing :: proc() ---;

    @(link_name="EndDrawing")
    end_drawing :: proc() ---;

    @(link_name="BeginMode2D")
    begin_mode_2d :: proc(camera : Camera2D) ---;

    @(link_name="EndMode2D")
    end_mode_2d :: proc() ---;

    @(link_name="BeginMode3D")
    begin_mode_3d :: proc(camera : Camera3D) ---;

    @(link_name="EndMode3D")
    end_mode_3d :: proc() ---;

    @(link_name="BeginTextureMode")
    begin_texture_mode :: proc(target : RenderTexture2D) ---;

    @(link_name="EndTextureMode")
    end_texture_mode :: proc() ---;

    @(link_name="BeginScissorMode")
    begin_scissor_mode :: proc(
        x : _c.int,
        y : _c.int,
        width : _c.int,
        height : _c.int
    ) ---;

    @(link_name="EndScissorMode")
    end_scissor_mode :: proc() ---;

    @(link_name="GetMouseRay")
    get_mouse_ray :: proc(
        mouse_position : Vector2,
        camera : Camera
    ) -> Ray ---;

    @(link_name="GetCameraMatrix")
    get_camera_matrix :: proc(camera : Camera) -> Matrix ---;

    @(link_name="GetCameraMatrix2D")
    get_camera_matrix_2d :: proc(camera : Camera2D) -> Matrix ---;

    @(link_name="GetWorldToScreen")
    get_world_to_screen :: proc(
        position : Vector3,
        camera : Camera
    ) -> Vector2 ---;

    @(link_name="GetWorldToScreenEx")
    get_world_to_screen_ex :: proc(
        position : Vector3,
        camera : Camera,
        width : _c.int,
        height : _c.int
    ) -> Vector2 ---;

    @(link_name="GetWorldToScreen2D")
    get_world_to_screen_2d :: proc(
        position : Vector2,
        camera : Camera2D
    ) -> Vector2 ---;

    @(link_name="GetScreenToWorld2D")
    get_screen_to_world_2d :: proc(
        position : Vector2,
        camera : Camera2D
    ) -> Vector2 ---;

    @(link_name="SetTargetFPS")
    set_target_fps :: proc(fps : _c.int) ---;

    @(link_name="GetFPS")
    get_fps :: proc() -> _c.int ---;

    @(link_name="GetFrameTime")
    get_frame_time :: proc() -> _c.float ---;

    @(link_name="GetTime")
    get_time :: proc() -> _c.double ---;

    @(link_name="ColorToInt")
    color_to_int :: proc(color : Color) -> _c.int ---;

    @(link_name="ColorNormalize")
    color_normalize :: proc(color : Color) -> Vector4 ---;

    @(link_name="ColorFromNormalized")
    color_from_normalized :: proc(normalized : Vector4) -> Color ---;

    @(link_name="ColorToHSV")
    color_to_hsv :: proc(color : Color) -> Vector3 ---;

    @(link_name="ColorFromHSV")
    color_from_hsv :: proc(hsv : Vector3) -> Color ---;

    @(link_name="GetColor")
    get_color :: proc(hex_value : _c.int) -> Color ---;

    @(link_name="Fade")
    fade :: proc(
        color : Color,
        alpha : _c.float
    ) -> Color ---;

    @(link_name="SetConfigFlags")
    set_config_flags :: proc(flags : ConfigFlag) ---;

    @(link_name="SetTraceLogLevel")
    set_trace_log_level :: proc(log_type : TraceLogType) ---;

    @(link_name="SetTraceLogExit")
    set_trace_log_exit :: proc(log_type : TraceLogType) ---;

    @(link_name="SetTraceLogCallback")
    set_trace_log_callback :: proc(callback : TraceLogCallback) ---;

    @(link_name="TraceLog")
    trace_log :: proc(
        log_type : TraceLogType,
        text : cstring
    ) ---;

    @(link_name="TakeScreenshot")
    take_screenshot :: proc(file_name : cstring) ---;

    @(link_name="GetRandomValue")
    get_random_value :: proc(
        min : _c.int,
        max : _c.int
    ) -> _c.int ---;

    @(link_name="LoadFileData")
    load_file_data :: proc(
        file_name : cstring,
        bytes_read : ^_c.uint
    ) -> ^_c.uchar ---;

    @(link_name="SaveFileData")
    save_file_data :: proc(
        file_name : cstring,
        data : rawptr,
        bytes_to_write : _c.uint
    ) ---;

    @(link_name="LoadFileText")
    load_file_text :: proc(file_name : cstring) -> cstring ---;

    @(link_name="SaveFileText")
    save_file_text :: proc(
        file_name : cstring,
        text : cstring
    ) ---;

    @(link_name="FileExists")
    file_exists :: proc(file_name : cstring) -> bool ---;

    @(link_name="IsFileExtension")
    is_file_extension :: proc(
        file_name : cstring,
        ext : cstring
    ) -> bool ---;

    @(link_name="DirectoryExists")
    directory_exists :: proc(dir_path : cstring) -> bool ---;

    @(link_name="GetExtension")
    get_extension :: proc(file_name : cstring) -> cstring ---;

    @(link_name="GetFileName")
    get_file_name :: proc(file_path : cstring) -> cstring ---;

    @(link_name="GetFileNameWithoutExt")
    get_file_name_without_ext :: proc(file_path : cstring) -> cstring ---;

    @(link_name="GetDirectoryPath")
    get_directory_path :: proc(file_path : cstring) -> cstring ---;

    @(link_name="GetPrevDirectoryPath")
    get_prev_directory_path :: proc(dir_path : cstring) -> cstring ---;

    @(link_name="GetWorkingDirectory")
    get_working_directory :: proc() -> cstring ---;

    @(link_name="GetDirectoryFiles")
    get_directory_files :: proc(
        dir_path : cstring,
        count : ^_c.int
    ) -> ^cstring ---;

    @(link_name="ClearDirectoryFiles")
    clear_directory_files :: proc() ---;

    @(link_name="ChangeDirectory")
    change_directory :: proc(dir : cstring) -> bool ---;

    @(link_name="IsFileDropped")
    is_file_dropped :: proc() -> bool ---;

    @(link_name="GetDroppedFiles")
    get_dropped_files :: proc(count : ^_c.int) -> ^cstring ---;

    @(link_name="ClearDroppedFiles")
    clear_dropped_files :: proc() ---;

    @(link_name="GetFileModTime")
    get_file_mod_time :: proc(file_name : cstring) -> _c.long ---;

    @(link_name="CompressData")
    compress_data :: proc(
        data : ^_c.uchar,
        data_length : _c.int,
        comp_data_length : ^_c.int
    ) -> ^_c.uchar ---;

    @(link_name="DecompressData")
    decompress_data :: proc(
        comp_data : ^_c.uchar,
        comp_data_length : _c.int,
        data_length : ^_c.int
    ) -> ^_c.uchar ---;

    @(link_name="SaveStorageValue")
    save_storage_value :: proc(
        position : _c.uint,
        value : _c.int
    ) ---;

    @(link_name="LoadStorageValue")
    load_storage_value :: proc(position : _c.uint) -> _c.int ---;

    @(link_name="OpenURL")
    open_url :: proc(url : cstring) ---;

    @(link_name="IsKeyPressed")
    is_key_pressed :: proc(key : KeyboardKey) -> bool ---;

    @(link_name="IsKeyDown")
    is_key_down :: proc(key : KeyboardKey) -> bool ---;

    @(link_name="IsKeyReleased")
    is_key_released :: proc(key : KeyboardKey) -> bool ---;

    @(link_name="IsKeyUp")
    is_key_up :: proc(key : KeyboardKey) -> bool ---;

    @(link_name="SetExitKey")
    set_exit_key :: proc(key : KeyboardKey) ---;

    @(link_name="GetKeyPressed")
    get_key_pressed :: proc() -> _c.int ---;

    @(link_name="IsGamepadAvailable")
    is_gamepad_available :: proc(gamepad : GamepadNumber) -> bool ---;

    @(link_name="IsGamepadName")
    is_gamepad_name :: proc(
        gamepad : GamepadNumber,
        name : cstring
    ) -> bool ---;

    @(link_name="GetGamepadName")
    get_gamepad_name :: proc(gamepad : GamepadNumber) -> cstring ---;

    @(link_name="IsGamepadButtonPressed")
    is_gamepad_button_pressed :: proc(
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool ---;

    @(link_name="IsGamepadButtonDown")
    is_gamepad_button_down :: proc(
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool ---;

    @(link_name="IsGamepadButtonReleased")
    is_gamepad_button_released :: proc(
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool ---;

    @(link_name="IsGamepadButtonUp")
    is_gamepad_button_up :: proc(
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool ---;

    @(link_name="GetGamepadButtonPressed")
    get_gamepad_button_pressed :: proc() -> _c.int ---;

    @(link_name="GetGamepadAxisCount")
    get_gamepad_axis_count :: proc(gamepad : GamepadNumber) -> _c.int ---;

    @(link_name="GetGamepadAxisMovement")
    get_gamepad_axis_movement :: proc(
        gamepad : GamepadNumber,
        axis : _c.int
    ) -> _c.float ---;

    @(link_name="IsMouseButtonPressed")
    is_mouse_button_pressed :: proc(button : MouseButton) -> bool ---;

    @(link_name="IsMouseButtonDown")
    is_mouse_button_down :: proc(button : MouseButton) -> bool ---;

    @(link_name="IsMouseButtonReleased")
    is_mouse_button_released :: proc(button : MouseButton) -> bool ---;

    @(link_name="IsMouseButtonUp")
    is_mouse_button_up :: proc(button : MouseButton) -> bool ---;

    @(link_name="GetMouseX")
    get_mouse_x :: proc() -> _c.int ---;

    @(link_name="GetMouseY")
    get_mouse_y :: proc() -> _c.int ---;

    @(link_name="GetMousePosition")
    get_mouse_position :: proc() -> Vector2 ---;

    @(link_name="SetMousePosition")
    set_mouse_position :: proc(
        x : _c.int,
        y : _c.int
    ) ---;

    @(link_name="SetMouseOffset")
    set_mouse_offset :: proc(
        offset_x : _c.int,
        offset_y : _c.int
    ) ---;

    @(link_name="SetMouseScale")
    set_mouse_scale :: proc(
        scale_x : _c.float,
        scale_y : _c.float
    ) ---;

    @(link_name="GetMouseWheelMove")
    get_mouse_wheel_move :: proc() -> _c.int ---;

    @(link_name="GetTouchX")
    get_touch_x :: proc() -> _c.int ---;

    @(link_name="GetTouchY")
    get_touch_y :: proc() -> _c.int ---;

    @(link_name="GetTouchPosition")
    get_touch_position :: proc(index : _c.int) -> Vector2 ---;

    @(link_name="SetGesturesEnabled")
    set_gestures_enabled :: proc(gesture_flags : _c.uint) ---;

    @(link_name="IsGestureDetected")
    is_gesture_detected :: proc(gesture : _c.int) -> bool ---;

    @(link_name="GetGestureDetected")
    get_gesture_detected :: proc() -> _c.int ---;

    @(link_name="GetTouchPointsCount")
    get_touch_points_count :: proc() -> _c.int ---;

    @(link_name="GetGestureHoldDuration")
    get_gesture_hold_duration :: proc() -> _c.float ---;

    @(link_name="GetGestureDragVector")
    get_gesture_drag_vector :: proc() -> Vector2 ---;

    @(link_name="GetGestureDragAngle")
    get_gesture_drag_angle :: proc() -> _c.float ---;

    @(link_name="GetGesturePinchVector")
    get_gesture_pinch_vector :: proc() -> Vector2 ---;

    @(link_name="GetGesturePinchAngle")
    get_gesture_pinch_angle :: proc() -> _c.float ---;

    @(link_name="SetCameraMode")
    set_camera_mode :: proc(
        camera : CameraMode,
        mode : _c.int
    ) ---;

    @(link_name="UpdateCamera")
    update_camera :: proc(camera : ^Camera) ---;

    @(link_name="SetCameraPanControl")
    set_camera_pan_control :: proc(pan_key : _c.int) ---;

    @(link_name="SetCameraAltControl")
    set_camera_alt_control :: proc(alt_key : _c.int) ---;

    @(link_name="SetCameraSmoothZoomControl")
    set_camera_smooth_zoom_control :: proc(sz_key : _c.int) ---;

    @(link_name="SetCameraMoveControls")
    set_camera_move_controls :: proc(
        front_key : _c.int,
        back_key : _c.int,
        right_key : _c.int,
        left_key : _c.int,
        up_key : _c.int,
        down_key : _c.int
    ) ---;

    @(link_name="DrawPixel")
    draw_pixel :: proc(
        pos_x : _c.int,
        pos_y : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawPixelV")
    draw_pixel_v :: proc(
        position : Vector2,
        color : Color
    ) ---;

    @(link_name="DrawLine")
    draw_line :: proc(
        start_pos_x : _c.int,
        start_pos_y : _c.int,
        end_pos_x : _c.int,
        end_pos_y : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawLineV")
    draw_line_v :: proc(
        start_pos : Vector2,
        end_pos : Vector2,
        color : Color
    ) ---;

    @(link_name="DrawLineEx")
    draw_line_ex :: proc(
        start_pos : Vector2,
        end_pos : Vector2,
        thick : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawLineBezier")
    draw_line_bezier :: proc(
        start_pos : Vector2,
        end_pos : Vector2,
        thick : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawLineStrip")
    draw_line_strip :: proc(
        points : ^Vector2,
        num_points : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawCircle")
    draw_circle :: proc(
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawCircleSector")
    draw_circle_sector :: proc(
        center : Vector2,
        radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawCircleSectorLines")
    draw_circle_sector_lines :: proc(
        center : Vector2,
        radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawCircleGradient")
    draw_circle_gradient :: proc(
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color1 : Color,
        color2 : Color
    ) ---;

    @(link_name="DrawCircleV")
    draw_circle_v :: proc(
        center : Vector2,
        radius : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawCircleLines")
    draw_circle_lines :: proc(
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawEllipse")
    draw_ellipse :: proc(
        center_x : _c.int,
        center_y : _c.int,
        radius_h : _c.float,
        radius_v : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawEllipseLines")
    draw_ellipse_lines :: proc(
        center_x : _c.int,
        center_y : _c.int,
        radius_h : _c.float,
        radius_v : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawRing")
    draw_ring :: proc(
        center : Vector2,
        inner_radius : _c.float,
        outer_radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawRingLines")
    draw_ring_lines :: proc(
        center : Vector2,
        inner_radius : _c.float,
        outer_radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawRectangle")
    draw_rectangle :: proc(
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawRectangleV")
    draw_rectangle_v :: proc(
        position : Vector2,
        size : Vector2,
        color : Color
    ) ---;

    @(link_name="DrawRectangleRec")
    draw_rectangle_rec :: proc(
        rec : Rectangle,
        color : Color
    ) ---;

    @(link_name="DrawRectanglePro")
    draw_rectangle_pro :: proc(
        rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawRectangleGradientV")
    draw_rectangle_gradient_v :: proc(
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color1 : Color,
        color2 : Color
    ) ---;

    @(link_name="DrawRectangleGradientH")
    draw_rectangle_gradient_h :: proc(
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color1 : Color,
        color2 : Color
    ) ---;

    @(link_name="DrawRectangleGradientEx")
    draw_rectangle_gradient_ex :: proc(
        rec : Rectangle,
        col1 : Color,
        col2 : Color,
        col3 : Color,
        col4 : Color
    ) ---;

    @(link_name="DrawRectangleLines")
    draw_rectangle_lines :: proc(
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawRectangleLinesEx")
    draw_rectangle_lines_ex :: proc(
        rec : Rectangle,
        line_thick : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawRectangleRounded")
    draw_rectangle_rounded :: proc(
        rec : Rectangle,
        roundness : _c.float,
        segments : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawRectangleRoundedLines")
    draw_rectangle_rounded_lines :: proc(
        rec : Rectangle,
        roundness : _c.float,
        segments : _c.int,
        line_thick : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawTriangle")
    draw_triangle :: proc(
        v1 : Vector2,
        v2 : Vector2,
        v3 : Vector2,
        color : Color
    ) ---;

    @(link_name="DrawTriangleLines")
    draw_triangle_lines :: proc(
        v1 : Vector2,
        v2 : Vector2,
        v3 : Vector2,
        color : Color
    ) ---;

    @(link_name="DrawTriangleFan")
    draw_triangle_fan :: proc(
        points : ^Vector2,
        num_points : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawTriangleStrip")
    draw_triangle_strip :: proc(
        points : ^Vector2,
        points_count : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawPoly")
    draw_poly :: proc(
        center : Vector2,
        sides : _c.int,
        radius : _c.float,
        rotation : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawPolyLines")
    draw_poly_lines :: proc(
        center : Vector2,
        sides : _c.int,
        radius : _c.float,
        rotation : _c.float,
        color : Color
    ) ---;

    @(link_name="CheckCollisionRecs")
    check_collision_recs :: proc(
        rec1 : Rectangle,
        rec2 : Rectangle
    ) -> bool ---;

    @(link_name="CheckCollisionCircles")
    check_collision_circles :: proc(
        center1 : Vector2,
        radius1 : _c.float,
        center2 : Vector2,
        radius2 : _c.float
    ) -> bool ---;

    @(link_name="CheckCollisionCircleRec")
    check_collision_circle_rec :: proc(
        center : Vector2,
        radius : _c.float,
        rec : Rectangle
    ) -> bool ---;

    @(link_name="GetCollisionRec")
    get_collision_rec :: proc(
        rec1 : Rectangle,
        rec2 : Rectangle
    ) -> Rectangle ---;

    @(link_name="CheckCollisionPointRec")
    check_collision_point_rec :: proc(
        point : Vector2,
        rec : Rectangle
    ) -> bool ---;

    @(link_name="CheckCollisionPointCircle")
    check_collision_point_circle :: proc(
        point : Vector2,
        center : Vector2,
        radius : _c.float
    ) -> bool ---;

    @(link_name="CheckCollisionPointTriangle")
    check_collision_point_triangle :: proc(
        point : Vector2,
        p1 : Vector2,
        p2 : Vector2,
        p3 : Vector2
    ) -> bool ---;

    @(link_name="LoadImage")
    load_image :: proc(file_name : cstring) -> Image ---;

    @(link_name="LoadImageEx")
    load_image_ex :: proc(
        pixels : ^Color,
        width : _c.int,
        height : _c.int
    ) -> Image ---;

    @(link_name="LoadImagePro")
    load_image_pro :: proc(
        data : rawptr,
        width : _c.int,
        height : _c.int,
        format : _c.int
    ) -> Image ---;

    @(link_name="LoadImageRaw")
    load_image_raw :: proc(
        file_name : cstring,
        width : _c.int,
        height : _c.int,
        format : _c.int,
        header_size : _c.int
    ) -> Image ---;

    @(link_name="UnloadImage")
    unload_image :: proc(image : Image) ---;

    @(link_name="ExportImage")
    export_image :: proc(
        image : Image,
        file_name : cstring
    ) ---;

    @(link_name="ExportImageAsCode")
    export_image_as_code :: proc(
        image : Image,
        file_name : cstring
    ) ---;

    @(link_name="GetImageData")
    get_image_data :: proc(image : Image) -> ^Color ---;

    @(link_name="GetImageDataNormalized")
    get_image_data_normalized :: proc(image : Image) -> ^Vector4 ---;

    @(link_name="GenImageColor")
    gen_image_color :: proc(
        width : _c.int,
        height : _c.int,
        color : Color
    ) -> Image ---;

    @(link_name="GenImageGradientV")
    gen_image_gradient_v :: proc(
        width : _c.int,
        height : _c.int,
        top : Color,
        bottom : Color
    ) -> Image ---;

    @(link_name="GenImageGradientH")
    gen_image_gradient_h :: proc(
        width : _c.int,
        height : _c.int,
        left : Color,
        right : Color
    ) -> Image ---;

    @(link_name="GenImageGradientRadial")
    gen_image_gradient_radial :: proc(
        width : _c.int,
        height : _c.int,
        density : _c.float,
        inner : Color,
        outer : Color
    ) -> Image ---;

    @(link_name="GenImageChecked")
    gen_image_checked :: proc(
        width : _c.int,
        height : _c.int,
        checks_x : _c.int,
        checks_y : _c.int,
        col1 : Color,
        col2 : Color
    ) -> Image ---;

    @(link_name="GenImageWhiteNoise")
    gen_image_white_noise :: proc(
        width : _c.int,
        height : _c.int,
        factor : _c.float
    ) -> Image ---;

    @(link_name="GenImagePerlinNoise")
    gen_image_perlin_noise :: proc(
        width : _c.int,
        height : _c.int,
        offset_x : _c.int,
        offset_y : _c.int,
        scale : _c.float
    ) -> Image ---;

    @(link_name="GenImageCellular")
    gen_image_cellular :: proc(
        width : _c.int,
        height : _c.int,
        tile_size : _c.int
    ) -> Image ---;

    @(link_name="ImageCopy")
    image_copy :: proc(image : Image) -> Image ---;

    @(link_name="ImageFromImage")
    image_from_image :: proc(
        image : Image,
        rec : Rectangle
    ) -> Image ---;

    @(link_name="ImageText")
    image_text :: proc(
        text : cstring,
        font_size : _c.int,
        color : Color
    ) -> Image ---;

    @(link_name="ImageTextEx")
    image_text_ex :: proc(
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float,
        tint : Color
    ) -> Image ---;

    @(link_name="ImageToPOT")
    image_to_pot :: proc(
        image : ^Image,
        fill_color : Color
    ) ---;

    @(link_name="ImageFormat")
    image_format :: proc(
        image : ^Image,
        new_format : _c.int
    ) ---;

    @(link_name="ImageAlphaMask")
    image_alpha_mask :: proc(
        image : ^Image,
        alpha_mask : Image
    ) ---;

    @(link_name="ImageAlphaClear")
    image_alpha_clear :: proc(
        image : ^Image,
        color : Color,
        threshold : _c.float
    ) ---;

    @(link_name="ImageAlphaCrop")
    image_alpha_crop :: proc(
        image : ^Image,
        threshold : _c.float
    ) ---;

    @(link_name="ImageAlphaPremultiply")
    image_alpha_premultiply :: proc(image : ^Image) ---;

    @(link_name="ImageCrop")
    image_crop :: proc(
        image : ^Image,
        crop : Rectangle
    ) ---;

    @(link_name="ImageResize")
    image_resize :: proc(
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int
    ) ---;

    @(link_name="ImageResizeNN")
    image_resize_nn :: proc(
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int
    ) ---;

    @(link_name="ImageResizeCanvas")
    image_resize_canvas :: proc(
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int,
        offset_x : _c.int,
        offset_y : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageMipmaps")
    image_mipmaps :: proc(image : ^Image) ---;

    @(link_name="ImageDither")
    image_dither :: proc(
        image : ^Image,
        r_bpp : _c.int,
        g_bpp : _c.int,
        b_bpp : _c.int,
        a_bpp : _c.int
    ) ---;

    @(link_name="ImageFlipVertical")
    image_flip_vertical :: proc(image : ^Image) ---;

    @(link_name="ImageFlipHorizontal")
    image_flip_horizontal :: proc(image : ^Image) ---;

    @(link_name="ImageRotateCW")
    image_rotate_cw :: proc(image : ^Image) ---;

    @(link_name="ImageRotateCCW")
    image_rotate_ccw :: proc(image : ^Image) ---;

    @(link_name="ImageColorTint")
    image_color_tint :: proc(
        image : ^Image,
        color : Color
    ) ---;

    @(link_name="ImageColorInvert")
    image_color_invert :: proc(image : ^Image) ---;

    @(link_name="ImageColorGrayscale")
    image_color_grayscale :: proc(image : ^Image) ---;

    @(link_name="ImageColorContrast")
    image_color_contrast :: proc(
        image : ^Image,
        contrast : _c.float
    ) ---;

    @(link_name="ImageColorBrightness")
    image_color_brightness :: proc(
        image : ^Image,
        brightness : _c.int
    ) ---;

    @(link_name="ImageColorReplace")
    image_color_replace :: proc(
        image : ^Image,
        color : Color,
        replace : Color
    ) ---;

    @(link_name="ImageExtractPalette")
    image_extract_palette :: proc(
        image : Image,
        max_palette_size : _c.int,
        extract_count : ^_c.int
    ) -> ^Color ---;

    @(link_name="GetImageAlphaBorder")
    get_image_alpha_border :: proc(
        image : Image,
        threshold : _c.float
    ) -> Rectangle ---;

    @(link_name="ImageClearBackground")
    image_clear_background :: proc(
        dst : ^Image,
        color : Color
    ) ---;

    @(link_name="ImageDrawPixel")
    image_draw_pixel :: proc(
        dst : ^Image,
        pos_x : _c.int,
        pos_y : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageDrawPixelV")
    image_draw_pixel_v :: proc(
        dst : ^Image,
        position : Vector2,
        color : Color
    ) ---;

    @(link_name="ImageDrawLine")
    image_draw_line :: proc(
        dst : ^Image,
        start_pos_x : _c.int,
        start_pos_y : _c.int,
        end_pos_x : _c.int,
        end_pos_y : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageDrawLineV")
    image_draw_line_v :: proc(
        dst : ^Image,
        start : Vector2,
        end : Vector2,
        color : Color
    ) ---;

    @(link_name="ImageDrawCircle")
    image_draw_circle :: proc(
        dst : ^Image,
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageDrawCircleV")
    image_draw_circle_v :: proc(
        dst : ^Image,
        center : Vector2,
        radius : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageDrawRectangle")
    image_draw_rectangle :: proc(
        dst : ^Image,
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageDrawRectangleV")
    image_draw_rectangle_v :: proc(
        dst : ^Image,
        position : Vector2,
        size : Vector2,
        color : Color
    ) ---;

    @(link_name="ImageDrawRectangleRec")
    image_draw_rectangle_rec :: proc(
        dst : ^Image,
        rec : Rectangle,
        color : Color
    ) ---;

    @(link_name="ImageDrawRectangleLines")
    image_draw_rectangle_lines :: proc(
        dst : ^Image,
        rec : Rectangle,
        thick : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageDraw")
    image_draw :: proc(
        dst : ^Image,
        src : Image,
        src_rec : Rectangle,
        dst_rec : Rectangle,
        tint : Color
    ) ---;

    @(link_name="ImageDrawText")
    image_draw_text :: proc(
        dst : ^Image,
        position : Vector2,
        text : cstring,
        font_size : _c.int,
        color : Color
    ) ---;

    @(link_name="ImageDrawTextEx")
    image_draw_text_ex :: proc(
        dst : ^Image,
        position : Vector2,
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float,
        color : Color
    ) ---;

    @(link_name="LoadTexture")
    load_texture :: proc(file_name : cstring) -> Texture2D ---;

    @(link_name="LoadTextureFromImage")
    load_texture_from_image :: proc(image : Image) -> Texture2D ---;

    @(link_name="LoadTextureCubemap")
    load_texture_cubemap :: proc(
        image : Image,
        layout_type : _c.int
    ) -> TextureCubemap ---;

    @(link_name="LoadRenderTexture")
    load_render_texture :: proc(
        width : _c.int,
        height : _c.int
    ) -> RenderTexture2D ---;

    @(link_name="UnloadTexture")
    unload_texture :: proc(texture : Texture2D) ---;

    @(link_name="UnloadRenderTexture")
    unload_render_texture :: proc(target : RenderTexture2D) ---;

    @(link_name="UpdateTexture")
    update_texture :: proc(
        texture : Texture2D,
        pixels : rawptr
    ) ---;

    @(link_name="GetTextureData")
    get_texture_data :: proc(texture : Texture2D) -> Image ---;

    @(link_name="GetScreenData")
    get_screen_data :: proc() -> Image ---;

    @(link_name="GenTextureMipmaps")
    gen_texture_mipmaps :: proc(texture : ^Texture2D) ---;

    @(link_name="SetTextureFilter")
    set_texture_filter :: proc(
        texture : Texture2D,
        filter_mode : _c.int
    ) ---;

    @(link_name="SetTextureWrap")
    set_texture_wrap :: proc(
        texture : Texture2D,
        wrap_mode : _c.int
    ) ---;

    @(link_name="DrawTexture")
    draw_texture :: proc(
        texture : Texture2D,
        pos_x : _c.int,
        pos_y : _c.int,
        tint : Color
    ) ---;

    @(link_name="DrawTextureV")
    draw_texture_v :: proc(
        texture : Texture2D,
        position : Vector2,
        tint : Color
    ) ---;

    @(link_name="DrawTextureEx")
    draw_texture_ex :: proc(
        texture : Texture2D,
        position : Vector2,
        rotation : _c.float,
        scale : _c.float,
        tint : Color
    ) ---;

    @(link_name="DrawTextureRec")
    draw_texture_rec :: proc(
        texture : Texture2D,
        source_rec : Rectangle,
        position : Vector2,
        tint : Color
    ) ---;

    @(link_name="DrawTextureQuad")
    draw_texture_quad :: proc(
        texture : Texture2D,
        tiling : Vector2,
        offset : Vector2,
        quad : Rectangle,
        tint : Color
    ) ---;

    @(link_name="DrawTexturePro")
    draw_texture_pro :: proc(
        texture : Texture2D,
        source_rec : Rectangle,
        dest_rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        tint : Color
    ) ---;

    @(link_name="DrawTextureNPatch")
    draw_texture_n_patch :: proc(
        texture : Texture2D,
        n_patch_info : NPatchInfo,
        dest_rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        tint : Color
    ) ---;

    @(link_name="GetPixelDataSize")
    get_pixel_data_size :: proc(
        width : _c.int,
        height : _c.int,
        format : _c.int
    ) -> _c.int ---;

    @(link_name="GetFontDefault")
    get_font_default :: proc() -> Font ---;

    @(link_name="LoadFont")
    load_font :: proc(file_name : cstring) -> Font ---;

    @(link_name="LoadFontEx")
    load_font_ex :: proc(
        file_name : cstring,
        font_size : _c.int,
        font_chars : ^_c.int,
        chars_count : _c.int
    ) -> Font ---;

    @(link_name="LoadFontFromImage")
    load_font_from_image :: proc(
        image : Image,
        key : Color,
        first_char : _c.int
    ) -> Font ---;

    @(link_name="LoadFontData")
    load_font_data :: proc(
        file_name : cstring,
        font_size : _c.int,
        font_chars : ^_c.int,
        chars_count : _c.int,
        type : _c.int
    ) -> ^CharInfo ---;

    @(link_name="GenImageFontAtlas")
    gen_image_font_atlas :: proc(
        chars : ^CharInfo,
        recs : ^^Rectangle,
        chars_count : _c.int,
        font_size : _c.int,
        padding : _c.int,
        pack_method : _c.int
    ) -> Image ---;

    @(link_name="UnloadFont")
    unload_font :: proc(font : Font) ---;

    @(link_name="DrawFPS")
    draw_fps :: proc(
        pos_x : _c.int,
        pos_y : _c.int
    ) ---;

    @(link_name="DrawText")
    draw_text :: proc(
        text : cstring,
        pos_x : _c.int,
        pos_y : _c.int,
        font_size : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawTextEx")
    draw_text_ex :: proc(
        font : Font,
        text : cstring,
        position : Vector2,
        font_size : _c.float,
        spacing : _c.float,
        tint : Color
    ) ---;

    @(link_name="DrawTextRec")
    draw_text_rec :: proc(
        font : Font,
        text : cstring,
        rec : Rectangle,
        font_size : _c.float,
        spacing : _c.float,
        word_wrap : bool,
        tint : Color
    ) ---;

    @(link_name="DrawTextRecEx")
    draw_text_rec_ex :: proc(
        font : Font,
        text : cstring,
        rec : Rectangle,
        font_size : _c.float,
        spacing : _c.float,
        word_wrap : bool,
        tint : Color,
        select_start : _c.int,
        select_length : _c.int,
        select_tint : Color,
        select_back_tint : Color
    ) ---;

    @(link_name="DrawTextCodepoint")
    draw_text_codepoint :: proc(
        font : Font,
        codepoint : _c.int,
        position : Vector2,
        scale : _c.float,
        tint : Color
    ) ---;

    @(link_name="MeasureText")
    measure_text :: proc(
        text : cstring,
        font_size : _c.int
    ) -> _c.int ---;

    @(link_name="MeasureTextEx")
    measure_text_ex :: proc(
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float
    ) -> Vector2 ---;

    @(link_name="GetGlyphIndex")
    get_glyph_index :: proc(
        font : Font,
        codepoint : _c.int
    ) -> _c.int ---;

    @(link_name="TextCopy")
    text_copy :: proc(
        dst : cstring,
        src : cstring
    ) -> _c.int ---;

    @(link_name="TextIsEqual")
    text_is_equal :: proc(
        text1 : cstring,
        text2 : cstring
    ) -> bool ---;

    @(link_name="TextLength")
    text_length :: proc(text : cstring) -> _c.uint ---;

    @(link_name="TextFormat")
    text_format :: proc(text : cstring) -> cstring ---;

    @(link_name="TextSubtext")
    text_subtext :: proc(
        text : cstring,
        position : _c.int,
        length : _c.int
    ) -> cstring ---;

    @(link_name="TextReplace")
    text_replace :: proc(
        text : cstring,
        replace : cstring,
        by : cstring
    ) -> cstring ---;

    @(link_name="TextInsert")
    text_insert :: proc(
        text : cstring,
        insert : cstring,
        position : _c.int
    ) -> cstring ---;

    @(link_name="TextJoin")
    text_join :: proc(
        text_list : ^cstring,
        count : _c.int,
        delimiter : cstring
    ) -> cstring ---;

    @(link_name="TextSplit")
    text_split :: proc(
        text : cstring,
        delimiter : _c.char,
        count : ^_c.int
    ) -> ^cstring ---;

    @(link_name="TextAppend")
    text_append :: proc(
        text : cstring,
        append : cstring,
        position : ^_c.int
    ) ---;

    @(link_name="TextFindIndex")
    text_find_index :: proc(
        text : cstring,
        find : cstring
    ) -> _c.int ---;

    @(link_name="TextToUpper")
    text_to_upper :: proc(text : cstring) -> cstring ---;

    @(link_name="TextToLower")
    text_to_lower :: proc(text : cstring) -> cstring ---;

    @(link_name="TextToPascal")
    text_to_pascal :: proc(text : cstring) -> cstring ---;

    @(link_name="TextToInteger")
    text_to_integer :: proc(text : cstring) -> _c.int ---;

    @(link_name="TextToUtf8")
    text_to_utf_8 :: proc(
        codepoints : ^_c.int,
        length : _c.int
    ) -> cstring ---;

    @(link_name="GetCodepoints")
    get_codepoints :: proc(
        text : cstring,
        count : ^_c.int
    ) -> ^_c.int ---;

    @(link_name="GetCodepointsCount")
    get_codepoints_count :: proc(text : cstring) -> _c.int ---;

    @(link_name="GetNextCodepoint")
    get_next_codepoint :: proc(
        text : cstring,
        bytes_processed : ^_c.int
    ) -> _c.int ---;

    @(link_name="CodepointToUtf8")
    codepoint_to_utf_8 :: proc(
        codepoint : _c.int,
        byte_length : ^_c.int
    ) -> cstring ---;

    @(link_name="DrawLine3D")
    draw_line_3d :: proc(
        start_pos : Vector3,
        end_pos : Vector3,
        color : Color
    ) ---;

    @(link_name="DrawPoint3D")
    draw_point_3d :: proc(
        position : Vector3,
        color : Color
    ) ---;

    @(link_name="DrawCircle3D")
    draw_circle_3d :: proc(
        center : Vector3,
        radius : _c.float,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawCube")
    draw_cube :: proc(
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawCubeV")
    draw_cube_v :: proc(
        position : Vector3,
        size : Vector3,
        color : Color
    ) ---;

    @(link_name="DrawCubeWires")
    draw_cube_wires :: proc(
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawCubeWiresV")
    draw_cube_wires_v :: proc(
        position : Vector3,
        size : Vector3,
        color : Color
    ) ---;

    @(link_name="DrawCubeTexture")
    draw_cube_texture :: proc(
        texture : Texture2D,
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawSphere")
    draw_sphere :: proc(
        center_pos : Vector3,
        radius : _c.float,
        color : Color
    ) ---;

    @(link_name="DrawSphereEx")
    draw_sphere_ex :: proc(
        center_pos : Vector3,
        radius : _c.float,
        rings : _c.int,
        slices : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawSphereWires")
    draw_sphere_wires :: proc(
        center_pos : Vector3,
        radius : _c.float,
        rings : _c.int,
        slices : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawCylinder")
    draw_cylinder :: proc(
        position : Vector3,
        radius_top : _c.float,
        radius_bottom : _c.float,
        height : _c.float,
        slices : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawCylinderWires")
    draw_cylinder_wires :: proc(
        position : Vector3,
        radius_top : _c.float,
        radius_bottom : _c.float,
        height : _c.float,
        slices : _c.int,
        color : Color
    ) ---;

    @(link_name="DrawPlane")
    draw_plane :: proc(
        center_pos : Vector3,
        size : Vector2,
        color : Color
    ) ---;

    @(link_name="DrawRay")
    draw_ray :: proc(
        ray : Ray,
        color : Color
    ) ---;

    @(link_name="DrawGrid")
    draw_grid :: proc(
        slices : _c.int,
        spacing : _c.float
    ) ---;

    @(link_name="DrawGizmo")
    draw_gizmo :: proc(position : Vector3) ---;

    @(link_name="LoadModel")
    load_model :: proc(file_name : cstring) -> Model ---;

    @(link_name="LoadModelFromMesh")
    load_model_from_mesh :: proc(mesh : Mesh) -> Model ---;

    @(link_name="UnloadModel")
    unload_model :: proc(model : Model) ---;

    @(link_name="LoadMeshes")
    load_meshes :: proc(
        file_name : cstring,
        mesh_count : ^_c.int
    ) -> ^Mesh ---;

    @(link_name="ExportMesh")
    export_mesh :: proc(
        mesh : Mesh,
        file_name : cstring
    ) ---;

    @(link_name="UnloadMesh")
    unload_mesh :: proc(mesh : Mesh) ---;

    @(link_name="LoadMaterials")
    load_materials :: proc(
        file_name : cstring,
        material_count : ^_c.int
    ) -> ^Material ---;

    @(link_name="LoadMaterialDefault")
    load_material_default :: proc() -> Material ---;

    @(link_name="UnloadMaterial")
    unload_material :: proc(material : Material) ---;

    @(link_name="SetMaterialTexture")
    set_material_texture :: proc(
        material : ^Material,
        map_type : _c.int,
        texture : Texture2D
    ) ---;

    @(link_name="SetModelMeshMaterial")
    set_model_mesh_material :: proc(
        model : ^Model,
        mesh_id : _c.int,
        material_id : _c.int
    ) ---;

    @(link_name="LoadModelAnimations")
    load_model_animations :: proc(
        file_name : cstring,
        anims_count : ^_c.int
    ) -> ^ModelAnimation ---;

    @(link_name="UpdateModelAnimation")
    update_model_animation :: proc(
        model : Model,
        anim : ModelAnimation,
        frame : _c.int
    ) ---;

    @(link_name="UnloadModelAnimation")
    unload_model_animation :: proc(anim : ModelAnimation) ---;

    @(link_name="IsModelAnimationValid")
    is_model_animation_valid :: proc(
        model : Model,
        anim : ModelAnimation
    ) -> bool ---;

    @(link_name="GenMeshPoly")
    gen_mesh_poly :: proc(
        sides : _c.int,
        radius : _c.float
    ) -> Mesh ---;

    @(link_name="GenMeshPlane")
    gen_mesh_plane :: proc(
        width : _c.float,
        length : _c.float,
        res_x : _c.int,
        res_z : _c.int
    ) -> Mesh ---;

    @(link_name="GenMeshCube")
    gen_mesh_cube :: proc(
        width : _c.float,
        height : _c.float,
        length : _c.float
    ) -> Mesh ---;

    @(link_name="GenMeshSphere")
    gen_mesh_sphere :: proc(
        radius : _c.float,
        rings : _c.int,
        slices : _c.int
    ) -> Mesh ---;

    @(link_name="GenMeshHemiSphere")
    gen_mesh_hemi_sphere :: proc(
        radius : _c.float,
        rings : _c.int,
        slices : _c.int
    ) -> Mesh ---;

    @(link_name="GenMeshCylinder")
    gen_mesh_cylinder :: proc(
        radius : _c.float,
        height : _c.float,
        slices : _c.int
    ) -> Mesh ---;

    @(link_name="GenMeshTorus")
    gen_mesh_torus :: proc(
        radius : _c.float,
        size : _c.float,
        rad_seg : _c.int,
        sides : _c.int
    ) -> Mesh ---;

    @(link_name="GenMeshKnot")
    gen_mesh_knot :: proc(
        radius : _c.float,
        size : _c.float,
        rad_seg : _c.int,
        sides : _c.int
    ) -> Mesh ---;

    @(link_name="GenMeshHeightmap")
    gen_mesh_heightmap :: proc(
        heightmap : Image,
        size : Vector3
    ) -> Mesh ---;

    @(link_name="GenMeshCubicmap")
    gen_mesh_cubicmap :: proc(
        cubicmap : Image,
        cube_size : Vector3
    ) -> Mesh ---;

    @(link_name="MeshBoundingBox")
    mesh_bounding_box :: proc(mesh : Mesh) -> BoundingBox ---;

    @(link_name="MeshTangents")
    mesh_tangents :: proc(mesh : ^Mesh) ---;

    @(link_name="MeshBinormals")
    mesh_binormals :: proc(mesh : ^Mesh) ---;

    @(link_name="DrawModel")
    draw_model :: proc(
        model : Model,
        position : Vector3,
        scale : _c.float,
        tint : Color
    ) ---;

    @(link_name="DrawModelEx")
    draw_model_ex :: proc(
        model : Model,
        position : Vector3,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        scale : Vector3,
        tint : Color
    ) ---;

    @(link_name="DrawModelWires")
    draw_model_wires :: proc(
        model : Model,
        position : Vector3,
        scale : _c.float,
        tint : Color
    ) ---;

    @(link_name="DrawModelWiresEx")
    draw_model_wires_ex :: proc(
        model : Model,
        position : Vector3,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        scale : Vector3,
        tint : Color
    ) ---;

    @(link_name="DrawBoundingBox")
    draw_bounding_box :: proc(
        box : BoundingBox,
        color : Color
    ) ---;

    @(link_name="DrawBillboard")
    draw_billboard :: proc(
        camera : Camera,
        texture : Texture2D,
        center : Vector3,
        size : _c.float,
        tint : Color
    ) ---;

    @(link_name="DrawBillboardRec")
    draw_billboard_rec :: proc(
        camera : Camera,
        texture : Texture2D,
        source_rec : Rectangle,
        center : Vector3,
        size : _c.float,
        tint : Color
    ) ---;

    @(link_name="CheckCollisionSpheres")
    check_collision_spheres :: proc(
        center_a : Vector3,
        radius_a : _c.float,
        center_b : Vector3,
        radius_b : _c.float
    ) -> bool ---;

    @(link_name="CheckCollisionBoxes")
    check_collision_boxes :: proc(
        box1 : BoundingBox,
        box2 : BoundingBox
    ) -> bool ---;

    @(link_name="CheckCollisionBoxSphere")
    check_collision_box_sphere :: proc(
        box : BoundingBox,
        center : Vector3,
        radius : _c.float
    ) -> bool ---;

    @(link_name="CheckCollisionRaySphere")
    check_collision_ray_sphere :: proc(
        ray : Ray,
        center : Vector3,
        radius : _c.float
    ) -> bool ---;

    @(link_name="CheckCollisionRaySphereEx")
    check_collision_ray_sphere_ex :: proc(
        ray : Ray,
        center : Vector3,
        radius : _c.float,
        collision_point : ^Vector3
    ) -> bool ---;

    @(link_name="CheckCollisionRayBox")
    check_collision_ray_box :: proc(
        ray : Ray,
        box : BoundingBox
    ) -> bool ---;

    @(link_name="GetCollisionRayModel")
    get_collision_ray_model :: proc(
        ray : Ray,
        model : Model
    ) -> RayHitInfo ---;

    @(link_name="GetCollisionRayTriangle")
    get_collision_ray_triangle :: proc(
        ray : Ray,
        p1 : Vector3,
        p2 : Vector3,
        p3 : Vector3
    ) -> RayHitInfo ---;

    @(link_name="GetCollisionRayGround")
    get_collision_ray_ground :: proc(
        ray : Ray,
        ground_height : _c.float
    ) -> RayHitInfo ---;

    @(link_name="LoadShader")
    load_shader :: proc(
        vs_file_name : cstring,
        fs_file_name : cstring
    ) -> Shader ---;

    @(link_name="LoadShaderCode")
    load_shader_code :: proc(
        vs_code : cstring,
        fs_code : cstring
    ) -> Shader ---;

    @(link_name="UnloadShader")
    unload_shader :: proc(shader : Shader) ---;

    @(link_name="GetShaderDefault")
    get_shader_default :: proc() -> Shader ---;

    @(link_name="GetTextureDefault")
    get_texture_default :: proc() -> Texture2D ---;

    @(link_name="GetShapesTexture")
    get_shapes_texture :: proc() -> Texture2D ---;

    @(link_name="GetShapesTextureRec")
    get_shapes_texture_rec :: proc() -> Rectangle ---;

    @(link_name="SetShapesTexture")
    set_shapes_texture :: proc(
        texture : Texture2D,
        source : Rectangle
    ) ---;

    @(link_name="GetShaderLocation")
    get_shader_location :: proc(
        shader : Shader,
        uniform_name : cstring
    ) -> _c.int ---;

    @(link_name="SetShaderValue")
    set_shader_value :: proc(
        shader : Shader,
        uniform_loc : _c.int,
        value : rawptr,
        uniform_type : _c.int
    ) ---;

    @(link_name="SetShaderValueV")
    set_shader_value_v :: proc(
        shader : Shader,
        uniform_loc : _c.int,
        value : rawptr,
        uniform_type : _c.int,
        count : _c.int
    ) ---;

    @(link_name="SetShaderValueMatrix")
    set_shader_value_matrix :: proc(
        shader : Shader,
        uniform_loc : _c.int,
        mat : Matrix
    ) ---;

    @(link_name="SetShaderValueTexture")
    set_shader_value_texture :: proc(
        shader : Shader,
        uniform_loc : _c.int,
        texture : Texture2D
    ) ---;

    @(link_name="SetMatrixProjection")
    set_matrix_projection :: proc(proj : Matrix) ---;

    @(link_name="SetMatrixModelview")
    set_matrix_modelview :: proc(view : Matrix) ---;

    @(link_name="GetMatrixModelview")
    get_matrix_modelview :: proc() -> Matrix ---;

    @(link_name="GetMatrixProjection")
    get_matrix_projection :: proc() -> Matrix ---;

    @(link_name="GenTextureCubemap")
    gen_texture_cubemap :: proc(
        shader : Shader,
        _map : Texture2D,
        size : _c.int
    ) -> Texture2D ---;

    @(link_name="GenTextureIrradiance")
    gen_texture_irradiance :: proc(
        shader : Shader,
        cubemap : Texture2D,
        size : _c.int
    ) -> Texture2D ---;

    @(link_name="GenTexturePrefilter")
    gen_texture_prefilter :: proc(
        shader : Shader,
        cubemap : Texture2D,
        size : _c.int
    ) -> Texture2D ---;

    @(link_name="GenTextureBRDF")
    gen_texture_brdf :: proc(
        shader : Shader,
        size : _c.int
    ) -> Texture2D ---;

    @(link_name="BeginShaderMode")
    begin_shader_mode :: proc(shader : Shader) ---;

    @(link_name="EndShaderMode")
    end_shader_mode :: proc() ---;

    @(link_name="BeginBlendMode")
    begin_blend_mode :: proc(mode : BlendMode) ---;

    @(link_name="EndBlendMode")
    end_blend_mode :: proc() ---;

    @(link_name="InitVrSimulator")
    init_vr_simulator :: proc() ---;

    @(link_name="CloseVrSimulator")
    close_vr_simulator :: proc() ---;

    @(link_name="UpdateVrTracking")
    update_vr_tracking :: proc(camera : ^Camera) ---;

    @(link_name="SetVrConfiguration")
    set_vr_configuration :: proc(
        info : VrDeviceInfo,
        distortion : Shader
    ) ---;

    @(link_name="IsVrSimulatorReady")
    is_vr_simulator_ready :: proc() -> bool ---;

    @(link_name="ToggleVrMode")
    toggle_vr_mode :: proc() ---;

    @(link_name="BeginVrDrawing")
    begin_vr_drawing :: proc() ---;

    @(link_name="EndVrDrawing")
    end_vr_drawing :: proc() ---;

    @(link_name="InitAudioDevice")
    init_audio_device :: proc() ---;

    @(link_name="CloseAudioDevice")
    close_audio_device :: proc() ---;

    @(link_name="IsAudioDeviceReady")
    is_audio_device_ready :: proc() -> bool ---;

    @(link_name="SetMasterVolume")
    set_master_volume :: proc(volume : _c.float) ---;

    @(link_name="LoadWave")
    load_wave :: proc(file_name : cstring) -> Wave ---;

    @(link_name="LoadSound")
    load_sound :: proc(file_name : cstring) -> Sound ---;

    @(link_name="LoadSoundFromWave")
    load_sound_from_wave :: proc(wave : Wave) -> Sound ---;

    @(link_name="UpdateSound")
    update_sound :: proc(
        sound : Sound,
        data : rawptr,
        samples_count : _c.int
    ) ---;

    @(link_name="UnloadWave")
    unload_wave :: proc(wave : Wave) ---;

    @(link_name="UnloadSound")
    unload_sound :: proc(sound : Sound) ---;

    @(link_name="ExportWave")
    export_wave :: proc(
        wave : Wave,
        file_name : cstring
    ) ---;

    @(link_name="ExportWaveAsCode")
    export_wave_as_code :: proc(
        wave : Wave,
        file_name : cstring
    ) ---;

    @(link_name="PlaySound")
    play_sound :: proc(sound : Sound) ---;

    @(link_name="StopSound")
    stop_sound :: proc(sound : Sound) ---;

    @(link_name="PauseSound")
    pause_sound :: proc(sound : Sound) ---;

    @(link_name="ResumeSound")
    resume_sound :: proc(sound : Sound) ---;

    @(link_name="PlaySoundMulti")
    play_sound_multi :: proc(sound : Sound) ---;

    @(link_name="StopSoundMulti")
    stop_sound_multi :: proc() ---;

    @(link_name="GetSoundsPlaying")
    get_sounds_playing :: proc() -> _c.int ---;

    @(link_name="IsSoundPlaying")
    is_sound_playing :: proc(sound : Sound) -> bool ---;

    @(link_name="SetSoundVolume")
    set_sound_volume :: proc(
        sound : Sound,
        volume : _c.float
    ) ---;

    @(link_name="SetSoundPitch")
    set_sound_pitch :: proc(
        sound : Sound,
        pitch : _c.float
    ) ---;

    @(link_name="WaveFormat")
    wave_format :: proc(
        wave : ^Wave,
        sample_rate : _c.int,
        sample_size : _c.int,
        channels : _c.int
    ) ---;

    @(link_name="WaveCopy")
    wave_copy :: proc(wave : Wave) -> Wave ---;

    @(link_name="WaveCrop")
    wave_crop :: proc(
        wave : ^Wave,
        init_sample : _c.int,
        final_sample : _c.int
    ) ---;

    @(link_name="GetWaveData")
    get_wave_data :: proc(wave : Wave) -> ^_c.float ---;

    @(link_name="LoadMusicStream")
    load_music_stream :: proc(file_name : cstring) -> Music ---;

    @(link_name="UnloadMusicStream")
    unload_music_stream :: proc(music : Music) ---;

    @(link_name="PlayMusicStream")
    play_music_stream :: proc(music : Music) ---;

    @(link_name="UpdateMusicStream")
    update_music_stream :: proc(music : Music) ---;

    @(link_name="StopMusicStream")
    stop_music_stream :: proc(music : Music) ---;

    @(link_name="PauseMusicStream")
    pause_music_stream :: proc(music : Music) ---;

    @(link_name="ResumeMusicStream")
    resume_music_stream :: proc(music : Music) ---;

    @(link_name="IsMusicPlaying")
    is_music_playing :: proc(music : Music) -> bool ---;

    @(link_name="SetMusicVolume")
    set_music_volume :: proc(
        music : Music,
        volume : _c.float
    ) ---;

    @(link_name="SetMusicPitch")
    set_music_pitch :: proc(
        music : Music,
        pitch : _c.float
    ) ---;

    @(link_name="SetMusicLoopCount")
    set_music_loop_count :: proc(
        music : Music,
        count : _c.int
    ) ---;

    @(link_name="GetMusicTimeLength")
    get_music_time_length :: proc(music : Music) -> _c.float ---;

    @(link_name="GetMusicTimePlayed")
    get_music_time_played :: proc(music : Music) -> _c.float ---;

    @(link_name="InitAudioStream")
    init_audio_stream :: proc(
        sample_rate : _c.uint,
        sample_size : _c.uint,
        channels : _c.uint
    ) -> AudioStream ---;

    @(link_name="UpdateAudioStream")
    update_audio_stream :: proc(
        stream : AudioStream,
        data : rawptr,
        samples_count : _c.int
    ) ---;

    @(link_name="CloseAudioStream")
    close_audio_stream :: proc(stream : AudioStream) ---;

    @(link_name="IsAudioStreamProcessed")
    is_audio_stream_processed :: proc(stream : AudioStream) -> bool ---;

    @(link_name="PlayAudioStream")
    play_audio_stream :: proc(stream : AudioStream) ---;

    @(link_name="PauseAudioStream")
    pause_audio_stream :: proc(stream : AudioStream) ---;

    @(link_name="ResumeAudioStream")
    resume_audio_stream :: proc(stream : AudioStream) ---;

    @(link_name="IsAudioStreamPlaying")
    is_audio_stream_playing :: proc(stream : AudioStream) -> bool ---;

    @(link_name="StopAudioStream")
    stop_audio_stream :: proc(stream : AudioStream) ---;

    @(link_name="SetAudioStreamVolume")
    set_audio_stream_volume :: proc(
        stream : AudioStream,
        volume : _c.float
    ) ---;

    @(link_name="SetAudioStreamPitch")
    set_audio_stream_pitch :: proc(
        stream : AudioStream,
        pitch : _c.float
    ) ---;

    @(link_name="SetAudioStreamBufferSizeDefault")
    set_audio_stream_buffer_size_default :: proc(size : _c.int) ---;

}
