//
// generated by bindgen (https://github.com/Breush/odin-binding-generator)
//

package raylib_types

import _c "core:c"

import "core:math/linalg"

UintptrT :: _c.ulonglong;
VaList :: cstring;
SizeT :: _c.ulonglong;
PtrdiffT :: _c.longlong;
IntptrT :: _c.longlong;
VcrtBool :: Bool;
WcharT :: _c.ushort;
Bool :: AnonymousEnum0;
Quaternion :: Vector4;
Texture :: Texture2D;
TextureCubemap :: Texture2D;
RenderTexture :: RenderTexture2D;
Camera :: Camera3D;
ConfigFlag :: AnonymousEnum1;
TraceLogType :: AnonymousEnum2;
KeyboardKey :: AnonymousEnum3;
AndroidButton :: AnonymousEnum4;
MouseButton :: AnonymousEnum5;
GamepadNumber :: AnonymousEnum6;
GamepadButton :: AnonymousEnum7;
GamepadAxis :: AnonymousEnum8;
ShaderLocationIndex :: AnonymousEnum9;
ShaderUniformDataType :: AnonymousEnum10;
MaterialMapType :: AnonymousEnum11;
PixelFormat :: AnonymousEnum12;
TextureFilterMode :: AnonymousEnum13;
CubemapLayoutType :: AnonymousEnum14;
TextureWrapMode :: AnonymousEnum15;
FontType :: AnonymousEnum16;
BlendMode :: AnonymousEnum17;
GestureType :: AnonymousEnum18;
CameraMode :: AnonymousEnum19;
CameraType :: AnonymousEnum20;
NPatchType :: AnonymousEnum21;
TraceLogCallback :: #type proc();

AnonymousEnum0 :: enum i32 {
    false,
    true,
};

AnonymousEnum1 :: enum i32 {
    RESERVED = 1,
    FULLSCREEN_MODE = 2,
    WINDOW_RESIZABLE = 4,
    WINDOW_UNDECORATED = 8,
    WINDOW_TRANSPARENT = 16,
    WINDOW_HIDDEN = 128,
    WINDOW_ALWAYS_RUN = 256,
    MSAA_4X_HINT = 32,
    VSYNC_HINT = 64,
};

AnonymousEnum2 :: enum i32 {
    ALL = 0,
    TRACE,
    DEBUG,
    INFO,
    WARNING,
    ERROR,
    FATAL,
    NONE,
};

AnonymousEnum3 :: enum i32 {
    APOSTROPHE = 39,
    COMMA = 44,
    MINUS = 45,
    PERIOD = 46,
    SLASH = 47,
    ZERO = 48,
    ONE = 49,
    TWO = 50,
    THREE = 51,
    FOUR = 52,
    FIVE = 53,
    SIX = 54,
    SEVEN = 55,
    EIGHT = 56,
    NINE = 57,
    SEMICOLON = 59,
    EQUAL = 61,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    SPACE = 32,
    ESCAPE = 256,
    ENTER = 257,
    TAB = 258,
    BACKSPACE = 259,
    INSERT = 260,
    DELETE = 261,
    RIGHT = 262,
    LEFT = 263,
    DOWN = 264,
    UP = 265,
    PAGE_UP = 266,
    PAGE_DOWN = 267,
    HOME = 268,
    END = 269,
    CAPS_LOCK = 280,
    SCROLL_LOCK = 281,
    NUM_LOCK = 282,
    PRINT_SCREEN = 283,
    PAUSE = 284,
    F1 = 290,
    F2 = 291,
    F3 = 292,
    F4 = 293,
    F5 = 294,
    F6 = 295,
    F7 = 296,
    F8 = 297,
    F9 = 298,
    F10 = 299,
    F11 = 300,
    F12 = 301,
    LEFT_SHIFT = 340,
    LEFT_CONTROL = 341,
    LEFT_ALT = 342,
    LEFT_SUPER = 343,
    RIGHT_SHIFT = 344,
    RIGHT_CONTROL = 345,
    RIGHT_ALT = 346,
    RIGHT_SUPER = 347,
    KB_MENU = 348,
    LEFT_BRACKET = 91,
    BACKSLASH = 92,
    RIGHT_BRACKET = 93,
    GRAVE = 96,
    KP_0 = 320,
    KP_1 = 321,
    KP_2 = 322,
    KP_3 = 323,
    KP_4 = 324,
    KP_5 = 325,
    KP_6 = 326,
    KP_7 = 327,
    KP_8 = 328,
    KP_9 = 329,
    KP_DECIMAL = 330,
    KP_DIVIDE = 331,
    KP_MULTIPLY = 332,
    KP_SUBTRACT = 333,
    KP_ADD = 334,
    KP_ENTER = 335,
    KP_EQUAL = 336,
};

AnonymousEnum4 :: enum i32 {
    BACK = 4,
    MENU = 82,
    VOLUME_UP = 24,
    VOLUME_DOWN = 25,
};

AnonymousEnum5 :: enum i32 {
    LEFT_BUTTON = 0,
    RIGHT_BUTTON = 1,
    MIDDLE_BUTTON = 2,
};

AnonymousEnum6 :: enum i32 {
    PLAYER1 = 0,
    PLAYER2 = 1,
    PLAYER3 = 2,
    PLAYER4 = 3,
};

AnonymousEnum7 :: enum i32 {
    BUTTON_UNKNOWN = 0,
    BUTTON_LEFT_FACE_UP,
    BUTTON_LEFT_FACE_RIGHT,
    BUTTON_LEFT_FACE_DOWN,
    BUTTON_LEFT_FACE_LEFT,
    BUTTON_RIGHT_FACE_UP,
    BUTTON_RIGHT_FACE_RIGHT,
    BUTTON_RIGHT_FACE_DOWN,
    BUTTON_RIGHT_FACE_LEFT,
    BUTTON_LEFT_TRIGGER_1,
    BUTTON_LEFT_TRIGGER_2,
    BUTTON_RIGHT_TRIGGER_1,
    BUTTON_RIGHT_TRIGGER_2,
    BUTTON_MIDDLE_LEFT,
    BUTTON_MIDDLE,
    BUTTON_MIDDLE_RIGHT,
    BUTTON_LEFT_THUMB,
    BUTTON_RIGHT_THUMB,
};

AnonymousEnum8 :: enum i32 {
    AXIS_UNKNOWN = 0,
    AXIS_LEFT_X,
    AXIS_LEFT_Y,
    AXIS_RIGHT_X,
    AXIS_RIGHT_Y,
    AXIS_LEFT_TRIGGER,
    AXIS_RIGHT_TRIGGER,
};

AnonymousEnum9 :: enum i32 {
    VERTEX_POSITION = 0,
    VERTEX_TEXCOORD01,
    VERTEX_TEXCOORD02,
    VERTEX_NORMAL,
    VERTEX_TANGENT,
    VERTEX_COLOR,
    MATRIX_MVP,
    MATRIX_MODEL,
    MATRIX_VIEW,
    MATRIX_PROJECTION,
    VECTOR_VIEW,
    COLOR_DIFFUSE,
    COLOR_SPECULAR,
    COLOR_AMBIENT,
    ALBEDO,
    METALNESS,
    NORMAL,
    ROUGHNESS,
    OCCLUSION,
    EMISSION,
    HEIGHT,
    CUBEMAP,
    IRRADIANCE,
    PREFILTER,
    BRDF,
};

AnonymousEnum10 :: enum i32 {
    FLOAT = 0,
    VEC2,
    VEC3,
    VEC4,
    INT,
    IVEC2,
    IVEC3,
    IVEC4,
    SAMPLER2D,
};

AnonymousEnum11 :: enum i32 {
    ALBEDO = 0,
    METALNESS = 1,
    NORMAL = 2,
    ROUGHNESS = 3,
    OCCLUSION,
    EMISSION,
    HEIGHT,
    CUBEMAP,
    IRRADIANCE,
    PREFILTER,
    BRDF,
};

AnonymousEnum12 :: enum i32 {
    UNCOMPRESSED_GRAYSCALE = 1,
    UNCOMPRESSED_GRAY_ALPHA,
    UNCOMPRESSED_R5G6B5,
    UNCOMPRESSED_R8G8B8,
    UNCOMPRESSED_R5G5B5A1,
    UNCOMPRESSED_R4G4B4A4,
    UNCOMPRESSED_R8G8B8A8,
    UNCOMPRESSED_R32,
    UNCOMPRESSED_R32G32B32,
    UNCOMPRESSED_R32G32B32A32,
    COMPRESSED_DXT1_RGB,
    COMPRESSED_DXT1_RGBA,
    COMPRESSED_DXT3_RGBA,
    COMPRESSED_DXT5_RGBA,
    COMPRESSED_ETC1_RGB,
    COMPRESSED_ETC2_RGB,
    COMPRESSED_ETC2_EAC_RGBA,
    COMPRESSED_PVRT_RGB,
    COMPRESSED_PVRT_RGBA,
    COMPRESSED_ASTC_4x4_RGBA,
    COMPRESSED_ASTC_8x8_RGBA,
};

AnonymousEnum13 :: enum i32 {
    POINT = 0,
    BILINEAR,
    TRILINEAR,
    ANISOTROPIC_4X,
    ANISOTROPIC_8X,
    ANISOTROPIC_16X,
};

AnonymousEnum14 :: enum i32 {
    CUBEMAP_AUTO_DETECT = 0,
    CUBEMAP_LINE_VERTICAL,
    CUBEMAP_LINE_HORIZONTAL,
    CUBEMAP_CROSS_THREE_BY_FOUR,
    CUBEMAP_CROSS_FOUR_BY_THREE,
    CUBEMAP_PANORAMA,
};

AnonymousEnum15 :: enum i32 {
    WRAP_REPEAT = 0,
    WRAP_CLAMP,
    WRAP_MIRROR_REPEAT,
    WRAP_MIRROR_CLAMP,
};

AnonymousEnum16 :: enum i32 {
    DEFAULT = 0,
    BITMAP,
    SDF,
};

AnonymousEnum17 :: enum i32 {
    ALPHA = 0,
    ADDITIVE,
    MULTIPLIED,
};

AnonymousEnum18 :: enum i32 {
    NONE = 0,
    TAP = 1,
    DOUBLETAP = 2,
    HOLD = 4,
    DRAG = 8,
    SWIPE_RIGHT = 16,
    SWIPE_LEFT = 32,
    SWIPE_UP = 64,
    SWIPE_DOWN = 128,
    PINCH_IN = 256,
    PINCH_OUT = 512,
};

AnonymousEnum19 :: enum i32 {
    CUSTOM = 0,
    FREE,
    ORBITAL,
    FIRST_PERSON,
    THIRD_PERSON,
};

AnonymousEnum20 :: enum i32 {
    PERSPECTIVE = 0,
    ORTHOGRAPHIC,
};

AnonymousEnum21 :: enum i32 {
    NPT_9PATCH = 0,
    NPT_3PATCH_VERTICAL,
    NPT_3PATCH_HORIZONTAL,
};

Vector2 :: linalg.Vector2;
Vector3 :: linalg.Vector3;
Vector4 :: linalg.Vector4;
Matrix :: linalg.Matrix4;
Color :: struct {
    r : _c.uchar,
    g : _c.uchar,
    b : _c.uchar,
    a : _c.uchar,
};

Rectangle :: struct {
    x : _c.float,
    y : _c.float,
    width : _c.float,
    height : _c.float,
};

Image :: struct {
    data : rawptr,
    width : _c.int,
    height : _c.int,
    mipmaps : _c.int,
    format : _c.int,
};

Texture2D :: struct {
    id : _c.uint,
    width : _c.int,
    height : _c.int,
    mipmaps : _c.int,
    format : _c.int,
};

RenderTexture2D :: struct {
    id : _c.uint,
    texture : Texture2D,
    depth : Texture2D,
    depth_texture : bool,
};

NPatchInfo :: struct {
    source_rec : Rectangle,
    left : _c.int,
    top : _c.int,
    right : _c.int,
    bottom : _c.int,
    type : _c.int,
};

CharInfo :: struct {
    value : _c.int,
    offset_x : _c.int,
    offset_y : _c.int,
    advance_x : _c.int,
    image : Image,
};

Font :: struct {
    base_size : _c.int,
    chars_count : _c.int,
    texture : Texture2D,
    recs : ^Rectangle,
    chars : ^CharInfo,
};

Camera3D :: struct {
    position : Vector3,
    target : Vector3,
    up : Vector3,
    fovy : _c.float,
    type : _c.int,
};

Camera2D :: struct {
    offset : Vector2,
    target : Vector2,
    rotation : _c.float,
    zoom : _c.float,
};

Mesh :: struct {
    vertex_count : _c.int,
    triangle_count : _c.int,
    vertices : ^_c.float,
    texcoords : ^_c.float,
    texcoords2 : ^_c.float,
    normals : ^_c.float,
    tangents : ^_c.float,
    colors : ^_c.uchar,
    indices : ^_c.ushort,
    anim_vertices : ^_c.float,
    anim_normals : ^_c.float,
    bone_ids : ^_c.int,
    bone_weights : ^_c.float,
    vao_id : _c.uint,
    vbo_id : ^_c.uint,
};

Shader :: struct {
    id : _c.uint,
    locs : ^_c.int,
};

MaterialMap :: struct {
    texture : Texture2D,
    color : Color,
    value : _c.float,
};

Material :: struct {
    shader : Shader,
    maps : ^MaterialMap,
    params : ^_c.float,
};

Transform :: struct {
    translation : Vector3,
    rotation : Quaternion,
    scale : Vector3,
};

BoneInfo :: struct {
    name : [32]_c.char,
    parent : _c.int,
};

Model :: struct {
    transform : Matrix,
    mesh_count : _c.int,
    meshes : ^Mesh,
    material_count : _c.int,
    materials : ^Material,
    mesh_material : ^_c.int,
    bone_count : _c.int,
    bones : ^BoneInfo,
    bind_pose : ^Transform,
};

ModelAnimation :: struct {
    bone_count : _c.int,
    bones : ^BoneInfo,
    frame_count : _c.int,
    frame_poses : ^^Transform,
};

Ray :: struct {
    position : Vector3,
    direction : Vector3,
};

RayHitInfo :: struct {
    hit : bool,
    distance : _c.float,
    position : Vector3,
    normal : Vector3,
};

BoundingBox :: struct {
    min : Vector3,
    max : Vector3,
};

Wave :: struct {
    sample_count : _c.uint,
    sample_rate : _c.uint,
    sample_size : _c.uint,
    channels : _c.uint,
    data : rawptr,
};

RAudioBuffer :: struct {};

AudioStream :: struct {
    sample_rate : _c.uint,
    sample_size : _c.uint,
    channels : _c.uint,
    buffer : ^RAudioBuffer,
};

Sound :: struct {
    sample_count : _c.uint,
    stream : AudioStream,
};

Music :: struct {
    ctx_type : _c.int,
    ctx_data : rawptr,
    sample_count : _c.uint,
    loop_count : _c.uint,
    stream : AudioStream,
};

VrDeviceInfo :: struct {
    h_resolution : _c.int,
    v_resolution : _c.int,
    h_screen_size : _c.float,
    v_screen_size : _c.float,
    v_screen_center : _c.float,
    eye_to_screen_distance : _c.float,
    lens_separation_distance : _c.float,
    interpupillary_distance : _c.float,
    lens_distortion_values : [4]_c.float,
    chroma_ab_correction : [4]_c.float,
};

raylib_Funcs :: struct {
    init_window : proc "c" (
        width : _c.int,
        height : _c.int,
        title : cstring
    ),
    window_should_close : proc "c" () -> bool,
    close_window : proc "c" (),
    is_window_ready : proc "c" () -> bool,
    is_window_minimized : proc "c" () -> bool,
    is_window_resized : proc "c" () -> bool,
    is_window_hidden : proc "c" () -> bool,
    is_window_fullscreen : proc "c" () -> bool,
    toggle_fullscreen : proc "c" (),
    unhide_window : proc "c" (),
    hide_window : proc "c" (),
    set_window_icon : proc "c" (image : Image),
    set_window_title : proc "c" (title : cstring),
    set_window_position : proc "c" (
        x : _c.int,
        y : _c.int
    ),
    set_window_monitor : proc "c" (monitor : _c.int),
    set_window_min_size : proc "c" (
        width : _c.int,
        height : _c.int
    ),
    set_window_size : proc "c" (
        width : _c.int,
        height : _c.int
    ),
    get_window_handle : proc "c" () -> rawptr,
    get_screen_width : proc "c" () -> _c.int,
    get_screen_height : proc "c" () -> _c.int,
    get_monitor_count : proc "c" () -> _c.int,
    get_monitor_width : proc "c" (monitor : _c.int) -> _c.int,
    get_monitor_height : proc "c" (monitor : _c.int) -> _c.int,
    get_monitor_physical_width : proc "c" (monitor : _c.int) -> _c.int,
    get_monitor_physical_height : proc "c" (monitor : _c.int) -> _c.int,
    get_window_position : proc "c" () -> Vector2,
    get_monitor_name : proc "c" (monitor : _c.int) -> cstring,
    get_clipboard_text : proc "c" () -> cstring,
    set_clipboard_text : proc "c" (text : cstring),
    hide_cursor : proc "c" (),
    is_cursor_hidden : proc "c" () -> bool,
    enable_cursor : proc "c" (),
    disable_cursor : proc "c" (),
    clear_background : proc "c" (color : Color),
    begin_drawing : proc "c" (),
    end_drawing : proc "c" (),
    begin_mode_2d : proc "c" (camera : Camera2D),
    end_mode_2d : proc "c" (),
    begin_mode_3d : proc "c" (camera : Camera3D),
    end_mode_3d : proc "c" (),
    begin_texture_mode : proc "c" (target : RenderTexture2D),
    end_texture_mode : proc "c" (),
    begin_scissor_mode : proc "c" (
        x : _c.int,
        y : _c.int,
        width : _c.int,
        height : _c.int
    ),
    end_scissor_mode : proc "c" (),
    get_mouse_ray : proc "c" (
        mouse_position : Vector2,
        camera : Camera
    ) -> Ray,
    get_camera_matrix : proc "c" (camera : Camera) -> Matrix,
    get_camera_matrix_2d : proc "c" (camera : Camera2D) -> Matrix,
    get_world_to_screen : proc "c" (
        position : Vector3,
        camera : Camera
    ) -> Vector2,
    get_world_to_screen_ex : proc "c" (
        position : Vector3,
        camera : Camera,
        width : _c.int,
        height : _c.int
    ) -> Vector2,
    get_world_to_screen_2d : proc "c" (
        position : Vector2,
        camera : Camera2D
    ) -> Vector2,
    get_screen_to_world_2d : proc "c" (
        position : Vector2,
        camera : Camera2D
    ) -> Vector2,
    set_target_fps : proc "c" (fps : _c.int),
    get_fps : proc "c" () -> _c.int,
    get_frame_time : proc "c" () -> _c.float,
    get_time : proc "c" () -> _c.double,
    color_to_int : proc "c" (color : Color) -> _c.int,
    color_normalize : proc "c" (color : Color) -> Vector4,
    color_from_normalized : proc "c" (normalized : Vector4) -> Color,
    color_to_hsv : proc "c" (color : Color) -> Vector3,
    color_from_hsv : proc "c" (hsv : Vector3) -> Color,
    get_color : proc "c" (hex_value : _c.int) -> Color,
    fade : proc "c" (
        color : Color,
        alpha : _c.float
    ) -> Color,
    set_config_flags : proc "c" (flags : ConfigFlag),
    set_trace_log_level : proc "c" (log_type : TraceLogType),
    set_trace_log_exit : proc "c" (log_type : TraceLogType),
    set_trace_log_callback : proc "c" (callback : TraceLogCallback),
    trace_log : proc "c" (
        log_type : TraceLogType,
        text : cstring
    ),
    take_screenshot : proc "c" (file_name : cstring),
    get_random_value : proc "c" (
        min : _c.int,
        max : _c.int
    ) -> _c.int,
    load_file_data : proc "c" (
        file_name : cstring,
        bytes_read : ^_c.uint
    ) -> ^_c.uchar,
    save_file_data : proc "c" (
        file_name : cstring,
        data : rawptr,
        bytes_to_write : _c.uint
    ),
    load_file_text : proc "c" (file_name : cstring) -> cstring,
    save_file_text : proc "c" (
        file_name : cstring,
        text : cstring
    ),
    file_exists : proc "c" (file_name : cstring) -> bool,
    is_file_extension : proc "c" (
        file_name : cstring,
        ext : cstring
    ) -> bool,
    directory_exists : proc "c" (dir_path : cstring) -> bool,
    get_extension : proc "c" (file_name : cstring) -> cstring,
    get_file_name : proc "c" (file_path : cstring) -> cstring,
    get_file_name_without_ext : proc "c" (file_path : cstring) -> cstring,
    get_directory_path : proc "c" (file_path : cstring) -> cstring,
    get_prev_directory_path : proc "c" (dir_path : cstring) -> cstring,
    get_working_directory : proc "c" () -> cstring,
    get_directory_files : proc "c" (
        dir_path : cstring,
        count : ^_c.int
    ) -> ^cstring,
    clear_directory_files : proc "c" (),
    change_directory : proc "c" (dir : cstring) -> bool,
    is_file_dropped : proc "c" () -> bool,
    get_dropped_files : proc "c" (count : ^_c.int) -> ^cstring,
    clear_dropped_files : proc "c" (),
    get_file_mod_time : proc "c" (file_name : cstring) -> _c.long,
    compress_data : proc "c" (
        data : ^_c.uchar,
        data_length : _c.int,
        comp_data_length : ^_c.int
    ) -> ^_c.uchar,
    decompress_data : proc "c" (
        comp_data : ^_c.uchar,
        comp_data_length : _c.int,
        data_length : ^_c.int
    ) -> ^_c.uchar,
    save_storage_value : proc "c" (
        position : _c.uint,
        value : _c.int
    ),
    load_storage_value : proc "c" (position : _c.uint) -> _c.int,
    open_url : proc "c" (url : cstring),
    is_key_pressed : proc "c" (key : KeyboardKey) -> bool,
    is_key_down : proc "c" (key : KeyboardKey) -> bool,
    is_key_released : proc "c" (key : KeyboardKey) -> bool,
    is_key_up : proc "c" (key : KeyboardKey) -> bool,
    set_exit_key : proc "c" (key : KeyboardKey),
    get_key_pressed : proc "c" () -> _c.int,
    is_gamepad_available : proc "c" (gamepad : GamepadNumber) -> bool,
    is_gamepad_name : proc "c" (
        gamepad : GamepadNumber,
        name : cstring
    ) -> bool,
    get_gamepad_name : proc "c" (gamepad : GamepadNumber) -> cstring,
    is_gamepad_button_pressed : proc "c" (
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool,
    is_gamepad_button_down : proc "c" (
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool,
    is_gamepad_button_released : proc "c" (
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool,
    is_gamepad_button_up : proc "c" (
        gamepad : GamepadNumber,
        button : _c.int
    ) -> bool,
    get_gamepad_button_pressed : proc "c" () -> _c.int,
    get_gamepad_axis_count : proc "c" (gamepad : GamepadNumber) -> _c.int,
    get_gamepad_axis_movement : proc "c" (
        gamepad : GamepadNumber,
        axis : _c.int
    ) -> _c.float,
    is_mouse_button_pressed : proc "c" (button : MouseButton) -> bool,
    is_mouse_button_down : proc "c" (button : MouseButton) -> bool,
    is_mouse_button_released : proc "c" (button : MouseButton) -> bool,
    is_mouse_button_up : proc "c" (button : MouseButton) -> bool,
    get_mouse_x : proc "c" () -> _c.int,
    get_mouse_y : proc "c" () -> _c.int,
    get_mouse_position : proc "c" () -> Vector2,
    set_mouse_position : proc "c" (
        x : _c.int,
        y : _c.int
    ),
    set_mouse_offset : proc "c" (
        offset_x : _c.int,
        offset_y : _c.int
    ),
    set_mouse_scale : proc "c" (
        scale_x : _c.float,
        scale_y : _c.float
    ),
    get_mouse_wheel_move : proc "c" () -> _c.int,
    get_touch_x : proc "c" () -> _c.int,
    get_touch_y : proc "c" () -> _c.int,
    get_touch_position : proc "c" (index : _c.int) -> Vector2,
    set_gestures_enabled : proc "c" (gesture_flags : _c.uint),
    is_gesture_detected : proc "c" (gesture : _c.int) -> bool,
    get_gesture_detected : proc "c" () -> _c.int,
    get_touch_points_count : proc "c" () -> _c.int,
    get_gesture_hold_duration : proc "c" () -> _c.float,
    get_gesture_drag_vector : proc "c" () -> Vector2,
    get_gesture_drag_angle : proc "c" () -> _c.float,
    get_gesture_pinch_vector : proc "c" () -> Vector2,
    get_gesture_pinch_angle : proc "c" () -> _c.float,
    set_camera_mode : proc "c" (
        camera : CameraMode,
        mode : _c.int
    ),
    update_camera : proc "c" (camera : ^Camera),
    set_camera_pan_control : proc "c" (pan_key : _c.int),
    set_camera_alt_control : proc "c" (alt_key : _c.int),
    set_camera_smooth_zoom_control : proc "c" (sz_key : _c.int),
    set_camera_move_controls : proc "c" (
        front_key : _c.int,
        back_key : _c.int,
        right_key : _c.int,
        left_key : _c.int,
        up_key : _c.int,
        down_key : _c.int
    ),
    draw_pixel : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        color : Color
    ),
    draw_pixel_v : proc "c" (
        position : Vector2,
        color : Color
    ),
    draw_line : proc "c" (
        start_pos_x : _c.int,
        start_pos_y : _c.int,
        end_pos_x : _c.int,
        end_pos_y : _c.int,
        color : Color
    ),
    draw_line_v : proc "c" (
        start_pos : Vector2,
        end_pos : Vector2,
        color : Color
    ),
    draw_line_ex : proc "c" (
        start_pos : Vector2,
        end_pos : Vector2,
        thick : _c.float,
        color : Color
    ),
    draw_line_bezier : proc "c" (
        start_pos : Vector2,
        end_pos : Vector2,
        thick : _c.float,
        color : Color
    ),
    draw_line_strip : proc "c" (
        points : ^Vector2,
        num_points : _c.int,
        color : Color
    ),
    draw_circle : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color : Color
    ),
    draw_circle_sector : proc "c" (
        center : Vector2,
        radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ),
    draw_circle_sector_lines : proc "c" (
        center : Vector2,
        radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ),
    draw_circle_gradient : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color1 : Color,
        color2 : Color
    ),
    draw_circle_v : proc "c" (
        center : Vector2,
        radius : _c.float,
        color : Color
    ),
    draw_circle_lines : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.float,
        color : Color
    ),
    draw_ellipse : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius_h : _c.float,
        radius_v : _c.float,
        color : Color
    ),
    draw_ellipse_lines : proc "c" (
        center_x : _c.int,
        center_y : _c.int,
        radius_h : _c.float,
        radius_v : _c.float,
        color : Color
    ),
    draw_ring : proc "c" (
        center : Vector2,
        inner_radius : _c.float,
        outer_radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ),
    draw_ring_lines : proc "c" (
        center : Vector2,
        inner_radius : _c.float,
        outer_radius : _c.float,
        start_angle : _c.int,
        end_angle : _c.int,
        segments : _c.int,
        color : Color
    ),
    draw_rectangle : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ),
    draw_rectangle_v : proc "c" (
        position : Vector2,
        size : Vector2,
        color : Color
    ),
    draw_rectangle_rec : proc "c" (
        rec : Rectangle,
        color : Color
    ),
    draw_rectangle_pro : proc "c" (
        rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        color : Color
    ),
    draw_rectangle_gradient_v : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color1 : Color,
        color2 : Color
    ),
    draw_rectangle_gradient_h : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color1 : Color,
        color2 : Color
    ),
    draw_rectangle_gradient_ex : proc "c" (
        rec : Rectangle,
        col1 : Color,
        col2 : Color,
        col3 : Color,
        col4 : Color
    ),
    draw_rectangle_lines : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ),
    draw_rectangle_lines_ex : proc "c" (
        rec : Rectangle,
        line_thick : _c.int,
        color : Color
    ),
    draw_rectangle_rounded : proc "c" (
        rec : Rectangle,
        roundness : _c.float,
        segments : _c.int,
        color : Color
    ),
    draw_rectangle_rounded_lines : proc "c" (
        rec : Rectangle,
        roundness : _c.float,
        segments : _c.int,
        line_thick : _c.int,
        color : Color
    ),
    draw_triangle : proc "c" (
        v1 : Vector2,
        v2 : Vector2,
        v3 : Vector2,
        color : Color
    ),
    draw_triangle_lines : proc "c" (
        v1 : Vector2,
        v2 : Vector2,
        v3 : Vector2,
        color : Color
    ),
    draw_triangle_fan : proc "c" (
        points : ^Vector2,
        num_points : _c.int,
        color : Color
    ),
    draw_triangle_strip : proc "c" (
        points : ^Vector2,
        points_count : _c.int,
        color : Color
    ),
    draw_poly : proc "c" (
        center : Vector2,
        sides : _c.int,
        radius : _c.float,
        rotation : _c.float,
        color : Color
    ),
    draw_poly_lines : proc "c" (
        center : Vector2,
        sides : _c.int,
        radius : _c.float,
        rotation : _c.float,
        color : Color
    ),
    check_collision_recs : proc "c" (
        rec1 : Rectangle,
        rec2 : Rectangle
    ) -> bool,
    check_collision_circles : proc "c" (
        center1 : Vector2,
        radius1 : _c.float,
        center2 : Vector2,
        radius2 : _c.float
    ) -> bool,
    check_collision_circle_rec : proc "c" (
        center : Vector2,
        radius : _c.float,
        rec : Rectangle
    ) -> bool,
    get_collision_rec : proc "c" (
        rec1 : Rectangle,
        rec2 : Rectangle
    ) -> Rectangle,
    check_collision_point_rec : proc "c" (
        point : Vector2,
        rec : Rectangle
    ) -> bool,
    check_collision_point_circle : proc "c" (
        point : Vector2,
        center : Vector2,
        radius : _c.float
    ) -> bool,
    check_collision_point_triangle : proc "c" (
        point : Vector2,
        p1 : Vector2,
        p2 : Vector2,
        p3 : Vector2
    ) -> bool,
    load_image : proc "c" (file_name : cstring) -> Image,
    load_image_ex : proc "c" (
        pixels : ^Color,
        width : _c.int,
        height : _c.int
    ) -> Image,
    load_image_pro : proc "c" (
        data : rawptr,
        width : _c.int,
        height : _c.int,
        format : _c.int
    ) -> Image,
    load_image_raw : proc "c" (
        file_name : cstring,
        width : _c.int,
        height : _c.int,
        format : _c.int,
        header_size : _c.int
    ) -> Image,
    unload_image : proc "c" (image : Image),
    export_image : proc "c" (
        image : Image,
        file_name : cstring
    ),
    export_image_as_code : proc "c" (
        image : Image,
        file_name : cstring
    ),
    get_image_data : proc "c" (image : Image) -> ^Color,
    get_image_data_normalized : proc "c" (image : Image) -> ^Vector4,
    gen_image_color : proc "c" (
        width : _c.int,
        height : _c.int,
        color : Color
    ) -> Image,
    gen_image_gradient_v : proc "c" (
        width : _c.int,
        height : _c.int,
        top : Color,
        bottom : Color
    ) -> Image,
    gen_image_gradient_h : proc "c" (
        width : _c.int,
        height : _c.int,
        left : Color,
        right : Color
    ) -> Image,
    gen_image_gradient_radial : proc "c" (
        width : _c.int,
        height : _c.int,
        density : _c.float,
        inner : Color,
        outer : Color
    ) -> Image,
    gen_image_checked : proc "c" (
        width : _c.int,
        height : _c.int,
        checks_x : _c.int,
        checks_y : _c.int,
        col1 : Color,
        col2 : Color
    ) -> Image,
    gen_image_white_noise : proc "c" (
        width : _c.int,
        height : _c.int,
        factor : _c.float
    ) -> Image,
    gen_image_perlin_noise : proc "c" (
        width : _c.int,
        height : _c.int,
        offset_x : _c.int,
        offset_y : _c.int,
        scale : _c.float
    ) -> Image,
    gen_image_cellular : proc "c" (
        width : _c.int,
        height : _c.int,
        tile_size : _c.int
    ) -> Image,
    image_copy : proc "c" (image : Image) -> Image,
    image_from_image : proc "c" (
        image : Image,
        rec : Rectangle
    ) -> Image,
    image_text : proc "c" (
        text : cstring,
        font_size : _c.int,
        color : Color
    ) -> Image,
    image_text_ex : proc "c" (
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float,
        tint : Color
    ) -> Image,
    image_to_pot : proc "c" (
        image : ^Image,
        fill_color : Color
    ),
    image_format : proc "c" (
        image : ^Image,
        new_format : _c.int
    ),
    image_alpha_mask : proc "c" (
        image : ^Image,
        alpha_mask : Image
    ),
    image_alpha_clear : proc "c" (
        image : ^Image,
        color : Color,
        threshold : _c.float
    ),
    image_alpha_crop : proc "c" (
        image : ^Image,
        threshold : _c.float
    ),
    image_alpha_premultiply : proc "c" (image : ^Image),
    image_crop : proc "c" (
        image : ^Image,
        crop : Rectangle
    ),
    image_resize : proc "c" (
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int
    ),
    image_resize_nn : proc "c" (
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int
    ),
    image_resize_canvas : proc "c" (
        image : ^Image,
        new_width : _c.int,
        new_height : _c.int,
        offset_x : _c.int,
        offset_y : _c.int,
        color : Color
    ),
    image_mipmaps : proc "c" (image : ^Image),
    image_dither : proc "c" (
        image : ^Image,
        r_bpp : _c.int,
        g_bpp : _c.int,
        b_bpp : _c.int,
        a_bpp : _c.int
    ),
    image_flip_vertical : proc "c" (image : ^Image),
    image_flip_horizontal : proc "c" (image : ^Image),
    image_rotate_cw : proc "c" (image : ^Image),
    image_rotate_ccw : proc "c" (image : ^Image),
    image_color_tint : proc "c" (
        image : ^Image,
        color : Color
    ),
    image_color_invert : proc "c" (image : ^Image),
    image_color_grayscale : proc "c" (image : ^Image),
    image_color_contrast : proc "c" (
        image : ^Image,
        contrast : _c.float
    ),
    image_color_brightness : proc "c" (
        image : ^Image,
        brightness : _c.int
    ),
    image_color_replace : proc "c" (
        image : ^Image,
        color : Color,
        replace : Color
    ),
    image_extract_palette : proc "c" (
        image : Image,
        max_palette_size : _c.int,
        extract_count : ^_c.int
    ) -> ^Color,
    get_image_alpha_border : proc "c" (
        image : Image,
        threshold : _c.float
    ) -> Rectangle,
    image_clear_background : proc "c" (
        dst : ^Image,
        color : Color
    ),
    image_draw_pixel : proc "c" (
        dst : ^Image,
        pos_x : _c.int,
        pos_y : _c.int,
        color : Color
    ),
    image_draw_pixel_v : proc "c" (
        dst : ^Image,
        position : Vector2,
        color : Color
    ),
    image_draw_line : proc "c" (
        dst : ^Image,
        start_pos_x : _c.int,
        start_pos_y : _c.int,
        end_pos_x : _c.int,
        end_pos_y : _c.int,
        color : Color
    ),
    image_draw_line_v : proc "c" (
        dst : ^Image,
        start : Vector2,
        end : Vector2,
        color : Color
    ),
    image_draw_circle : proc "c" (
        dst : ^Image,
        center_x : _c.int,
        center_y : _c.int,
        radius : _c.int,
        color : Color
    ),
    image_draw_circle_v : proc "c" (
        dst : ^Image,
        center : Vector2,
        radius : _c.int,
        color : Color
    ),
    image_draw_rectangle : proc "c" (
        dst : ^Image,
        pos_x : _c.int,
        pos_y : _c.int,
        width : _c.int,
        height : _c.int,
        color : Color
    ),
    image_draw_rectangle_v : proc "c" (
        dst : ^Image,
        position : Vector2,
        size : Vector2,
        color : Color
    ),
    image_draw_rectangle_rec : proc "c" (
        dst : ^Image,
        rec : Rectangle,
        color : Color
    ),
    image_draw_rectangle_lines : proc "c" (
        dst : ^Image,
        rec : Rectangle,
        thick : _c.int,
        color : Color
    ),
    image_draw : proc "c" (
        dst : ^Image,
        src : Image,
        src_rec : Rectangle,
        dst_rec : Rectangle,
        tint : Color
    ),
    image_draw_text : proc "c" (
        dst : ^Image,
        position : Vector2,
        text : cstring,
        font_size : _c.int,
        color : Color
    ),
    image_draw_text_ex : proc "c" (
        dst : ^Image,
        position : Vector2,
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float,
        color : Color
    ),
    load_texture : proc "c" (file_name : cstring) -> Texture2D,
    load_texture_from_image : proc "c" (image : Image) -> Texture2D,
    load_texture_cubemap : proc "c" (
        image : Image,
        layout_type : _c.int
    ) -> TextureCubemap,
    load_render_texture : proc "c" (
        width : _c.int,
        height : _c.int
    ) -> RenderTexture2D,
    unload_texture : proc "c" (texture : Texture2D),
    unload_render_texture : proc "c" (target : RenderTexture2D),
    update_texture : proc "c" (
        texture : Texture2D,
        pixels : rawptr
    ),
    get_texture_data : proc "c" (texture : Texture2D) -> Image,
    get_screen_data : proc "c" () -> Image,
    gen_texture_mipmaps : proc "c" (texture : ^Texture2D),
    set_texture_filter : proc "c" (
        texture : Texture2D,
        filter_mode : _c.int
    ),
    set_texture_wrap : proc "c" (
        texture : Texture2D,
        wrap_mode : _c.int
    ),
    draw_texture : proc "c" (
        texture : Texture2D,
        pos_x : _c.int,
        pos_y : _c.int,
        tint : Color
    ),
    draw_texture_v : proc "c" (
        texture : Texture2D,
        position : Vector2,
        tint : Color
    ),
    draw_texture_ex : proc "c" (
        texture : Texture2D,
        position : Vector2,
        rotation : _c.float,
        scale : _c.float,
        tint : Color
    ),
    draw_texture_rec : proc "c" (
        texture : Texture2D,
        source_rec : Rectangle,
        position : Vector2,
        tint : Color
    ),
    draw_texture_quad : proc "c" (
        texture : Texture2D,
        tiling : Vector2,
        offset : Vector2,
        quad : Rectangle,
        tint : Color
    ),
    draw_texture_pro : proc "c" (
        texture : Texture2D,
        source_rec : Rectangle,
        dest_rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        tint : Color
    ),
    draw_texture_n_patch : proc "c" (
        texture : Texture2D,
        n_patch_info : NPatchInfo,
        dest_rec : Rectangle,
        origin : Vector2,
        rotation : _c.float,
        tint : Color
    ),
    get_pixel_data_size : proc "c" (
        width : _c.int,
        height : _c.int,
        format : _c.int
    ) -> _c.int,
    get_font_default : proc "c" () -> Font,
    load_font : proc "c" (file_name : cstring) -> Font,
    load_font_ex : proc "c" (
        file_name : cstring,
        font_size : _c.int,
        font_chars : ^_c.int,
        chars_count : _c.int
    ) -> Font,
    load_font_from_image : proc "c" (
        image : Image,
        key : Color,
        first_char : _c.int
    ) -> Font,
    load_font_data : proc "c" (
        file_name : cstring,
        font_size : _c.int,
        font_chars : ^_c.int,
        chars_count : _c.int,
        type : _c.int
    ) -> ^CharInfo,
    gen_image_font_atlas : proc "c" (
        chars : ^CharInfo,
        recs : ^^Rectangle,
        chars_count : _c.int,
        font_size : _c.int,
        padding : _c.int,
        pack_method : _c.int
    ) -> Image,
    unload_font : proc "c" (font : Font),
    draw_fps : proc "c" (
        pos_x : _c.int,
        pos_y : _c.int
    ),
    draw_text : proc "c" (
        text : cstring,
        pos_x : _c.int,
        pos_y : _c.int,
        font_size : _c.int,
        color : Color
    ),
    draw_text_ex : proc "c" (
        font : Font,
        text : cstring,
        position : Vector2,
        font_size : _c.float,
        spacing : _c.float,
        tint : Color
    ),
    draw_text_rec : proc "c" (
        font : Font,
        text : cstring,
        rec : Rectangle,
        font_size : _c.float,
        spacing : _c.float,
        word_wrap : bool,
        tint : Color
    ),
    draw_text_rec_ex : proc "c" (
        font : Font,
        text : cstring,
        rec : Rectangle,
        font_size : _c.float,
        spacing : _c.float,
        word_wrap : bool,
        tint : Color,
        select_start : _c.int,
        select_length : _c.int,
        select_tint : Color,
        select_back_tint : Color
    ),
    draw_text_codepoint : proc "c" (
        font : Font,
        codepoint : _c.int,
        position : Vector2,
        scale : _c.float,
        tint : Color
    ),
    measure_text : proc "c" (
        text : cstring,
        font_size : _c.int
    ) -> _c.int,
    measure_text_ex : proc "c" (
        font : Font,
        text : cstring,
        font_size : _c.float,
        spacing : _c.float
    ) -> Vector2,
    get_glyph_index : proc "c" (
        font : Font,
        codepoint : _c.int
    ) -> _c.int,
    text_copy : proc "c" (
        dst : cstring,
        src : cstring
    ) -> _c.int,
    text_is_equal : proc "c" (
        text1 : cstring,
        text2 : cstring
    ) -> bool,
    text_length : proc "c" (text : cstring) -> _c.uint,
    text_format : proc "c" (text : cstring) -> cstring,
    text_subtext : proc "c" (
        text : cstring,
        position : _c.int,
        length : _c.int
    ) -> cstring,
    text_replace : proc "c" (
        text : cstring,
        replace : cstring,
        by : cstring
    ) -> cstring,
    text_insert : proc "c" (
        text : cstring,
        insert : cstring,
        position : _c.int
    ) -> cstring,
    text_join : proc "c" (
        text_list : ^cstring,
        count : _c.int,
        delimiter : cstring
    ) -> cstring,
    text_split : proc "c" (
        text : cstring,
        delimiter : _c.char,
        count : ^_c.int
    ) -> ^cstring,
    text_append : proc "c" (
        text : cstring,
        append : cstring,
        position : ^_c.int
    ),
    text_find_index : proc "c" (
        text : cstring,
        find : cstring
    ) -> _c.int,
    text_to_upper : proc "c" (text : cstring) -> cstring,
    text_to_lower : proc "c" (text : cstring) -> cstring,
    text_to_pascal : proc "c" (text : cstring) -> cstring,
    text_to_integer : proc "c" (text : cstring) -> _c.int,
    text_to_utf_8 : proc "c" (
        codepoints : ^_c.int,
        length : _c.int
    ) -> cstring,
    get_codepoints : proc "c" (
        text : cstring,
        count : ^_c.int
    ) -> ^_c.int,
    get_codepoints_count : proc "c" (text : cstring) -> _c.int,
    get_next_codepoint : proc "c" (
        text : cstring,
        bytes_processed : ^_c.int
    ) -> _c.int,
    codepoint_to_utf_8 : proc "c" (
        codepoint : _c.int,
        byte_length : ^_c.int
    ) -> cstring,
    draw_line_3d : proc "c" (
        start_pos : Vector3,
        end_pos : Vector3,
        color : Color
    ),
    draw_point_3d : proc "c" (
        position : Vector3,
        color : Color
    ),
    draw_circle_3d : proc "c" (
        center : Vector3,
        radius : _c.float,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        color : Color
    ),
    draw_cube : proc "c" (
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ),
    draw_cube_v : proc "c" (
        position : Vector3,
        size : Vector3,
        color : Color
    ),
    draw_cube_wires : proc "c" (
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ),
    draw_cube_wires_v : proc "c" (
        position : Vector3,
        size : Vector3,
        color : Color
    ),
    draw_cube_texture : proc "c" (
        texture : Texture2D,
        position : Vector3,
        width : _c.float,
        height : _c.float,
        length : _c.float,
        color : Color
    ),
    draw_sphere : proc "c" (
        center_pos : Vector3,
        radius : _c.float,
        color : Color
    ),
    draw_sphere_ex : proc "c" (
        center_pos : Vector3,
        radius : _c.float,
        rings : _c.int,
        slices : _c.int,
        color : Color
    ),
    draw_sphere_wires : proc "c" (
        center_pos : Vector3,
        radius : _c.float,
        rings : _c.int,
        slices : _c.int,
        color : Color
    ),
    draw_cylinder : proc "c" (
        position : Vector3,
        radius_top : _c.float,
        radius_bottom : _c.float,
        height : _c.float,
        slices : _c.int,
        color : Color
    ),
    draw_cylinder_wires : proc "c" (
        position : Vector3,
        radius_top : _c.float,
        radius_bottom : _c.float,
        height : _c.float,
        slices : _c.int,
        color : Color
    ),
    draw_plane : proc "c" (
        center_pos : Vector3,
        size : Vector2,
        color : Color
    ),
    draw_ray : proc "c" (
        ray : Ray,
        color : Color
    ),
    draw_grid : proc "c" (
        slices : _c.int,
        spacing : _c.float
    ),
    draw_gizmo : proc "c" (position : Vector3),
    load_model : proc "c" (file_name : cstring) -> Model,
    load_model_from_mesh : proc "c" (mesh : Mesh) -> Model,
    unload_model : proc "c" (model : Model),
    load_meshes : proc "c" (
        file_name : cstring,
        mesh_count : ^_c.int
    ) -> ^Mesh,
    export_mesh : proc "c" (
        mesh : Mesh,
        file_name : cstring
    ),
    unload_mesh : proc "c" (mesh : Mesh),
    load_materials : proc "c" (
        file_name : cstring,
        material_count : ^_c.int
    ) -> ^Material,
    load_material_default : proc "c" () -> Material,
    unload_material : proc "c" (material : Material),
    set_material_texture : proc "c" (
        material : ^Material,
        map_type : _c.int,
        texture : Texture2D
    ),
    set_model_mesh_material : proc "c" (
        model : ^Model,
        mesh_id : _c.int,
        material_id : _c.int
    ),
    load_model_animations : proc "c" (
        file_name : cstring,
        anims_count : ^_c.int
    ) -> ^ModelAnimation,
    update_model_animation : proc "c" (
        model : Model,
        anim : ModelAnimation,
        frame : _c.int
    ),
    unload_model_animation : proc "c" (anim : ModelAnimation),
    is_model_animation_valid : proc "c" (
        model : Model,
        anim : ModelAnimation
    ) -> bool,
    gen_mesh_poly : proc "c" (
        sides : _c.int,
        radius : _c.float
    ) -> Mesh,
    gen_mesh_plane : proc "c" (
        width : _c.float,
        length : _c.float,
        res_x : _c.int,
        res_z : _c.int
    ) -> Mesh,
    gen_mesh_cube : proc "c" (
        width : _c.float,
        height : _c.float,
        length : _c.float
    ) -> Mesh,
    gen_mesh_sphere : proc "c" (
        radius : _c.float,
        rings : _c.int,
        slices : _c.int
    ) -> Mesh,
    gen_mesh_hemi_sphere : proc "c" (
        radius : _c.float,
        rings : _c.int,
        slices : _c.int
    ) -> Mesh,
    gen_mesh_cylinder : proc "c" (
        radius : _c.float,
        height : _c.float,
        slices : _c.int
    ) -> Mesh,
    gen_mesh_torus : proc "c" (
        radius : _c.float,
        size : _c.float,
        rad_seg : _c.int,
        sides : _c.int
    ) -> Mesh,
    gen_mesh_knot : proc "c" (
        radius : _c.float,
        size : _c.float,
        rad_seg : _c.int,
        sides : _c.int
    ) -> Mesh,
    gen_mesh_heightmap : proc "c" (
        heightmap : Image,
        size : Vector3
    ) -> Mesh,
    gen_mesh_cubicmap : proc "c" (
        cubicmap : Image,
        cube_size : Vector3
    ) -> Mesh,
    mesh_bounding_box : proc "c" (mesh : Mesh) -> BoundingBox,
    mesh_tangents : proc "c" (mesh : ^Mesh),
    mesh_binormals : proc "c" (mesh : ^Mesh),
    draw_model : proc "c" (
        model : Model,
        position : Vector3,
        scale : _c.float,
        tint : Color
    ),
    draw_model_ex : proc "c" (
        model : Model,
        position : Vector3,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        scale : Vector3,
        tint : Color
    ),
    draw_model_wires : proc "c" (
        model : Model,
        position : Vector3,
        scale : _c.float,
        tint : Color
    ),
    draw_model_wires_ex : proc "c" (
        model : Model,
        position : Vector3,
        rotation_axis : Vector3,
        rotation_angle : _c.float,
        scale : Vector3,
        tint : Color
    ),
    draw_bounding_box : proc "c" (
        box : BoundingBox,
        color : Color
    ),
    draw_billboard : proc "c" (
        camera : Camera,
        texture : Texture2D,
        center : Vector3,
        size : _c.float,
        tint : Color
    ),
    draw_billboard_rec : proc "c" (
        camera : Camera,
        texture : Texture2D,
        source_rec : Rectangle,
        center : Vector3,
        size : _c.float,
        tint : Color
    ),
    check_collision_spheres : proc "c" (
        center_a : Vector3,
        radius_a : _c.float,
        center_b : Vector3,
        radius_b : _c.float
    ) -> bool,
    check_collision_boxes : proc "c" (
        box1 : BoundingBox,
        box2 : BoundingBox
    ) -> bool,
    check_collision_box_sphere : proc "c" (
        box : BoundingBox,
        center : Vector3,
        radius : _c.float
    ) -> bool,
    check_collision_ray_sphere : proc "c" (
        ray : Ray,
        center : Vector3,
        radius : _c.float
    ) -> bool,
    check_collision_ray_sphere_ex : proc "c" (
        ray : Ray,
        center : Vector3,
        radius : _c.float,
        collision_point : ^Vector3
    ) -> bool,
    check_collision_ray_box : proc "c" (
        ray : Ray,
        box : BoundingBox
    ) -> bool,
    get_collision_ray_model : proc "c" (
        ray : Ray,
        model : Model
    ) -> RayHitInfo,
    get_collision_ray_triangle : proc "c" (
        ray : Ray,
        p1 : Vector3,
        p2 : Vector3,
        p3 : Vector3
    ) -> RayHitInfo,
    get_collision_ray_ground : proc "c" (
        ray : Ray,
        ground_height : _c.float
    ) -> RayHitInfo,
    load_shader : proc "c" (
        vs_file_name : cstring,
        fs_file_name : cstring
    ) -> Shader,
    load_shader_code : proc "c" (
        vs_code : cstring,
        fs_code : cstring
    ) -> Shader,
    unload_shader : proc "c" (shader : Shader),
    get_shader_default : proc "c" () -> Shader,
    get_texture_default : proc "c" () -> Texture2D,
    get_shapes_texture : proc "c" () -> Texture2D,
    get_shapes_texture_rec : proc "c" () -> Rectangle,
    set_shapes_texture : proc "c" (
        texture : Texture2D,
        source : Rectangle
    ),
    get_shader_location : proc "c" (
        shader : Shader,
        uniform_name : cstring
    ) -> _c.int,
    set_shader_value : proc "c" (
        shader : Shader,
        uniform_loc : _c.int,
        value : rawptr,
        uniform_type : _c.int
    ),
    set_shader_value_v : proc "c" (
        shader : Shader,
        uniform_loc : _c.int,
        value : rawptr,
        uniform_type : _c.int,
        count : _c.int
    ),
    set_shader_value_matrix : proc "c" (
        shader : Shader,
        uniform_loc : _c.int,
        mat : Matrix
    ),
    set_shader_value_texture : proc "c" (
        shader : Shader,
        uniform_loc : _c.int,
        texture : Texture2D
    ),
    set_matrix_projection : proc "c" (proj : Matrix),
    set_matrix_modelview : proc "c" (view : Matrix),
    get_matrix_modelview : proc "c" () -> Matrix,
    get_matrix_projection : proc "c" () -> Matrix,
    gen_texture_cubemap : proc "c" (
        shader : Shader,
        _map : Texture2D,
        size : _c.int
    ) -> Texture2D,
    gen_texture_irradiance : proc "c" (
        shader : Shader,
        cubemap : Texture2D,
        size : _c.int
    ) -> Texture2D,
    gen_texture_prefilter : proc "c" (
        shader : Shader,
        cubemap : Texture2D,
        size : _c.int
    ) -> Texture2D,
    gen_texture_brdf : proc "c" (
        shader : Shader,
        size : _c.int
    ) -> Texture2D,
    begin_shader_mode : proc "c" (shader : Shader),
    end_shader_mode : proc "c" (),
    begin_blend_mode : proc "c" (mode : BlendMode),
    end_blend_mode : proc "c" (),
    init_vr_simulator : proc "c" (),
    close_vr_simulator : proc "c" (),
    update_vr_tracking : proc "c" (camera : ^Camera),
    set_vr_configuration : proc "c" (
        info : VrDeviceInfo,
        distortion : Shader
    ),
    is_vr_simulator_ready : proc "c" () -> bool,
    toggle_vr_mode : proc "c" (),
    begin_vr_drawing : proc "c" (),
    end_vr_drawing : proc "c" (),
    init_audio_device : proc "c" (),
    close_audio_device : proc "c" (),
    is_audio_device_ready : proc "c" () -> bool,
    set_master_volume : proc "c" (volume : _c.float),
    load_wave : proc "c" (file_name : cstring) -> Wave,
    load_sound : proc "c" (file_name : cstring) -> Sound,
    load_sound_from_wave : proc "c" (wave : Wave) -> Sound,
    update_sound : proc "c" (
        sound : Sound,
        data : rawptr,
        samples_count : _c.int
    ),
    unload_wave : proc "c" (wave : Wave),
    unload_sound : proc "c" (sound : Sound),
    export_wave : proc "c" (
        wave : Wave,
        file_name : cstring
    ),
    export_wave_as_code : proc "c" (
        wave : Wave,
        file_name : cstring
    ),
    play_sound : proc "c" (sound : Sound),
    stop_sound : proc "c" (sound : Sound),
    pause_sound : proc "c" (sound : Sound),
    resume_sound : proc "c" (sound : Sound),
    play_sound_multi : proc "c" (sound : Sound),
    stop_sound_multi : proc "c" (),
    get_sounds_playing : proc "c" () -> _c.int,
    is_sound_playing : proc "c" (sound : Sound) -> bool,
    set_sound_volume : proc "c" (
        sound : Sound,
        volume : _c.float
    ),
    set_sound_pitch : proc "c" (
        sound : Sound,
        pitch : _c.float
    ),
    wave_format : proc "c" (
        wave : ^Wave,
        sample_rate : _c.int,
        sample_size : _c.int,
        channels : _c.int
    ),
    wave_copy : proc "c" (wave : Wave) -> Wave,
    wave_crop : proc "c" (
        wave : ^Wave,
        init_sample : _c.int,
        final_sample : _c.int
    ),
    get_wave_data : proc "c" (wave : Wave) -> ^_c.float,
    load_music_stream : proc "c" (file_name : cstring) -> Music,
    unload_music_stream : proc "c" (music : Music),
    play_music_stream : proc "c" (music : Music),
    update_music_stream : proc "c" (music : Music),
    stop_music_stream : proc "c" (music : Music),
    pause_music_stream : proc "c" (music : Music),
    resume_music_stream : proc "c" (music : Music),
    is_music_playing : proc "c" (music : Music) -> bool,
    set_music_volume : proc "c" (
        music : Music,
        volume : _c.float
    ),
    set_music_pitch : proc "c" (
        music : Music,
        pitch : _c.float
    ),
    set_music_loop_count : proc "c" (
        music : Music,
        count : _c.int
    ),
    get_music_time_length : proc "c" (music : Music) -> _c.float,
    get_music_time_played : proc "c" (music : Music) -> _c.float,
    init_audio_stream : proc "c" (
        sample_rate : _c.uint,
        sample_size : _c.uint,
        channels : _c.uint
    ) -> AudioStream,
    update_audio_stream : proc "c" (
        stream : AudioStream,
        data : rawptr,
        samples_count : _c.int
    ),
    close_audio_stream : proc "c" (stream : AudioStream),
    is_audio_stream_processed : proc "c" (stream : AudioStream) -> bool,
    play_audio_stream : proc "c" (stream : AudioStream),
    pause_audio_stream : proc "c" (stream : AudioStream),
    resume_audio_stream : proc "c" (stream : AudioStream),
    is_audio_stream_playing : proc "c" (stream : AudioStream) -> bool,
    stop_audio_stream : proc "c" (stream : AudioStream),
    set_audio_stream_volume : proc "c" (
        stream : AudioStream,
        volume : _c.float
    ),
    set_audio_stream_pitch : proc "c" (
        stream : AudioStream,
        pitch : _c.float
    ),
    set_audio_stream_buffer_size_default : proc "c" (size : _c.int),
}

